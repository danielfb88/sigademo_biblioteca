<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?
class frmReservaEsperaUsuario extends Form
{
	var $objReserva;
	var $objUsuario;
	var $objSituacao;
	
	function __construct()
    {  
		global $MIOLO, $action;

		$this->Form('Reservas em Espera por Usuário');
		$this->EventHandler();
  		$this->defaultButton = false;
  		// Botão 'fechar', direcionando para o handler biblioteca/main/circulacao/reserva
		$this->SetClose($this->manager->GetActionURL($module, 'main:circulacao:reserva'));
    
    }
   
    function CreateFields()
    {
		if (! $this->page->IsPostBack()){

			// Campos que aparecem no formulário
			$fields = Array (
				new TextField('edtCodigo','','Login do Usuário',20,'Matrícula do aluno/Siape do funcionário/professor ou login',4),
				);
			$this->SetFields($fields);

			// Botões que aparecem no formulário
			$buttons = Array(
				new FormButton('btnProcurar', 'Procurar'),
	    		);
			$this->SetButtons($buttons);

			// validators
			$this->AddValidator(new RequiredValidator('edtCodigo'));
		}

		//Definindo o foco
		if (!($this->GetFieldValue('edtCodigo')))
		{
			$this->page->onLoad("MIOLO_GetElementById('edtCodigo').focus();");
		}
	}

	function btnProcurar_click()
	{
		global $MIOLO, $module, $self, $theme, $action, $page, $item;

		if($item==null)
			$codigo = $this->GetFormValue('edtCodigo');
		else
			$codigo = $item;

		$this->objUsuario = $MIOLO->GetBusiness($module,'usuario');
		$usuario = $this->objUsuario->GetByLogin($codigo);
		
		if(!$usuario)
		{
			$usuario[0][0] = $this->objUsuario->GetByCartao($codigo);
			
			if(!empty($usuario[0][0]))
			{
				$dadosusuario = $this->objUsuario->GetById($usuario[0][0]);
				$usuario = $this->objUsuario->GetByLogin($dadosusuario[0][2]);			
			}
		}
		
		$nome_usuario = $usuario[0][1];
		$telefone_usuario = $usuario[0][2];
		$celular_usuario = $usuario[0][3];
		
		$id_usuario = $usuario[0][0];
		if ($id_usuario == null){
			$MIOLO->Error("Código do usuário não encontrado.", $MIOLO->GetActionURL($module = $module, $action = $action));
		}

		//datagrid
		$this->SetTitle(NULL);

		$columns = array(
			new DataGridColumn('idreserva','Nº Reserva','center',true, '15%',true, null, false, false),
			new DataGridColumn('numerodotombo','Exemplar','center',true, '15%',true, null, false, false),
			new DataGridColumn('titulo','Título','left',false, '50%',true, null, false, false),
			new DataGridColumn('datahoradareserva','Solicitação','center',true, '20%',true, null, false, false),
		);

		//Instancia o objeto emprestimo
	    $this->objReserva = $MIOLO->GetBusiness($module,'reserva');

		$query = $this->objReserva->ListReservaEsperaUsuario($id_usuario);
		
		$href_datagrid = $MIOLO->GetActionURL($module,$action,$codigo,Array('event'=>'btnProcurar_click'));
		$page->SetAction($href_datagrid);

		$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
		$datagrid->SetTitle('Reservas em Espera - ' . $nome_usuario . '  Telefone(s): ' . $telefone_usuario . ' ' . $celular_usuario);
		$datagrid->SetWidth('99%');

		$fields = array(
						$datagrid,
		);

		$this->SetFields($fields);

		$this->SetButtonAttr('btnProcurar','visible',false);
		$buttons = Array(
			new FormButton('btnVoltar', 'Voltar', $MIOLO->GetActionURL($module = $module, $action = $action)),
   		);
		$this->SetButtons($buttons);

	}

}
?>
