<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?
class frmUsuarioInfracoes extends Form
{

	var $objUsuarioInfracoes;
	var $objusuario;

    function frmUsuarioInfracoes()  // construtor da Classe
    {
		global $MIOLO,$module;

		// Título do Formulário
		$this->Form('Cadastro de Infrações de Usuários');

		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" não aparece
		$this->defaultButton = false;
		
		// Botão 'fechar', direcionando para o handler biblioteca/main/circulacao/usuario
		$this->SetClose($this->manager->GetActionURL($module, 'main:circulacao:usuario'));

									 
	}
   
    function CreateFields()
    {	
		global $MIOLO,$module,$action;

		// Campos que aparecem no formulário
		$fields = Array (
			//new Text('','Use o formulário abaixo para cadastrar uma nova usuarioinfracoes da biblioteca'),
			new LookupTextField('lkpUsuario','','Usuário',30),
			new TextField('edtNome','','Nome',60),
			new Selection('selInfracao','','Infração'),
			new TextField('edtNota','','Nota',60),
			new HiddenField('hidIdnotainfracao'),
			new HiddenField('hidIdUsuario'),
			new HiddenField('hidKey') // controla Incluir/Editar
			);
		
		// Insere os campos
		$this->SetFields($fields);

		// Botões que aparecem no formulário
		$buttons = Array(
			new FormButton('btnConsulta', 'Procurar'),
			new FormButton('btnEnviar', 'Incluir'),
			new FormButton('btnExcluir', 'Excluir'),
			new FormButton('btnVoltar', 'Voltar', $MIOLO->GetActionURL($module, $action)),
    		);

		//Insere os Botões
		$this->SetButtons($buttons);

		//As 4 propriedades de um lookup
		// module = módulo usado
		// item = A funcao que chama no arquivo classes/lookup.class
		// event = O evento relacionado quando o usuário clica em "acao"
		// related = Os campos retornados após a ação
		$this->SetFieldAttr('lkpUsuario','module','biblioteca');
		$this->SetFieldAttr('lkpUsuario','item','usuario');
		$this->SetFieldAttr('lkpUsuario','event','filler');
		$this->SetFieldAttr('lkpUsuario','related','lkpUsuario,"",""');


		//Esconde o campo nome e a caixa de seleção
		$this->SetFieldAttr('edtNome','visible', false);
		$this->SetFieldAttr('selInfracao','visible',false);
		$this->SetFieldAttr('edtNota','visible', false);
		

		// Botão excluir nao aparece, pois o formulário está em branco
		$this->SetButtonAttr('btnExcluir','visible',false);
		$this->SetButtonAttr('btnEnviar','visible',false);
		$this->SetButtonAttr('btnVoltar','visible',false);
		
		
		//Instancia o objeto usuarioinfracoes
	    	$this->objUsuarioInfracoes = $MIOLO->GetBusiness($module,'usuarioinfracoes');

		// Adicionando dados as caixas de seleção
		$query = $this->objUsuarioInfracoes->ListInfracoes();
		
		$this->SetFieldAttr('selInfracao','options',array_merge(array('0'=>'--Selecione--'),$query->result));    

		//Definindo o foco
		if (!($this->GetFieldValue('lkpUsuario')))
		{
			$this->page->onLoad("MIOLO_GetElementById('lkpUsuario').focus();");
		}
   }

	// pega os dados que estão no formulário   
    function GetData()
    {
	   	$data = new FormData();
        $data->usuario = $this->GetFieldValue('lkpUsuario');
		$data->nome = $this->GetFieldValue('edtNome');
        $data->idinfracao = $this->GetFieldValue('selInfracao');
		$data->notainfracao = $this->GetFieldValue('edtNota');
		$data->idnotainfracao = $this->GetFieldValue('hidIdnotainfracao');
		$data->idusuario = $this->GetFieldValue('hidIdUsuario');		
 	   	return $data;
    }

	
	// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('lkpUsuario',$data->usuario);
		$this->SetFieldValue('edtNome',$data->nome);
		$this->SetFieldValue('selInfracao',$data->idinfracao);
		$this->SetFieldValue('edtNota',$data->notainfracao);
		$this->SetFieldValue('hidIdnotainfracao',$data->idnotainfracao);
		$this->SetFieldValue('hidIdUsuario',$data->idusuario);
				
	}

	function btnConsulta_click($sender,$login)
	{ 
		global $MIOLO,$module,$item;

		//A linha abaixo verifica se existe um login no campo lookup
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
		$login = $this->GetFieldValue('lkpUsuario');
		//$login = ($login != '') ? $login : $item;
        if ($login != NULL) {
            $this->objusuario = $MIOLO->GetBusiness($module,'usuario');
            $check = $this->objusuario->GetByLogin($login);

            if ($check != NULL){

            // Já considera que o usuário quer excluir,editar uma usuarioinfracoes
                $this->SetButtonAttr('btnConsulta','visible',false);
                $this->SetButtonAttr('btnEnviar','visible',true);
                $this->SetButtonAttr('btnEnviar','label','Salvar');
                $this->SetButtonAttr('btnVoltar','visible',true);

            //Instancia o objeto usuario
                $this->objusuario = $MIOLO->GetBusiness($module,'usuario');
            // ok retorna os dados de nome
                $query = $this->objusuario->GetByLogin($login);
                $nome = $query[0][1];
                $idusuario = $query[0][0];
                $this->SetFieldValue('edtNome',$nome);
                $this->SetFieldValue('hidIdUsuario',$idusuario);
		
                $this->SetFieldAttr('lkpUsuario','readonly',true);
            //Campo Nome,Observações,Infração e Nota
                $this->SetFieldAttr('edtNome','visible',true);
                $this->SetFieldAttr('selInfracao','visible',true);
                $this->SetFieldAttr('edtNome','readonly',true);
                $this->SetFieldAttr('edtNota','visible',true);
				
                $this->SetFieldValue('lkpUsuario',$login);
		
		
                $this->btnList_click($nome,$idusuario,$login);

            //Definindo o foco
                if (!($this->GetFieldValue('edtNota')))
                {
                    $this->page->onLoad("MIOLO_GetElementById('edtNota').focus();");
                }
            } else {
                $MIOLO->Prompt(Prompt::Error("Usuário inexistente.",$MIOLO->GetActionURL($module,$action)));
            }

        } else {
            $MIOLO->Prompt(Prompt::Error("Por favor, preencha o campo Usuário.",$MIOLO->GetActionURL($module,$action)));
        }
	}
	
	// Consulta: função chamada após o usuário usar o lookup
	function btnConsulta2_click($sender)
	{ 
		global $MIOLO,$module,$item;

		$campos = explode("@",$item);
		$id = $campos[0];

		//Instancia o objeto usuarioinfracoes
    	$this->objUsuarioInfracoes = $MIOLO->GetBusiness($module,'usuarioinfracoes');

		$nota = $this->objUsuarioInfracoes->GetNotaInfracao($campos);	
		$this->SetFieldValue('edtNota',$nota[0]);

		// Já considera que o usuário quer excluir,editar uma usuarioinfracoes
		$this->SetButtonAttr('btnConsulta','visible',false);
		$this->SetButtonAttr('btnEnviar','visible',true);	
 		$this->SetButtonAttr('btnEnviar','label','Salvar');
		$this->SetButtonAttr('btnVoltar','visible',true);

		//Instancia o objeto usuario
		$this->objusuario = $MIOLO->GetBusiness($module,'usuario');
		// ok retorna os dados de nome
		$query = $this->objusuario->GetById($id);
		$nome = $query[0][1];	
		$idusuario = $query[0][0];
		$login = $query[0][2];
		//var_dump($idusuario);	
		$this->SetFieldValue('edtNome',$nome);
		$this->SetFieldValue('hidIdUsuario',$idusuario);
		$this->SetFieldValue('hidIdnotainfracao',$campos[1]);
		
		$this->SetFieldAttr('lkpUsuario','readonly',true);
		//Campo Nome,Observações,Infração e Nota
		$this->SetFieldAttr('edtNome','visible',true);
		$this->SetFieldAttr('selInfracao','visible',true);
		$this->SetFieldAttr('edtNome','readonly',true);
		$this->SetFieldAttr('edtNota','visible',true);
				
		$this->SetFieldValue('lkpUsuario',$campos[0]);
		$this->SetFieldValue('edtNota',$nota[0]);
		$this->SetFieldValue('selInfracao',$nota[1]);

		$this->SetFieldValue('lkpUsuario',$login);
			
	}
	
	

	// Enviar pode ser inserir ou editar
	function btnEnviar_click()
	{ global $MIOLO,$theme,$module,$item,$action,$self;

/*
	  //if(strlen(trim(Form::GetFormValue('selInfracao'))) == 0)
	  //var_dump(Form::GetFormValue('selInfracao'));   ***		rever
	  // else   
	  if(strlen(trim(Form::GetFormValue('edtNota'))) == 0)
	  {
	    $this->AddError('Informe o campo "Nota".');
	  }
	  else
	  {
	  if(strlen(trim(Form::GetFormValue('edtNota'))) == 0)
	  {
	    $this->AddError('Informe o campo "Nota".');
	  }
*/

	  //ticiano.lima Bug #32553
	    if( Form::GetFormValue('selInfracao') == '0' )
	    {
	      $MIOLO->Error("Por favor, selecione uma \" INFRAÇÃO \".",'');
	    }
	  //ticiano.lima Bug #32553

	  $data = $this->GetData();
	  //var_dump($data);
				
	  //Instancia o objeto usuarioinfracoes
	  $this->objUsuarioInfracoes = $MIOLO->GetBusiness($module,'usuarioinfracoes');
	  
	  //var_dump($data);	
	  //	  if ( $data->idnotainfracao != null) 
	  //	  {
	  
	  if ($data->idnotainfracao)
	  { // Usuário quer editar um item
		$what = " atualizada ";
		$ok = $this->objUsuarioInfracoes->Update($data);
	  }
	  else
	  { // Usuário quer inserir novo item
		$what = " inserida ";
		// verificar se já existe idusuarioinfracoes
		$ok = $this->objUsuarioInfracoes->Insert($data);
	  }
	  if ( $ok )
	  {	
		$theme->ClearContent();
		$MIOLO->Prompt(Prompt::Information("A infração para '" . $data->nome . "' foi  $what com sucesso.",$MIOLO->GetActionURL($module,$self)));			
	  }
	  else
	  {
		$theme->ClearContent();
		$MIOLO->Error("A infração para '" . $data->nome  . "' não foi $what. ", $MIOLO->GetActionURL($module,$self) );		
	  }

		/*	}	
		//	else	
		//	{	
				// $MIOLO->Prompt(Prompt::Error("Por favor, selecione uma infracao.",$MIOLO->GetActionURL($module,$action)));
				//	$this->AddError('Por favor, selecione uma infracao.');
		//	}	
		    //  }
		*/
	}


	function btnExcluir_click()
	{ 
		global $MIOLO, $module, $item,$action;
		
	    //Instancia o objeto usuarioinfracoes
	    $this->objUsuarioInfracoes = $MIOLO->GetBusiness($module,'usuarioinfracoes');
		
		$data = $this->GetData();

		//list($idusuario,$idobservacao) = explode("@",$item);
		$campos = explode("@",$item);
		
		//A linha abaixo verifica se existe um data->idusuarioinfracoes
       //Se nao existir, ela tenta pegar $item que é passada
       //pelo botao editar do "relação"
	   

       $ok = $this->objUsuarioInfracoes->Delete($campos);

	   if ( $ok )
			$MIOLO->Information("Infração excluída da base de dados", $MIOLO->GetActionURL($module,$self) );
	   else
			$MIOLO->Error("As informações não foram excluídas", $MIOLO->GetActionURL($module,$self) );

	}

	function btnList_click($nome=null,$idusuario=null,$login=null)
	{
		global $MIOLO, $module, $self, $theme, $action, $page, $item;

	
		if ( ($nome) AND ($idusuario) AND ($login) )
		{
		
			// Já considera que o usuário quer excluir,editar uma usuarioinfracoes
			$this->SetButtonAttr('btnConsulta','visible',false);
			$this->SetButtonAttr('btnEnviar','visible',true);	
	 		$this->SetButtonAttr('btnEnviar','label','Salvar');
			$this->SetButtonAttr('btnVoltar','visible',true);
	
			//Instancia o objeto usuario
			$this->objusuario = $MIOLO->GetBusiness($module,'usuario');
			// ok retorna os dados de nome
			//$query = $this->objusuario->GetByLogin($login);
			//$nome = $query[0][1];	
			//$idusuario = $query[0][0];	
			
			$this->SetFieldValue('edtNome',$nome);
			$this->SetFieldValue('hidIdUsuario',$idusuario);
			
			$this->SetFieldAttr('lkpUsuario','readonly',true);
			//Campo Nome,Observações,Infração e Nota
			$this->SetFieldAttr('edtNome','visible',true);
			$this->SetFieldAttr('selInfracao','visible',true);
			$this->SetFieldAttr('edtNome','readonly',true);
			$this->SetFieldAttr('edtNota','visible',true);
					
			$this->SetFieldValue('lkpUsuario',$login);
	
			$columns = array(
				new DataGridColumn(null),
				new DataGridColumn('descricao','Infração','left', true, '40%',true, null, true,true),
				new DataGridColumn('notainfracao','Nota','left', true, '60%',true, null, true,true)
				);
	
			$href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>'btnList_click'));
			$page->SetAction($href_datagrid);
	
			 //Instancia o objeto usuarioinfracoes
		    	$this->objUsuarioInfracoes = $MIOLO->GetBusiness($module,'usuarioinfracoes');
	
			$query = $this->objUsuarioInfracoes->ListUsuarioInfracoes($idusuario);
			//echo "<pre>";
			//var_dump($query);
			//echo "</pre>";
			$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
			$datagrid->SetTitle('Infrações de: ' . $nome . ' [' . $login . ']');
			$datagrid->SetLinkType('linkbutton');
			$datagrid->SetWidth('99%');  
			
			$href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnConsulta2:click'));
			$href_dele = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnExcluir:click'));
			
			$datagrid->AddActionIcon('Editar', 'edit', $href_edit);
			$datagrid->AddActionIcon('Excluir', 'delete.gif', $href_dele);
			
	
			$theme->AppendContent($datagrid);
			
		}
	
	}

	

}

?>
