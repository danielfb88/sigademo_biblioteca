<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?
class frmTransicao extends Form
{

	var $objTransicao;

    function frmTransicao()  // construtor da Classe
    {
		global $MIOLO,$module;

		// Título do Formulário
		$this->Form('Transicaos dos Exemplares');

		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" não aparece
		$this->defaultButton = false;
	 
	}
   
    function CreateFields()
    {
		// Campos que aparecem no formulário
		$fields = Array (
			new LookupTextField('lkpEstadopresente','','Estado Presente',20),
			new LookupTextField('lkpOperacao','','Operação',20),
			new LookupTextField('lkpEstadofuturo','','Estado Futuro',20),

			// Precisa de 3 campos para chave no update
		    new HiddenField('hidKeyEstadoPresente'), 
			new HiddenField('hidKeyEstadoFuturo'), 
			new HiddenField('hidKeyOperacao') 
			);

		// Insere os campos
		$this->SetFields($fields);

		// Botões que aparecem no formulário
		$buttons = Array(
			new FormButton('btnEnviar', 'Incluir'),
			new FormButton('btnExcluir', 'Excluir'),
			new FormButton('btnList', 'Relação'),
    		);

		//Insere os Botões
		$this->SetButtons($buttons);

		//As 4 propriedades de um lookup
		// module = módulo usado
		// item = A funcao que chama no arquivo classes/lookup.class
		// event = O evento relacionado quando o usuário clica em "acao"
		// related = Os campos retornados após a ação
		$this->SetFieldAttr('lkpEstadopresente','module','biblioteca');
		$this->SetFieldAttr('lkpEstadopresente','item','estado');
		$this->SetFieldAttr('lkpEstadopresente','event','filler');
		$this->SetFieldAttr('lkpEstadopresente','related', 'idestado,descricao');

		$this->SetFieldAttr('lkpEstadofuturo','module','biblioteca');
		$this->SetFieldAttr('lkpEstadofuturo','item','estado');
		$this->SetFieldAttr('lkpEstadofuturo','event','btnConsultaestadofuturo:click');
		$this->SetFieldAttr('lkpEstadofuturo','related', 'idestado');

		$this->SetFieldAttr('lkpOperacao','module','biblioteca');
		$this->SetFieldAttr('lkpOperacao','item','operacao');
		$this->SetFieldAttr('lkpOperacao','event','filler');
		$this->SetFieldAttr('lkpOperacao','related', 'hidKeyOperacao,null,lkpOperacao');

		// Botão excluir nao aparece, pois o formulário está em branco
		$this->SetButtonAttr('btnExcluir','visible',false);

		// validators
		//$this->AddValidator(new RequiredValidator('lkpCodigo'));
		//$this->AddValidator(new RequiredValidator('edtMnemonico'));
   
   }

	// pega os dados que estão no formulário   
    function GetData()
    {
    $data = new FormData();
        $data->idtransicao = $this->GetFieldValue('lkpEstadopresente');
		$data->idtransicao = $this->GetFieldValue('lkpEstadofuturo');
		$data->idtransicao = $this->GetFieldValue('lkpOperacao');        

        $data->hidKeyEstadoPresente = $this->GetFieldValue('hidKeyEstadoPresente');
        $data->hidKeyEstadoFuturo = $this->GetFieldValue('hidKeyEstadoFuturo');
        $data->hidKeyOperacao = $this->GetFieldValue('hidKeyOperacao');

	return $data;
    }

	
	// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('lkpEstadopresente',$data->idtransicao);
		$this->SetFieldValue('lkpEstadofuturo',$data->idtransicao);
		$this->SetFieldValue('lkpOperacao',$data->idtransicao);		

		$this->SetFieldValue('hidKeyEstadoPresente',$data->hidKeyEstadoPresente);
		$this->SetFieldValue('hidKeyEstadoFuturo',$data->hidKeyEstadoFuturo);
		$this->SetFieldValue('hidKeyOperacao',$data->hidKeyOperacao);
	}

	// Consulta: função chamada após o usuário usar o lookup
	function btnConsultaestadopresente_click($idestadopresente)
	{ 
		global $MIOLO,$module, $item;
		//A linha abaixo verifica se existe um idestadopresente
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
		$idestadopresente = ($idestadopresente != '') ? $idestadopresente : $item;
	
		$this->SetFieldValue('lkpEstadopresente',$idestadopresente);
		$this->SetFieldValue('hidKeyEstadoPresente',$idestadopresente);
	}

	// Consulta: função chamada após o usuário usar o lookup
	function btnConsultaestadofuturo_click($idestadofuturo)
	{ 
		global $MIOLO,$module, $item;

		//A linha abaixo verifica se existe um idestadopresente
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
		$idestadofuturo = ($idestadofuturo != '') ? $idestadofuturo : $item;
			
		$this->SetFieldValue('lkpEstadofuturo',$idestadofuturo);
		$this->SetFieldValue('hidKeyEstadoFuturo',$idestadofuturo);
	}

	// Consulta: função chamada após o usuário usar o lookup
	function btnConsultaoperacao_click($idoperacao)
	{ 
		global $MIOLO,$module, $item;

		

		//A linha abaixo verifica se existe um idestadopresente
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
		$idoperacao = ($idoperacao != '') ? $idoperacao : $item;
	
		$this->SetFieldValue('lkpOperacao',$idoperacao);
		$this->SetFieldValue('hidKeyOperacao',$idoperacao);
	}


	// Enviar pode ser inserir ou editar
	function btnEnviar_click()
	{ global $MIOLO,$module;
	
		$data = $this->GetData();

		//Instancia o objeto transicao
		$this->objTransicao = $MIOLO->GetBusiness($module,'transicao');
		
		if ( ($data->hidKeyEstadoFuturo) AND ($data->hidKeyEstadoPresente) AND ($data->hidKeyOperacao) )
		{ // Usuário quer editar um item

			$what = " atualizado ";

			$ok = $this->objTransicao->Update($data);
				
		}
		else
		{ // Usuário quer inserir novo item

			$what = " inserido ";

			// verificar se já existe idtransicao
			$ok = $this->objTransicao->Insert($data);

		}

		if ( $ok )
			$MIOLO->Information("Registro $what com sucesso.", $action );
		else
			$MIOLO->Error("Registro não foi $what. ", $action );

	}


	function btnExcluir_click()
	{ 
		global $MIOLO, $module, $item;
		
	    $data = $this->GetData();

	    //Instancia o objeto transicao
	    $this->objTransicao = $MIOLO->GetBusiness($module,'transicao');

       //A linha abaixo verifica se existe um data->keyOperacao
       //Se nao existir, ela tenta pegar $item que é passada
       //pelo botao editar do "relação"
	   if (!($data->keyOperacao))
	   {
		 $this->objTransicao->GetByCodigo($item);
		 $data = $this->objTransicao->GetData();
	   }

       $ok = $this->objTransicao->Delete($data);

	   if ( $ok )
			$MIOLO->Information($data->mnemonico . " deletado da base de dados", $action );
	   else
			$MIOLO->Error("As informações não foram deletadas", $action );

	}

	function btnList_click()
	{
		global $MIOLO, $module, $self, $theme, $action, $page;

		//Instancia o objeto transicao
		$this->objTransicao = $MIOLO->GetBusiness($module,'transicao');

		$columns = array(
			new DataGridColumn('estadopresente','Estado presente','right', true, '40%',true, null, true, true),
			new DataGridColumn('operacao','Operação','center', true, '20%',true, null, true,true),
			new DataGridColumn('estadofuturo','Estado Futuro','left',true, '400%',true, null, true,true),
			);

		$href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>'btnList_click'));
		$page->SetAction($href_datagrid);

		$query = $this->objTransicao->ListTransicao();
		
		$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
		$datagrid->SetTitle('Relação de Transicões dos Exemplares');
		$datagrid->SetLinkType('linkbutton');
		$datagrid->SetWidth('100%');
		$href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnConsulta:click'));
		$href_dele = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnExcluir:click'));
		
		$datagrid->AddActionIcon('Salvar', 'edit', $href_edit);
		$datagrid->AddActionIcon('Excluir', 'delete.gif', $href_dele);
		$datagrid->HeaderLink('new', 'Novo Registro',
		
		$MIOLO->GetActionURL($module,$self,'',Array('event'=>'')));

		$theme->InsertContent($datagrid);
	
	}

}

?>
