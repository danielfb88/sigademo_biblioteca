<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
* Este arquivo é parte do programa SigaEPT
*
* O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
* termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
* na versão 2 da Licença.
*
* Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
* uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
* Pública Geral GNU/GPL em português para maiores detalhes.
*
* Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
* junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
* www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
* St, Fifth Floor, Boston, MA 02110-1301, USA
*/
?>
<?php
/**
 * @package SIGA
 * @subpackage Biblioteca
 * @author SETEC/MEC
 */

/*
 * @author Daniel bonfim
* Modificação em 29/03/2013
* Adicionado funcionalidade para devolução de multiplos exemplares.
*/
class frmDevolucao extends Form
{

	var $objEmprestimo;
	var $objDevolucao;
	var $objExemplar;
	var $objReserva;
	var $objReservar;

	function frmDevolucao()  // construtor da Classe
	{
		global $MIOLO,$module;

		// Título do Formulário
		$this->Form('Balcao de Emprestimos - Devoluçao');

		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" não aparece
		$this->defaultButton = false;

	}


	function CreateFields() {


		// Campos que aparecem no formulário
		$fields = Array (
				//new Text('','Use o formulário abaixo para cadastrar uma nova usuarioobservacoes da biblioteca'),
					
				new HiddenField('hidID'),
				new HiddenField('hidKey'), // controla Incluir/Editar
				new TextField('edtExemplar','','Exemplar(es)',50),
				new Text('observacao','<font size=2 ><font color=red>Para devolver mais de um exemplar, separe-os com uma vírgula. Ex: 71, 23, 44</font>'),
				new HiddenField('hidIdEmprestimo'),
				new HiddenField('hidExemplar'),
				new HiddenField('hidIdusuarioopdevolucao'),
				new HiddenField('hidMulta'),
				new HiddenField('hidIdOperacao'),
		);

		// Insere os campos
		$this->SetFields($fields);


		// BotÃµes que aparecem no formulário
		$buttons = Array(
				new FormButton('btnDevolver', 'Confirmar Devoluçao'),
				new FormButton('btnConsulta', 'Consultar'),
				new FormButton('btnVoltar', 'Voltar'),

		);

		//Insere os Botões
		$this->SetButtons($buttons);


		// Atributo dos botões
		$this->SetButtonAttr('btnDevolver','visible',false);
		$this->SetButtonAttr('btnConsulta','visible',true);
		$this->SetButtonAttr('btnVoltar','visible',false);

		//Definindo o foco
		//$this->page->onLoad('document.'.$this->name.'.edtExemplar.focus();');
		$this->page->onLoad("MIOLO_GetElementById('edtExemplar').focus();");


		$this->AddValidator(new RequiredValidator('edtExemplar'));
			
	}

	// pega os dados que estão no formuláio
	function GetData()
	{
		$data = new FormData();
		$data->ID = $this->GetFieldValue('hidID');
		$data->exemplar = $this->GetFieldValue('edtExemplar');
		$data->idemprestimo = $this->GetFieldValue('hidIdEmprestimo');
		$data->hidexemplar = $this->GetFieldValue('hidExemplar');
		$data->hididopdevolucao = $this->GetFieldValue('hidIdusuarioopdevolucao');
		$data->hidmulta = $this->GetFieldValue('hidMulta');
		$data->hididoperacao = $this->GetFieldValue('hidIdOperacao');
		//var_dump($data);
		return $data;
	}


	// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('hidID',$data->ID);
		$this->setFieldValue('edtExemplar',$data->exemplar);
		$this->setFieldValue('hidIdEmprestimo',$data->idemprestimo);
		$this->setFieldValue('hidExemplar',$data->hidexemplar);
		$this->setFieldValue('hidIdusuarioopdevolucao',$data->hididopdevolucao);
		$this->setFieldValue('hidMulta',$data->hidmulta);
		$this->setFieldValue('hidIdOperacao',$data->hididoperacao);
	}


	/**
	 * @author Daniel Bonfim
	 * @since 29-03-2013
	 */
	function btnConsulta_click() {
		global $MIOLO,$module,$item,$self, $theme, $page;

		$data = $this->GetData();

		$bussDevolucao = $MIOLO->GetBusiness($module,'devolucao');
		$bussEmprestimo = $MIOLO->GetBusiness($module,'emprestimo');
		$bussExemplar = $MIOLO->GetBusiness($module,'exemplar');

		$arrExemplares = explode(',', $data->exemplar);
		$arrExemplares = array_filter(array_unique($arrExemplares));
		sort($arrExemplares);

		if(count($arrExemplares) > 0) {
			$arrInfoExemplares = $bussEmprestimo->getExemplaresEmprestadosByTombo($arrExemplares);
			$arrExemplaresNaoEncontrados = $arrExemplares;

			if(!is_null($arrInfoExemplares)) {

				// Para cada exemplar encontrado
				for($i=0; $i<count($arrInfoExemplares); $i++) {

					$infoExemplares[$i] = array(
							'idEmprestimo' => $arrInfoExemplares[$i][0],
							'dataHoraPrevisaoDevolucao' => $arrInfoExemplares[$i][1],
							'idExemplar' => $arrInfoExemplares[$i][2],
							'numeroDoTombo' => $arrInfoExemplares[$i][3],
							'idRegraCirculacao' => $arrInfoExemplares[$i][4],
							'valorDaMulta' => $arrInfoExemplares[$i][5],
							'diasAtraso' => $arrInfoExemplares[$i][6],
							'idUsuario' => $arrInfoExemplares[$i][7],
							'idGrupo' => $arrInfoExemplares[$i][8],
							'numeroDaObra' => $arrInfoExemplares[$i][9],
							'titulo' => $arrInfoExemplares[$i][10],
							'autor' => $arrInfoExemplares[$i][11],
							'edicao' => $arrInfoExemplares[$i][12],
							'status' => null
					);

					// guardando quais foram os exemplares não encontrados
					for($k=0; $k<count($arrExemplares); $k++) {
						if($infoExemplares[$i]['numeroDoTombo'] == $arrExemplaresNaoEncontrados[$k]) {
							unset($arrExemplaresNaoEncontrados[$k]);
						}
					}


					if($infoExemplares[$i]['diasAtraso'] > 0) {
						$valorDaMultaTotal = $infoExemplares[$i]['diasAtraso'] * $infoExemplares[$i]['valorDaMulta'];
						$infoExemplares[$i]['status'] = "<font color='red'><u> ATENÇÃO, devolução com MULTA: R$ $valorDaMultaTotal </u></font>";

					} else {
						$infoExemplares[$i]['status'] = "<font color='blue'>OK Emprestado</font>";

					}

					$this->SetTitle('Detalhes do Exemplar');

					/*
					 * Exibindo exemplares encontrados
					*/
					$this->AddField(new TextLabel('Exemplar', $infoExemplares[$i]['numeroDoTombo'], 'Exemplar'));
					$this->AddField(new TextLabel('Obra', $infoExemplares[$i]['numeroDaObra'], 'Obra'));
					$this->AddField(new TextLabel('Titulo', $infoExemplares[$i]['titulo'], 'Titulo'));
					$this->AddField(new TextLabel('Autor', $infoExemplares[$i]['autor'], 'Autor'));
					$this->AddField(new TextLabel('Edicao', $infoExemplares[$i]['edicao'], 'Edicao'));
					$this->AddField(new TextLabel('Status', $infoExemplares[$i]['status'], 'Status'));
					$this->AddField(new MSeparator());
				}
				// Colocando as informações na Sessão para serem recuperadas no método btnDevolver
				$_SESSION['infoExemplares'] = $infoExemplares;

				/*
				 * Exibindo exemplares não emprestados ou não existentes
				*/
				sort($arrExemplaresNaoEncontrados);
				for($k=0; $k<count($arrExemplaresNaoEncontrados); $k++) {
					if($bussExemplar->isExemplarExisteByTombo($arrExemplaresNaoEncontrados[$k])) {
						$status = "<font color='red'>O exemplar não está emprestado</font>";
					} else {
						$status = "<font color='red'>O exemplar não existe</font>";
					}

					$this->AddField(new TextLabel('Exemplar', $arrExemplaresNaoEncontrados[$k], 'Exemplar'));
					$this->AddField(new TextLabel('Status', $status, 'Status'));
					$this->AddField(new MSeparator());
				}


				// Atributo dos botões
				$this->SetButtonAttr('btnDevolver','visible',true);
				$this->SetButtonAttr('btnVoltar','visible',true);
				$this->SetButtonAttr('btnConsulta','visible',false);

				//Esconde os campos
				$this->SetFieldAttr('edtExemplar','visible', false);
				$this->SetFieldAttr('observacao','visible', false);

			} else {
				$go = $MIOLO->GetActionURL($module, $self);
				$MIOLO->Error("Exemplar(es) não emprestado(s) ou não existente(s).", $go);
			}
		}
	}


	/**
	 * @author Daniel Bonfim
	 * @since 31-03-2013
	 */
	function btnDevolver_click() {
		global $MIOLO,$module,$item,$self, $theme, $action, $page;

		$infoExemplares = $_SESSION['infoExemplares'];

		$bussDevolucao = $MIOLO->GetBusiness($module,'devolucao');
		$bussEmprestimo = $MIOLO->GetBusiness($module,'emprestimo');
		$bussExemplar = $MIOLO->GetBusiness($module,'exemplar');
		$bussEstado = $MIOLO->GetBusiness($module,'estado');
		$bussLog = $MIOLO->GetBusiness($module,'log');

		// Campos visíveis
		$this->SetButtonAttr('btnvoltar','visible',true);

		// Campos invisíveis
		$this->SetButtonAttr('btnDevolver','visible',false);
		$this->SetButtonAttr('btnConfirmar','visible',false);
		$this->SetFieldAttr('edtExemplar','visible', false);

		$bussDevolucao->beginTransaction();

		for($i=0; $i<count($infoExemplares); $i++) {

			// Devolvendo Exemplar
			$bussDevolucao->devolverExemplar($infoExemplares[$i]['idEmprestimo'], $infoExemplares[$i]['numeroDoTombo']);

			// Log
			$bussLog->SetData($this->getDataLog($infoExemplares[$i]['idEmprestimo']));
			$bussLog->save();
		}

		$bussDevolucao->endTransaction();

		$theme->ClearContent();

		// Daniel Bonfim / 31-01-2013
		$msg = "Devolução efetuada com SUCESSO.</br> Deseja gerar o comprovante?";

		$gotoYes = $MIOLO->GetActionURL($module, $self, null, array('exemplar'=>$data->hidexemplar));
		$eventYes = 'imprimirRecibo';	// nome do método a ser executado

		$gotoNo = $MIOLO->GetActionURL($module, $self);
		$eventNo = '';

		$MIOLO->Question($msg, $gotoYes, $gotoNo, $eventYes, $eventNo);
	}


	function getDataLog($Devolucao)
	{
		global $MIOLO;
		$data = new FormData();
		$data->data = date("d/m/Y H:i:s");
		$data->identificador = $Devolucao;
		$data->idusuario = $MIOLO->GetLogin()->idkey;
		$operacao = $MIOLO->GetBusiness('biblioteca','operacao');
		$operacao = $operacao->GetIdoperacaoByMnemonico('DEVOLUCAO');
		$data->idoperacao = $operacao->GetIdoperacao();
		return $data;
	}

	/**
	 * @author Daniel Bonfim
	 * @since 31-01-2013
	 */
	function imprimirRecibo() {
		$infoExemplares = $_SESSION['infoExemplares'];
		unset($_SESSION['infoExemplares']);

		$exemplares = '';
		for($i=0; $i<count($infoExemplares); $i++) {
			$exemplares .= "'{$infoExemplares[$i]['numeroDoTombo']}'";
			if($i != count($infoExemplares) - 1)
				$exemplares .= ',';
		}

		$parameters[ 'str_NUMERODOTOMBO' ] = $exemplares;
		$report = new MJasperReport('sigaept');
		$report->Execute('biblioteca','Ticket1_Devolucao_UI', $parameters);
	}



}

?>
