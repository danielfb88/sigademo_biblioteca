<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/

class frmEstado extends Form
{

	var $objEstado;
	var $objOperacao;

    function frmEstado()  // construtor da Classe
    {
		global $MIOLO,$module;

        $this->objOperacao = $MIOLO->GetBusiness($module,'operacao');
        $this->objEstado = $MIOLO->GetBusiness($module,'estado');

		// Título do Formulário
		$this->Form('Estados dos Exemplares');

		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" não aparece
		$this->defaultButton = false;
		
		// Botão 'fechar', direcionando para o handler biblioteca/main/admin
		$this->SetClose($this->manager->GetActionURL($module, 'main:admin'));
	 
	}
   
    function CreateFields()
    {
      		global $page;
	   // Obter todas as operacoes
       $objQuery = $this->objOperacao->ListOperacao();
       $operacoes = $objQuery->ChunkResult();
		
	   // Obter todos os estados
       $objQuery = $this->objEstado->ListEstado();
       $estados = $objQuery->ChunkResult();

		//Campos do MTF
          $mt_field = Array(
          Array('mtoperacao','Operação','',$operacoes),
          Array('mtestadofuturo','Estado Futuro','',$estados)
       );

		
		// Campos que aparecem no formulário
		$fields = Array (
			new LookupTextField('lkpDescricao','','Descrição',60),
			new TextField('edtMnemonico','','Mnemônico',20),
			new HiddenField('hidKey'), // controla Incluir/Editar
     		new MMultiTextField2('mtfEstados',null,'Acesso',$mt_field,240,true,'horizontal'),
			);

		// Insere os campos
		$this->SetFields($fields);

		// Botões que aparecem no formulário
		$buttons = Array(
			new FormButton('btnEnviar', 'Incluir'),
			new FormButton('btnExcluir', 'Excluir'),
			//new FormButton('btnList', 'Relação'),
			new MLink('btnLinkRelacao','Relação de Estados dos Exemplares',$this->manager->getActionURL($module,$self,'',array('event'=>'btnList:click'))),
    		);

		//Insere os Botões
		$this->SetButtons($buttons);

		//As 4 propriedades de um lookup
		// module = módulo usado
		// item = A funcao que chama no arquivo classes/lookup.class
		// event = O evento relacionado quando o usuário clica em "acao"
		// related = Os campos retornados após a ação
		$this->SetFieldAttr('lkpDescricao','module','biblioteca');
		$this->SetFieldAttr('lkpDescricao','item','estado');
		$this->SetFieldAttr('lkpDescricao','event','btnConsulta:click');
		$this->SetFieldAttr('lkpDescricao','related', 'idestado');

		// Botão excluir nao aparece, pois o formulário está em branco
		$this->SetButtonAttr('btnExcluir','visible',false);

		// validators
		$this->AddValidator(new RequiredValidator('lkpDescricao'));
		$this->AddValidator(new RequiredValidator('edtMnemonico'));
   
   }

	// pega os dados que estão no formulário   
    function GetData()
    {
        $data = new FormData();
        $data->idestado = $this->GetFormValue('hidKey');
        $data->descricao = trim($this->GetFormValue('lkpDescricao'));
        $data->mnemonico = trim($this->GetFormValue('edtMnemonico'));
    		$data->estados = $this->mtfEstados->GetCodeValue();
    		

    return $data;
    }

	
	// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('lkpDescricao',$data->descricao);
		$this->SetFieldValue('edtMnemonico',$data->mnemonico);
		$this->SetFieldValue('hidKey',$data->idestado);
	  $this->mtfEstados->SetCodeValue($data->estados);
	}

	// Consulta: função chamada após o usuário usar o lookup
	function btnConsulta_click($sender,$idestado)
	{ 
		global $MIOLO,$module, $item;

		//A linha abaixo verifica se existe um idestado
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
		$idestado = ($idestado != '') ? $idestado : $item;
	
		// Já considera que o usuário quer excluir,editar um estado
		$this->SetButtonAttr('btnExcluir','visible',true);	
 		$this->SetButtonAttr('btnEnviar','label','Salvar');	

		// ok retorna os dados de idestado
		$ok = $this->objEstado->GetByCodigo($idestado);	

		// este é o setdata deste arquivo. não é o setdata da classe de negócios
		// veja que é $this->SetData e nao $this->objEstado->SetData
		$this->SetData($ok);
		
	   $this->SetFieldAttr('lkpCodigo','readonly',true);
				
	}

	// Enviar pode ser inserir ou editar
	function btnEnviar_click()
	{
  /*      $value = $this->mtfEstados->GetCodeValue();
        echo "<PRE>";
        var_dump($value);
        echo "----------------------------------";
        $value = $this->mt->GetCodeValue();
        var_dump($value);
        
        ,$operacoes),
          Array('mtestadofuturo','Estado Futuro','',$estados)
      //*/

     //$this->AddField(new MTableRaw('Campo mt3',$value));
     
    global $MIOLO,$module;
    
		
		    $data = $this->GetData();


			
		//	var_dump(Form::GetFormValue('mtfEstados'));
		
		$str = (Form::GetFormValue('mtfEstados'));
		
		
		//var_dump($data->estados[0]);
		
		//$teste = ($data->estados[0]);
		
		//var_dump('valor=');

		$value = ($this->mtfEstados->GetCodeValue());
		
		
		//if (in_array('array', $teste, TRUE)) { 
 		//	   echo "Tem false!!!!";
		//}
		
             var_dump($value);
        	
			
			
			//var_dump(Array('mtestadofuturo','Estado Futuro','',$estados));
			

	if( strlen(trim(Form::GetFormValue('lkpDescricao'))) == 0)
		{
			$this->AddError('Informe o campo "Descrição".');
			
			
		
			
		}else if( strlen(trim(Form::GetFormValue('edtMnemonico'))) == 0)
		{
			$this->AddError('Informe o campo "Mnemonico".');
		}
		
		else if( strlen(Form::GetFormValue('mtfEstados')) == 0)
		{
			$this->AddError('Selecione os campos de acesso corretamente.');
		}
		
		
	else
	
	{
	
		

		if ( $data->idestado )
		{ // Usuário quer editar um item

			$what = " atualizado ";

			$ok = $this->objEstado->Update($data);
			if($ok){$this->objEstado->Log(OP_UPD,'Estado alterado - id = '.$this->objEstado->idestado);}
		}
		else
		{ // Usuário quer inserir novo item

			$what = " inserido ";

			// verificar se já existe idestado
			$ok = $this->objEstado->Insert($data);
			if($ok){$this->objEstado->Log(OP_INS,'Estado inserido - id = '.$ok);}
		}

		if ( $ok )
		{
       $go = $this->manager->GetActionURL('biblioteca','main:admin:estado',"");
       $MIOLO->Information($data->mnemonico . " $what com sucesso. ", $go );
    }
		else
		{
		   $MIOLO->Error("'" . $data->mnemonico  . "' não foi $what. ", $go );
		}
	}
}




	function btnExcluir_click()
	{ 
		global $MIOLO, $module, $item, $action;
		
	    $data = $this->GetData();

       //A linha abaixo verifica se existe um data->idestado
       //Se nao existir, ela tenta pegar $item que é passada
       //pelo botao editar do "relação"
	   if (!($data->idestado))
	   {
		 $this->objEstado->GetByCodigo($item);
		 $data = $this->objEstado->GetData();
	   }

       $ok = $this->objEstado->Delete($data);
       if($ok){$this->objEstado->Log(OP_DEL,'Estado deletado - id = '.$this->objEstado->idestado);}
       
	   if ( $ok )
			$MIOLO->Information($data->mnemonico . " deletado da base de dados", $MIOLO->GetActionURL($module,$action) );
	   else
			$MIOLO->Error("As informações não foram deletadas", $MIOLO->GetActionURL($module,$action) );

	}

	function btnList_click()
	{
		global $MIOLO, $module, $self, $theme, $action, $page;

		$columns = array(
			new DataGridColumn(null),
			new DataGridColumn('descricao','Descrição','left',true, '50%',true, null, true,true),
			new DataGridColumn('mnemonico','Mnemónico','center', true, '50%',true, null, true,true)
			);

		$href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>'btnList_click'));
		$page->SetAction($href_datagrid);

		$query = $this->objEstado->ListEstado();
		
		$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
		$datagrid->SetTitle('Relação de Estados dos Exemplares');
		$datagrid->SetLinkType('linkbutton');
		$datagrid->SetWidth('100%');
		$href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnConsulta:click'));
		$href_dele = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnExcluir:click'));
		
		$datagrid->AddActionIcon('Salvar', 'edit', $href_edit);
		$datagrid->AddActionIcon('Excluir', 'delete.gif', $href_dele);
		$datagrid->HeaderLink('new', 'Novo Registro',
		
		$MIOLO->GetActionURL($module,$self,'',Array('event'=>'')));

		$theme->InsertContent($datagrid);
	
	}

}

?>
