<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/

class frmCatalogacaoNovoAutorSec  extends MForm
{
    public $obra;
    public $operacao;
    public $usuario;
    public $idObra;
	 var $objAutor;
	 var $objObra;

    function __construct($data)
    {

        $this->idObra = $data->idobra;
        parent::__construct('Novo Autor Secundário');

     	   //Botão "enviar" não aparece
		   $this->defaultButton = true;	//Chama o CreateFileds, etc.
   		$this->EventHandler();

	   	// Botão "enviar" não aparece
	   	$this->defaultButton = false;

       // Botão 'fechar', direcionando para o handler biblioteca/main/catalogacao
		 $this->SetClose($this->manager->GetActionURL($module, 'main:catalogacao'));
    }




    function CreateFields()
    {
       	global $MIOLO, $module, $self, $theme, $action, $page,$item;


	// Botões que aparecem no formulário
		
      $buttons = Array(
			new FormButton('btnSalvar', 'Incluir'),
		new FormButton('btnExcluir', 'Excluir'),    
	
	);

	
		//Insere os Botões
		$this->SetButtons($buttons);
                
		$columns = array(
			new DataGridColumn(null),
			new DataGridColumn('conteudo','Nome','left',true, '50%'),
			new DataGridColumn('ocorrencia','Ocorrencia','center', true, '50%')
			);


	//	$href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>''));
		$page->SetAction($href_datagrid);



		 //Instancia o objeto autor

	    $this->objAutor = $MIOLO->GetBusiness($module,'autor');
		$query = $this->objAutor->GetAutorSecundarioByObra($item);
		$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
		//$datagrid->SetTitle('Relação de Autores Secundários');
		$datagrid->SetLinkType('linkbutton');
		$datagrid->SetWidth('100%');
		$theme->InsertContent($datagrid);




	// Campos que aparecem no formulário

		$fields = Array (
			//new Text('','Use o formulário abaixo para cadastrar um novo Autor da biblioteca'),
			
         
                       new LookupTextField('edtPrenome','','Prenome',45,'Pesquisar'),
                       new HiddenField('idautor'),
                       new HiddenField('idetiqueta'),
                       new TextField('edtSobrenome','','Sobrenome',60,'',4),
			//new TextField('edtPrenome','','Prenome',20,'',4),
			new HiddenField('hidKey') // controla Incluir/Editar
			);

		// Insere os campos

		$this->SetFields($fields);

	
                //As 4 propriedades de um lookup
                // module = módulo usado
                // item = A funcao que chama no arquivo classes/lookup.class
                // event = O evento relacionado quando o usuário clica em "acao"
                // related = Os campos retornados após a ação
                $this->SetFieldAttr('edtPrenome','module','biblioteca');
                $this->SetFieldAttr('edtPrenome','item','autorsec');                // Metodo
                $this->SetFieldAttr('edtPrenome','event','filler');
                //$this->SetFieldAttr('edtPrenome','related','idautor,edtPrenome,edtCutter');
                $this->SetFieldAttr('edtPrenome','related','idautor,edtPrenome,idetiqueta');

		$this->objObra = $MIOLO->GetBusiness($module,'obra');    
        $idobra = $this->objObra->GetById($item);
        $goto = $MIOLO->GetActionURL($module, 'main:catalogacao:catalogacao', $item);	
		$this->AddButton(new FormButton('btnVoltar', 'Voltar',$MIOLO->GetActionURL($module,'main:catalogacaoautorsecundario',$item)));
		$this->AddButton(new FormButton('btnVoltar',"Ir para Catalogação da obra $idobra->numeroDaObra",$goto));
                
            
		// Botão excluir nao aparece, pois o formulário está em branco
		$this->SetButtonAttr('btnExcluir','visible',false);

        $this->SetFieldAttr('edtSobrenome','visible',false);

        // validators
		//$this->AddValidator(new RequiredValidator('edtSobrenome'));
		$this->AddValidator(new RequiredValidator('edtPrenome'));
        
        
	 }


  
// pega os dados que estão no formulário   
    function GetData()
    {
      $data = new FormData();

        $data->hidKey  = $this->GetFormValue('hidKey');
        $data->idautor = $this->GetFormValue('idautor');
        $data->sobrenome = $this->GetFormValue('edtSobrenome');
        $data->prenome   = $this->GetFormValue('edtPrenome');
        $data->idetiqueta = $this->GetFormValue('idetiqueta');

	   return $data;
    }
 

   function btnSalvar_click()
   {

       global $MIOLO,$module , $action ,$item;

       $objObra = $this->objObra->GetById($item);
       $objAutor = $MIOLO->GetBusiness($module,'autor');
       $data = $this->GetData();
      
      try
      {
        // passar: ($idObra,$ocorrencia,$linha,$value)  //
        if ($this->getFormValue('idautor')==NULL)//obriga o uso do lookUp
        {
            $MIOLO->Information("Por favor, selecione um autor utilizando a Pesquisa.", $MIOLO->GetActionURL('biblioteca',"main:catalogacaoautorsecundario&item=$item"));
        }
        
        $data->idetiqueta = $objAutor->TransformaAutorEmSecundario($data->idautor, $data->idetiqueta);
        
        $ocorrencia = $objObra->GetNextOcorrencia($item,$data->idetiqueta);
        if($ocorrencia!=null)
        {
            $ocorrencia =  ($ocorrencia +1);
        }
        else
        {
            $ocorrencia = 1;
        }
        
        $objObra->atualizaMaterialAutor($ocorrencia, $data->idautor,true);

        $MIOLO->Prompt(Prompt::Information("Autor secundário $data->prenome inserido com sucesso.",$this->listURL));
       //   var_dump($item);

//+-      
      }
      catch (Exception $e)
      {
         $this->addError($e->getMessage());
      }


   }  




	function btnExcluir_click()
	{ 
		
      global $MIOLO, $module, $item, $action;
		
	    $data = $this->GetData();

		//Instancia o objeto autor
	    $this->objAutor = $MIOLO->GetBusiness($module,'autor');

       //A linha abaixo verifica se existe um data->key
       //Se nao existir, ela tenta pegar $item que é passada
       //pelo botao editar do "relação"   

	   if (!($data->KeyAutor))
	   {
		 $this->objAutor->GetByCodigo($item);
		 $data = $this->objAutor->GetData();
	   }

      $ok = $this->objAutor->Delete($data);
      //   if($ok){$this->objAutor->Log(OP_DEL,'autor deletado - id = '.$data->idautor);}


	   if ( $ok )
           $MIOLO->Information($data->descricao . "Registro deletado da base de dados", $MIOLO->GetActionURL($module,$action) );
	   else
			  $MIOLO->Error("As informações não foram deletadas", $MIOLO->GetActionURL($module,$action) );
	}




// Consulta: função chamada após o usuário usar o edit na relação dos autores
	function btnConsulta_click($sender,$idautor)
	{ 
		global $MIOLO,$module, $item;

		//A linha abaixo verifica se existe um idautor
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
	
   	$idautor = ($idautor != '') ? $idautor : $item;
	
		//Instancia o objeto autor
		$this->objAutor = $MIOLO->GetBusiness($module,'autor');

		// Já considera que o usuário quer excluir,editar um autor
		$this->SetButtonAttr('btnExcluir','visible',true);
		$this->SetButtonAttr('btnEnviar','visible',true);		
 		$this->SetButtonAttr('btnSalvar','label','Salvar');	
        

		// ok retorna os dados de idautor
		$ok = $this->objAutor->GetByCodigo($idautor);	

		// este é o setdata deste arquivo. não é o setdata da classe de negócios
		// veja que é $this->SetData e nao $this->objautor->SetData
		$this->SetData($ok);	
     	return true;	
        //var_dump($this->GetFormValue('idetiqueta'));
	}  



// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('edtSobrenome',$data->sobrenome);
		$this->SetFieldValue('edtPrenome',$data->prenome);
		$this->SetFieldValue('hidKey',$data->hidKey);
        $this->SetFieldValue('idautor',$data->idautor);
        $this->setFieldValue('idetiqueta', $data->idetiqueta);
	}


}

?>
