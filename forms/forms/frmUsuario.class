<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?
class frmUsuario extends Form
{
	var $objUsuario;

	function frmUsuario()  // construtor da Classe
	{
		global $MIOLO,$module;

		// Título do Formulário
		$this->Form('Criar Usuários');
		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" não aparece
		$this->defaultButton = false;
		// Botão 'fechar', direcionando para o handler biblioteca/main/circulacao/usuario
		$this->SetClose($this->manager->GetActionURL($module, 'main:secretaria:usuários'));
		$this->page->AddJsCode(file_get_contents(dirname(__FILE__) . '/../ui/js/mask.js'));
	}

	function CreateFields()
	{
		global $MIOLO,$module;
		$objUsuarioValidacao = $MIOLO->GetBusiness($module,'usuariovalidacao');
		$query = $objUsuarioValidacao->ListGrupos();
		// Campos que aparecem no formulário
		$estados = Array("AC"=>"Acre","AL"=>"Alagoas","AM"=>"Amazonas","AP"=>"Amapá","BA"=>"Bahia","CE"=>"Ceará","DF"=>"Distrito Federal",
   "ES"=>"Espírito Santo","GO"=>"Goiás","MA"=>"Maranhão","MG"=>"Minas Gerais","MS"=>"Mato Grosso do Sul","MT"=>"Mato Grosso",
   "PA"=>"Pará","PB"=>"Paraíba","PE"=>"Pernambuco","PI"=>"Piauí","PR"=>"Paraná","RJ"=>"Rio de Janeiro","RN"=>"Rio Grande do Norte",
   "RO"=>"Rondônia","RS"=>"Rio Grande do Sul","SC"=>"Santa Catarina","SE"=>"Sergipe","SP"=>"São Paulo","TO"=>"Tocantins");
		$fields = Array (
		new TextField('edtNome','','Nome',50,"Obrigatório"),
		new TextField('edtBairro','','Bairro',45),
		new TextField('edtcep','','CEP',10,'Ex.: 36200-000 - Obrigatório'),
		new TextField('edtDataNascimento','','Data Nascimento',15,"Ex: 20/05/2008 - Obrigatório"),
		new TextField('edtNomePai','','Nome do Pai',50),
		new TextField('edtNomeMae','','Nome da Mae',50),
		new Selection('selSexo','','Sexo',Array('M' => "Masculino",'F' => "Feminino"),'',"Obrigatório"),
		new TextField('edtAnoChegada','','Ano de Chegada',4,"Obrigatório"),
		new TextField('edtTelefone','','Telefone',20),
		new TextField('edtCelular','','Celular',20),
		new TextField('edtEmail','','E-mail',50),
		new Selection('selGrupoSanguineo','','Grupo Sanguíneo',Array("A+"=>"A+","A-"=>"A-","B+"=>"B+","B-"=>"B-","AB+"=>"AB+","AB-"=>"AB-","O+"=>"O+","O-"=>"O-")),
		new TextField('edtCPF','','CPF',15),
		new TextField('edtNumRG','','Número do RG',15),
		new TextField('edtTipoRg','','Tipo do RG', 20),
		new TextField('edtOrgaoRg','','Orgão Expedidor do RG',20),
		new Selection('selUFRG','','UF do RG',$estados),
		new TextField('edtNumCartPro','','Número da carteira profissional',25),
		new TextField('edtSerieCartPro','','Série da carteira profissional',25),
		new Selection('selUFCartPro','','UF Carteira Profissional',$estados),
		new MSelection('selSemestreIngresso','','Semestre Ingresso',array(1=>"1º Semestre",2=>"2º Semestre"),false,'Obrigatório'),
		new MLookupTextField('lkpMunicipio','','Município',47,'Use a lupa - Obrigatório'),
		new MLookupTextField('lkpInstituicao','','Instituição',47,'Use a lupa - Obrigatório'),
		new HiddenField('idInstituicao'),
		new HiddenField('idMunicipio'),
		new HiddenField('idPais'),
		new MLookupTextField('lkpPaisNascimento','','País de nascimento',47,'Use a lupa - Obrigatório'),
		new HiddenField('idNascimento'),
		new Selection('selGrupo','','Grupo',$query),
		new HiddenField('idGrupoAnterior'),
		new MTextLabel('lblDica','&nbsp; --Dados de acesso do Usuário-- &nbsp;','&nbsp;'),
		new TextField('edtLogin','','Login - Matrícula',20,"Obrigatório ser númerico para alunos"),
		new TextField('edtNick','','Apelido',50),
		new MPasswordField('passSenha','','Senha',20,"Obrigatório"),
		new LookupTextField('lkpSetor','','Setor',30,'Use a lupa ,não Obrigatório para alunos'),
		new HiddenField('idSetor'),
		new HiddenField('idUsuario'),
		new HiddenField('idPessoa')
		);

		// Insere os campos
		$this->SetFields($fields);

		$this->SetClose(NULL);


		//Validação do campo cep
		$this->edtcep->addAttribute('onKeyUp','makeMask(this, \'#####-###\');');
		$this->edtcep->addAttribute('onBlur','makeMask(this, \'#####-###\');');
		$this->edtcep->AddAttribute('maxlength','9');

		//Validaçao do campo Ano de Chegada
		$this->edtAnoChegada->AddAttribute('maxlength','4');

		//Validaçao do campo CPF
		$this->edtCPF->AddAttribute('maxlength','14');
		$this->edtCPF->addAttribute('onKeyUp','makeMask(this, \'###.###.###-##\');');

		//Validação do campo de Data
		$this->edtDataNascimento->addAttribute('onKeyUp','makeMask(this, \'##/##/####\');');
		$this->edtDataNascimento->addAttribute('onBlur','makeMask(this, \'##/##/####\');');

		$validators = array(
		new RequiredValidator('edtNome'),
		new MMaskValidator('edtcep','','99999-999','required'),
		new RequiredValidator('edtDataNascimento'),
		new RequiredValidator('edtAnoChegada'),
		new RequiredValidator('lkpMunicipio'),
		new RequiredValidator('lkpInstituicao'),
		new RequiredValidator('lkpPaisNascimento'),
		new MDATEDMYValidator('edtDataNascimento'),
		new EMAILValidator('edtEmail','','','e-mail inválido'),
		new MIntegerValidator('edtAnoChegada'),
		new MCPFValidator('edtCPF'),
		);

			
		$this->SetValidators($validators);

		// Botões que aparecem no formulário
		$buttons = Array(
		new FormButton('btnEnviar', 'Salvar'),
		new MLink('btnLinkRelacao','Relação de Usuários',$this->manager->getActionURL($module,$self,'',
		array('event'=>'btnList:click'))),
		);

		//Insere os Botões
		$this->SetButtons($buttons);
		$this->SetbuttonAttr('btnVoltar','visible',false);

		/*
		 As 4 propriedades de um lookup:
		 module = módulo usado
		 item = A funcao que chama no arquivo classes/lookup.class
		 event = O evento relacionado quando o usuário clica em 'acao'
		 related = Os campos retornados após a ação
		 */
		//Utilizamos o lookup do modulo common para o campo municipio
		$this->SetFieldAttr('lkpMunicipio','module','common');
		$this->SetFieldAttr('lkpMunicipio','item','municipio');
		$this->SetFieldAttr('lkpMunicipio','event','filler');
		//m.idmunicipio,m.municipio,m.iduf,p.pais,p.idpais
		$this->SetFieldAttr('lkpMunicipio','related', 'idMunicipio,lkpMunicipio,none,none,idPais');

		//Utilizamos o lookup do módulo Biblioteca para o campo Pais de nascimento
		$this->SetFieldAttr('lkpPaisNascimento','module','biblioteca');
		$this->SetFieldAttr('lkpPaisNascimento','item','pais');
		$this->SetFieldAttr('lkpPaisNascimento','event','filler');
		$this->SetFieldAttr('lkpPaisNascimento','related', 'idNascimento,lkpPaisNascimento');

		//Utilizamos o lookup do módulo Common para o campo Setor
		$this->SetFieldAttr('lkpSetor','module','common');
		$this->SetFieldAttr('lkpSetor','item','setor');
		$this->SetFieldAttr('lkpSetor','event','filler');
		$this->SetFieldAttr('lkpSetor','related', 'idSetor,lkpSetor ');
			
		//// com o none     $this->SetFieldAttr('lkpSetor','related', 'idSetor,lkpSetor,----none,none');


		//Utilizamos o lookup do módulo Common para o campo Instituição
		$this->SetFieldAttr('lkpInstituicao','module','common');
		$this->SetFieldAttr('lkpInstituicao','item','instituicao');
		$this->SetFieldAttr('lkpInstituicao','event','filler');
		$this->SetFieldAttr('lkpInstituicao','related', 'idInstituicao,lkpInstituicao,none');
	}
	
	function ValidateFields() 
	{
		$valid = false;
		
		//Função de validação de todos os campos
		
		
		
		return $valid;
	}



	function btnEnviar_click()
	{
		global $MIOLO,$module,$self, $action;
		$data = $this->GetData();
		
		//Instanciando o objeto usuário	
		$this->objUsuario = $MIOLO->GetBusiness($module, 'usuario');
			
		if (trim($data->idSetor) == '') {
			$data->idSetor = 1;
		}

		//Verifica se o nome contém apenas espaços em branco e se os outros campos são preenchidos
		if( strlen(trim(Form::GetFormValue('edtNome'))) == 0 )
		{
			$this->AddError('Informe o campo "Nome"');
			
		}elseif (Form::GetFormValue('selSemestreIngresso') == null) //Verifica se o combo "Semestre Ingresso" não está selecionado
		{
			$this->AddError('Informe o campo "Semestre Ingresso"');
			
		}elseif (Form::GetformValue('selSexo')== null) 
		{
			$this->AddError('Informe o campo "Sexo"');
		}
		
		try
		{
			$ok = $this->objUsuario->SaveUsuario($data);

			if(!$ok)
			{
				$MIOLO->Prompt(Prompt::Information("Usuário salvo com sucesso.",$MIOLO->GetActionURL($module,'main:controleacesso',$data->idUsuario,array('event'=>'btnEdit:click') )));
				$this->objUsuario->Log(OP_UPD,'Alterado o usuário '.$data->login.' com o id = '. $data->idUsuario);

			}

		}catch(Exception $e)
		{
			$action = 'onclick= history.go(-1);';
			$MIOLO->Error("O usuário não foi salvo com sucesso", $action);
		}

	}

	function GetData()
	{
		$data = new FormData();
		$data->login  = $this->GetFormValue('edtLogin');
		$data->apelido = $this->GetFormValue('edtNick');
		$data->senha   = $this->GetFormValue('passSenha');
		$data->idSetor    = $this->GetFormValue('idSetor');
		$data->nome = $this->GetFormValue('edtNome');
		$data->bairro = $this->GetFormValue('edtBairro');
		$data->cep = $this->SubstituirPorVazio($this->GetFormValue('edtcep'));
		$data->dataNascimento = $this->GetFormValue('edtDataNascimento');
		$data->nomePai = $this->GetFormValue('edtNomePai');
		$data->nomeMae = $this->GetFormValue('edtNomeMae');
		$data->sexo = $this->GetFormValue('selSexo');
		$data->anoChegada = $this->GetFormValue('edtAnoChegada');
		$data->telefone = $this->GetFormValue('edtTelefone');
		$data->celular = $this->GetFormValue('edtCelular');
		$data->email = $this->GetFormValue('edtEmail');
		$data->grupoSanguineo = $this->GetFormValue('selGrupoSanguineo');
		$data->cpf = $this->SubstituirPorVazio($this->GetFormValue('edtCPF'));
		$data->numRg = $this->SubstituirPorVazio($this->GetFormValue('edtNumRG'));
		$data->tipoRg = $this->GetFormValue('edtTipoRg');
		$data->orgaoRg = $this->GetFormValue('edtOrgaoRg');
		$data->ufRg = $this->GetFormValue('selUFRG');
		$data->numCartPro = $this->GetFormValue('edtNumCartPro');
		$data->serieCartPro = $this->GetFormValue('edtSerieCartPro');
		$data->UfCartPro = $this->GetFormValue('selUFCartPro');
		$data->idMunicipio = $this->GetFormValue('idMunicipio');
		$data->idPais = $this->GetFormValue('idPais');
		$data->idMunicipio = $this->GetFormValue('idMunicipio');
		$data->idPaisNascimento = $this->GetFormValue('idNascimento');
		$data->passmd5 = md5($data->senha);
		$data->idUsuario = $this->GetFormValue('idUsuario');
		$data->semestreIngresso = $this->getFormValue('selSemestreIngresso');
		$data->idInstituicao = $this->getFormValue('idInstituicao');
		$data->idgrupo = $this->GetFieldValue('selGrupo');
		$data->idGrupoAnterior = $this->GetFieldValue('idGrupoAnterior');
		return $data;
	}

	function SetData($data)
	{
		$this->SetFieldValue('edtLogin', $data->login);
		$this->SetFieldValue('edtNick', $data->apelido);
		$this->SetFieldValue('passSenha',$data->senha);
		$this->SetFieldValue('idSetor',$data->idSetor);
		$this->SetFieldValue('edtNome',$data->nome);
		$this->SetFieldValue('edtBairro',$data->bairro);
		$this->SetFieldValue('edtcep',$this->formatarCEP($data->cep));
		$this->SetFieldValue('edtDataNascimento',$this->formatarData($data->dataNascimento));
		$this->SetFieldValue('edtNomePai',$data->nomePai);
		$this->SetFieldValue('edtNomeMae',$data->nomeMae);
		$this->SetFieldValue('selSexo',$data->sexo);
		$this->SetFieldValue('edtAnoChegada',$data->anoChegada);
		$this->SetFieldValue('edtTelefone',$data->telefone);
		$this->SetFieldValue('edtCelular',$data->celular);
		$this->SetFieldValue('edtEmail',$data->email);
		$this->SetFieldValue('selGrupoSanguineo',$data->grupoSanguineo);
		$this->SetFieldValue('edtCPF',$this->formatarCPF($data->cpf));
		$this->SetFieldValue('edtNumRG',$data->numRg);
		$this->SetFieldValue('edtTipoRg',$data->tipoRg);
		$this->SetFieldValue('edtOrgaoRg',$data->orgaoRg);
		$this->SetFieldValue('selUFRG',$data->ufRg);
		$this->SetFieldValue('edtNumCartPro',$data->numCartPro);
		$this->SetFieldValue('edtSerieCartPro',$data->serieCartPro);
		$this->SetFieldValue('selUFCartPro',$data->UfCartPro);
		$this->SetFieldValue('idMunicipio',$data->idMunicipio);
		$this->SetFieldValue('idPais',$data->idPais);
		$this->SetFieldValue('idMunicipio',$data->idMunicipio);
		$this->SetFieldValue('idNascimento',$data->idPaisNascimento);
		$this->SetFieldValue('idUsuario', $data->idUsuario);
		$this->SetFieldValue('idPessoa',$data->idPessoa);
		$this->SetFieldValue('lkpMunicipio',$data->municipio);
		$this->SetFieldValue('lkpPaisNascimento',$data->paisNascimento);
		$this->SetFieldValue('lkpSetor',$data->setor);
		$this->SetFieldValue('lkpInstituicao',$data->instituicao);
		$this->SetFieldValue('idInstituicao',$data->idInstituicao);
		$this->SetFieldValue('selSemestreIngresso',$data->semestreIngresso);
		$this->SetFieldValue('selGrupo',$data->idgrupo);
		$this->SetFieldValue('idGrupoAnterior',$data->idGrupoAnterior);
	}

	function SubstituirPorVazio($string)
	{
		$string = ereg_replace('[/()":.?,&;\-]',"",$string);
		return $string;
	}

	function btnList_click()
	{
		global $MIOLO, $module, $self, $theme, $action, $page;
		//Instancia o objeto autor
		$objUsuario = $MIOLO->GetBusiness($module,'usuario');

		$columns = array(
		new DataGridColumn('nome','Nome','left',true, '25%',true, null, true,true),
		new DataGridColumn('login','Login','left',true, '25%',true, null, true,true),
		new DataGridColumn('nick','Apelido','center',true, '25%',true, null, true,true),
		new DataGridColumn('cpf','CPF','center',true, '25%',true, null, true,true),
		);

		$href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>'btnList_click'));
		$page->SetAction($href_datagrid);

		$query = $objUsuario->ListUsuario();

		$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
		$datagrid->SetTitle('Relação de Usuários');
		$datagrid->SetLinkType('linkbutton');
		$datagrid->SetWidth('100%');
		$href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnConsulta:click'));
		$href_dele = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnExcluir:click'));
		$datagrid->HeaderLink('new', 'Novo Usuário',$MIOLO->GetActionURL($module,$self,'',Array('event'=>'')));
		$datagrid->AddActionIcon('Salvar', 'edit', $href_edit);
		$datagrid->AddActionIcon('Excluir', 'delete.gif', $href_dele);
		$theme->InsertContent($datagrid);
	}

	function btnConsulta_click()
	{
		global $MIOLO,$item,$theme,$module;
		$idUsuario = $item;
		$objUsuario = $MIOLO->GetBusiness($module,'usuario');
		$usuario = $objUsuario->GetUserById($idUsuario);
		$this->SetData($usuario);
	}

	function btnExcluir_click()
	{
		global $MIOLO,$item,$theme,$action,$module;
		$idUsuario = $item;
		$objUsuario = $MIOLO->GetBusiness($module,'usuario');

		if($idUsuario != 0){
			try
			{
				$ok = $objUsuario->DeleteUsuario($item);
				$MIOLO->Information("Usuário ".$data->nome . " excluído com sucesso.", $MIOLO->GetActionURL($module,$action,'',array('event'=>'btnList_click()')));
			}
			catch (Exception $e)
			{
				$MIOLO->Error("Usuário não foi deletado com sucesso.", $MIOLO->GetActionURL($module,$action,'',array('event'=>'btnList_click()')) );
			}
		}else{
			$MIOLO->Error("Usuário administrador não pode ser deletado.", $MIOLO->GetActionURL($module,$action,'',array('event'=>'btnList_click()')));
		}
	}

	function formatarData($string)
	{
		$resultado = '';
		if($string)
		{
			$data =  explode('-',$string);
			$resultado = $data[2].'/'.$data[1].'/'.$data[0];
		}
		return $resultado;
	}

	function formatarCPF($string)
	{
		$resultado = '';
		if($string)
		{
			$resultado = substr($string,0,3).'.'.substr($string,3,3).'.'.substr($string,6,3).'-'.substr($string,9);
		}
		return $resultado;
	}

	function formatarCEP($string)
	{
		$resultado = '';
		if($string)
		{
			$resultado = substr($string,0,5).'-'.substr($string,5);
		}
		return $resultado;
	}
}
?>


