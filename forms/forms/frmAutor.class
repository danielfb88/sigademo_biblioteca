<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/

class frmAutor extends Form
{

	var $objAutor;

    function frmAutor()  // construtor da Classe
    {

		global $MIOLO,$module;


		// Título do Formulário
		$this->Form('Autor');

		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" não aparece
		$this->defaultButton = false;
		
		// Botão 'fechar', direcionando para o handler biblioteca/main/admin
		$this->SetClose($this->manager->GetActionURL($module, 'main:admin'));
	 
	}


   
    function CreateFields()
    {

 		// Campos que aparecem no formulário

		$fields = Array (
			//new Text('','Use o formulário abaixo para cadastrar um novo Autor da biblioteca'),
			
         new TextField('edtSobrenome','','Sobrenome',60,'',4),
			new TextField('edtPrenome','','Prenome',20,'',4),
			new TextField('edtCutter','','Cutter',8,'',8),
			new HiddenField('hidKey') // controla Incluir/Editar
			);


		// Insere os campos

		$this->SetFields($fields);

		// Botões que aparecem no formulário
		
      $buttons = Array(
			new FormButton('btnEnviar', 'Salvar'),
//         new FormButton('btnSalvar', 'Alterar'),
//			new FormButton('btnExcluir', 'Excluir'),
			new MLink('btnLinkRelacao','Relação de Autores da Biblioteca',$this->manager->getActionURL($module,$self,'',array('event'=>'btnList:click'))),
			
			
    		);


	
		//Insere os Botões
		$this->SetButtons($buttons);

		

      //       Verificar------>      $resultCodigo = $codigo->GetLastCodigo();


		// Botão excluir nao aparece, pois o formulário está em branco
		$this->SetButtonAttr('btnExcluir','visible',false);

		// validators
		$this->AddValidator(new RequiredValidator('edtSobrenome'));
		$this->AddValidator(new RequiredValidator('edtPrenome'));
		$this->AddValidator(new RequiredValidator('edtCutter'));
        $this->edtCutter->AddAttribute('maxlength','8');

   }

  
// pega os dados que estão no formulário   
    function GetData()
    {
      $data = new FormData();

        $data->idautor  = $this->GetFormValue('hidKey');
        $data->sobrenome = trim($this->GetFormValue('edtSobrenome'));
        $data->prenome   = trim($this->GetFormValue('edtPrenome'));
        $data->cutter    = trim($this->GetFormValue('edtCutter'));
       
       
	   return $data;
    }
 

   function btnEnviar_click()
   {
       global $MIOLO,$module , $action;
       $data = $this->GetData();
       $this->objAutor = $MIOLO->GetBusiness($module,'autor');
      
       if ( $data->idautor ){
        // Usuário quer editar um item
            $ok =  $this->objAutor->Update($data);
   
            if($ok){
                    $MIOLO->Prompt(Prompt::Information(" Autor alterado com sucesso.",$MIOLO->GetActionURL($module,$action) ));
				
             }
        }
        else{ // Usuário quer inserir novo item
     
          $ok =  $this->objAutor->Insert($data);
          if($ok){

               $MIOLO->Prompt(Prompt::Information(" Autor inserido com sucesso.",$MIOLO->GetActionURL($module,$action) ));
           }
           else{
      		$MIOLO->Error(" Autor não foi inserido ", $MIOLO->GetActionURL($module,$action) );
           }
        }  
    }




   function btnList_click()
	{
		global $MIOLO, $module, $self, $theme, $action, $page;
			

		

		$columns = array(
			new DataGridColumn('sobrenome','Sobrenome','left',true, '40%',true, null, true,true),
			new DataGridColumn('prenome','Prenome','left',true, '40%',true, null, true,true),
			new DataGridColumn('cutter','Cutter','center',true, '20%',true, null, true,true),
			);

		$href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>'btnList_click'));
		$page->SetAction($href_datagrid);	
		
		//Instancia o objeto autor
		$this->objAutor = $MIOLO->GetBusiness($module,'autor');
		
		$query = $this->objAutor->ListAutor();
		
		$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
		$datagrid->SetTitle('Relação de Autores');
		$datagrid->SetLinkType('linkbutton');
		$datagrid->SetWidth('100%');
   		$href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnConsulta:click'));
     		$href_dele = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnExcluir:click'));
		
		$datagrid->AddActionIcon('Editar', 'edit', $href_edit);
		$datagrid->AddActionIcon('Excluir', 'delete.gif', $href_dele);
		$datagrid->HeaderLink('new', 'Novo Registro',
		
		$MIOLO->GetActionURL($module,$self,'',Array('event'=>'')));

		$theme->InsertContent($datagrid);
	
	}


	function btnExcluir_click()
	{ 
		global $MIOLO, $module, $item, $action;
		
	    $data = $this->GetData();

		//Instancia o objeto autor
	    $this->objAutor = $MIOLO->GetBusiness($module,'autor');

       //A linha abaixo verifica se existe um data->key
       //Se nao existir, ela tenta pegar $item que é passada
       //pelo botao editar do "relação"111111111

	   if (!($data->KeyAutor))
	   {
		 $this->objAutor->GetByCodigo($item);
		 $data = $this->objAutor->GetData();
	   }

       $ok = $this->objAutor->Delete($data);
      //   if($ok){$this->objAutor->Log(OP_DEL,'autor deletado - id = '.$data->idautor);}

	   if ( $ok )
        $MIOLO->Information($data->descricao . "Registro deletado da base de dados", $MIOLO->GetActionURL($module,$action) );
	   else
			  $MIOLO->Error("As informações não foram deletadas", $MIOLO->GetActionURL($module,$action) );
	}




// Consulta: função chamada após o usuário usar o edit na relação dos autores
	function btnConsulta_click($sender,$idautor)
	{ 
		global $MIOLO,$module, $item;

		//A linha abaixo verifica se existe um idautor
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
	
   	$idautor = ($idautor != '') ? $idautor : $item;
	
		//Instancia o objeto autor
		$this->objAutor = $MIOLO->GetBusiness($module,'autor');

		// Já considera que o usuário quer excluir,editar um autor
	//	$this->SetButtonAttr('btnExcluir','visible',true);
		$this->SetButtonAttr('btnEnviar','visible',true);		
 //		$this->SetButtonAttr('btnSalvar','label','Salvar');	
      
		
		//var_dump($idautor);
		
		
		// ok retorna os dados de idautor
		$ok = $this->objAutor->GetByCod($idautor);	
      
		// este é o setdata deste arquivo. não é o setdata da classe de negócios
		// veja que é $this->SetData e nao $this->objautor->SetData
		$this->SetData($ok);
		
			

     	return true;	
				
	}  

// usada para inserir valores no formulário
	function SetData($data)
	{
	  var_dump($data->sobrenome);
	    var_dump($data->prenome);
	      var_dump($data->idautor);
	
		$this->SetFieldValue('edtSobrenome',$data->sobrenome);
		$this->SetFieldValue('edtPrenome',$data->prenome);
		$this->SetFieldValue('edtCutter',$data->cutter);
		$this->SetFieldValue('hidKey',$data->idautor); 

	}

}
?>
