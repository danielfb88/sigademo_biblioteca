<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?
class frmMarcArtigo extends Form
{

    var $objObra;
    var $objGenero;

    function frmMarcArtigo()  // construtor da Classe
    {
        // Título do Formulário
        $this->Form('MARC do Artigo');

        //Chama o CreateFileds, etc.
        $this->EventHandler();

        // Botão "enviar" não aparece
        $this->defaultButton = false;

        //muda o tema para mostrar apenas area de content
        $this->manager->getTheme()->setLayout('popup');
    }
   
    function CreateFields()
    {
        global $MIOLO, $module, $item;

        
        $this->objObra = $MIOLO->GetBusiness($module,'artigo');
        $this->objGenero = $MIOLO->GetBusiness($module,'genero');
      
        //O armazenamento do artigo não é semelhante ao de periodico e obra, não possui relação com campos fixos e indicadores
                
       // $camposfixos = $this->objObra->getCamposFixosByIdobra($item);
        $material = $this->objObra->getMaterialByIdArtigo($item);
      // $indicadores = $this->objObra->getIndicadoresByIdperiodico($item);

        $linhas = array();
        $texto = '';
        $texto_ind = '';

        //acrescenta os camposfixos no tableraw
   //     foreach($camposfixos as $c)
   //     {
   //         $linhas[] = array($c[0], '', str_replace(' ', '&nbsp;', $c[1]));
   //     }

        //material[$i] = e.tag, m.ocorrencia, m.subcampo, m.linha, m.conteudo
        for($i = 0; $i <= count($material); $i++)
        {
            if( ($material[$i][0] != $material[$i-1][0]) and ($i > 0))//mudou a tag e não é a primeira
            {
                //acrescenta a linha na tabela
                $linhas[] = array($material[$i-1][0], $texto_ind, $texto);
                $texto = '';
                $texto_ind = '';
            }

            //se houver texto e (mudou a tag ou mudou a ocorrencia), quebra a linha
            if( ($texto != '') and (($material[$i][0] != $material[$i-1][0]) or ($material[$i][1] != $material[$i-1][1])) )
            {
                $texto .= '<BR>';
            }
            //prepara os dados da linha (material)
            if($material[$i][0] == '902')//para genero, busca a descricao
            {
                $texto .= '$' . $material[$i][2] . ' ' . $this->objGenero->GetByCodigo($material[$i][4])->descricao;
            }
            else
            {
                $texto .= '$' . $material[$i][2] . ' ' . $material[$i][4] . ' ';
            }
            //dados dos indicadores
           /* if($texto_ind == '')
            {
                $texto_ind = $this->PreparaIndicadores($material[$i][0], $indicadores, $material[$i][1]);
            }
            else
            {
                if(($material[$i][0] != $material[$i-1][0]) or ($material[$i][1] != $material[$i-1][1]))
                {
                    $texto_ind .= "<BR>".$this->PreparaIndicadores($material[$i][0], $indicadores, $material[$i][1]);
                }
            }
           */
        }

        $tabela = new MTableRaw('', $linhas);
        $tabela->SetAlternate(true);  
        $fields = Array(
            $tabela
        );
        // Insere os campos
        $this->SetFields($fields);
    }
/*
    function PreparaIndicadores($tag, $indicadores, $ocorrencia)
    {
        $texto_ind = '';

        //indicadores[$i] = e.tag, i.ocorrencia, i.indicador, i.conteudo;
        if($indicadores)
        {
            foreach($indicadores as $i) //procura o indicador 1 da tag específica no array de indicadores da obra
            {           
                if( ($i[0] == $tag) and ($i[1] == $ocorrencia) and ($i[2] == '1') )
                {
                    if($i[3] != ' ') //se indicador for = ' ', transforma para #
                        $texto_ind = $i[3];
                    else
                        $texto_ind = '#';
                    break;
                }
            }
        }

        //preenche com espaço para o caso de não haver indicador 1
        if($texto_ind == '')
        {
            $texto_ind = '&nbsp;&nbsp;';
        }

        if($indicadores)
        {
            foreach($indicadores as $i) //procura o indicador 2 da tag específica no array de indicadores da obra
            {           
                if( ($i[0] == $tag) and ($i[1] == $ocorrencia) and ($i[2] == '2') )
                {
                    if($i[3] != ' ') //se indicador for = ' ', transforma para #
                        $texto_ind .= "&nbsp;" . $i[3];
                    else
                        $texto_ind .= "&nbsp;#";
                    break;
                }
            }
        }

        return $texto_ind;
    }
*/
}
?>
