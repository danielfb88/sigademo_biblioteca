<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/

class frmInfracao extends Form
{

	var $objinfracao;

    function frmInfracao()  // construtor da Classe
    {
		global $MIOLO,$module;

		// Título do Formulário
		$this->Form('Infrações de Usuários');

		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" não aparece
		$this->defaultButton = false;
		
		// Botão 'fechar', direcionando para o handler biblioteca/main/admin
		$this->SetClose($this->manager->GetActionURL($module, 'main:admin'));
	 
	}
   
    function CreateFields()
    {
		// Campos que aparecem no formulário
		$fields = Array (
			//new Text('','Use o formulário abaixo para cadastrar uma nova infracao da biblioteca'),
			new LookupTextField('lkpDescricao','','Descrição',60),
			new HiddenField('hidKey') // controla Incluir/Editar
			);

		// Insere os campos
		$this->SetFields($fields);

		// Botões que aparecem no formulário
		$buttons = Array(
			new FormButton('btnEnviar', 'Incluir'),
			new FormButton('btnExcluir', 'Excluir'),
			//new FormButton('btnList', 'Relação'),
			new MLink('btnLinkRelacao','Relação de Infrações dos Usuários',$this->manager->getActionURL($module,$self,'',array('event'=>'btnList:click'))),
    		);

		//Insere os Botões
		$this->SetButtons($buttons);

		//As 4 propriedades de um lookup
		// module = módulo usado
		// item = A funcao que chama no arquivo classes/lookup.class
		// event = O evento relacionado quando o usuário clica em "acao"
		// related = Os campos retornados após a ação
		$this->SetFieldAttr('lkpDescricao','module','biblioteca');
		$this->SetFieldAttr('lkpDescricao','item','infracao');
		$this->SetFieldAttr('lkpDescricao','event','btnConsulta:click');
		$this->SetFieldAttr('lkpDescricao','related', 'idinfracao');

		// Botão excluir nao aparece, pois o formulário está em branco
		$this->SetButtonAttr('btnExcluir','visible',false);

		// validators
		$this->AddValidator(new RequiredValidator('lkpDescricao'));
		//$this->AddValidator(new RequiredValidator('edtMnemonico'));
   
   }

	// pega os dados que estão no formulário   
    function GetData()
    {
    	$data = new FormData();
        $data->descricao = ucfirst(strtolower(trim($this->GetFieldValue('lkpDescricao'))));
        $data->idinfracao = $this->GetFormValue('hidKey');
        
    	return $data;
    }

	
	// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('lkpDescricao',$data->descricao);
		$this->SetFieldValue('hidKey',$data->idinfracao);
	}

	// Consulta: função chamada após o usuário usar o lookup
	function btnConsulta_click($sender,$idinfracao)
	{ 
		global $MIOLO,$module, $item;

		//A linha abaixo verifica se existe um idinfracao
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
		$idinfracao = ($idinfracao != '') ? $idinfracao : $item;
	
		//Instancia o objeto infracao
		$this->objinfracao = $MIOLO->GetBusiness($module,'infracao');

		// Já considera que o usuário quer excluir,editar uma infracao
		$this->SetButtonAttr('btnExcluir','visible',true);	
 		$this->SetButtonAttr('btnEnviar','label','Salvar');	

		// ok retorna os dados de idinfracao
		$ok = $this->objinfracao->GetByCodigo($idinfracao);	

		// este é o setdata deste arquivo. não é o setdata da classe de negócios
		// veja que é $this->SetData e nao $this->objinfracao->SetData
		$this->SetData($ok);	
				
	}

	// Enviar pode ser inserir ou editar
	function btnEnviar_click()
	{ global $MIOLO,$module;
	
		$data = $this->GetData();

		//Instancia o objeto infracao
		$this->objinfracao = $MIOLO->GetBusiness($module,'infracao');
		
		
		if( strlen(trim(Form::GetFormValue('lkpDescricao'))) == 0)
		{
			$this->AddError('Informe o campo "Descrição".');
		
		}
	else
	
	{

		
		if ( $data->idinfracao )
		{ // Usuário quer editar um item

			$what = " atualizado ";

			$ok = $this->objinfracao->Update($data);
      if($ok){$this->objinfracao->Log(OP_UPD,'Infracao alterada - id = '.$data->idinfracao);}
		}
		else
		{ // Usuário quer inserir novo item

			$what = " inserido ";

			// verificar se já existe idinfracao
			$ok = $this->objinfracao->Insert($data);
      if($ok){$this->objinfracao->Log(OP_INS,'Infracao inserida - id = '.$ok);}
		}
		
		$action = $this->manager->GetActionURL($module,$self);
		
		if ( $ok )
		{
      		$MIOLO->Information($data->descricao . " $what com sucesso.", $action );
		}
		else
		{
			$MIOLO->Error("'" . $data->descricao  . "' não foi $what. ", $action );
    }

	}

}
	function btnExcluir_click()
	{
		global $MIOLO, $module, $item;

		$data = $this->GetData();

	    //Instancia o objeto infracao
	    $this->objinfracao = $MIOLO->GetBusiness($module,'infracao');

       //A linha abaixo verifica se existe um data->key
       //Se nao existir, ela tenta pegar $item que é passada
       //pelo botao editar do "relação"
	   if (!($data->idinfracao))
	   {
		 $this->objinfracao->GetByCodigo($item);
		 $data = $this->objinfracao->GetData();
	   }
	   
	   	   
	   /*$conf é a variável que confirma a exclusão do registro no momento 
		em que é questionado ao usuário se ele deseja relmente excluir o registro*/

		$conf = $this->GetFormValue('conf');
	  	  
		if( $conf == 'sim') //Caso o usuário tenha escolhido a opção sim
		{
			try
			{			
			    $this->objinfracao->Delete($data);
			    $this->objinfracao->Log(OP_DEL,'Infracao deletada - id = '.$data->idinfracao);
			    $MIOLO->prompt(Prompt::information($data->descricao . " deletado da base de dados", $MIOLO->GetActionURL($module,$action)));			    	
			} 
				catch(EMioloException $e)
				  {				
					$MIOLO->Error("As informações não foram deletadas, existem infrações associadas a um usuário", $MIOLO->GetActionURL($module,$action));
				  }		 
		}
		elseif( $conf == 'nao')
		{
		  $MIOLO->prompt(Prompt::information('Exclusão cancelada.', $MIOLO->GetActionURL($module,$action)));
		}else
		 {
		   /*Caso a variável não possua o valor "sim" nem o valor "não" significa que ainda não lhe foi atribuído um valor,
		   ou seja, deve-se perguntar ao usuário se deseja realmente excluir o registro */
	
			$msg = "Tem certeza que deseja realmente excluir o gênero " . $data->descricao . " ?";

			$action_sim = $MIOLO->getActionURL($module,'main:admin:infracao&event=btnExcluir:click',$data->idinfracao, array('conf'=>'sim'));
			$action_nao = $MIOLO->getActionURL($module,'main:admin:infracao&event=btnExcluir:click',$data->idinfracao, array('conf'=>'nao'));
			
			$MIOLO->prompt(Prompt::question($msg, $action_sim, $action_nao));	
		 }

	}

	function btnList_click()
	{
		global $MIOLO, $module, $self, $theme, $action, $page;

		//Instancia o objeto infracao
		$this->objinfracao = $MIOLO->GetBusiness($module,'infracao');

		$columns = array(
			new DataGridColumn(null),
			new DataGridColumn('descricao','Descrição','left',true, '100%',true, null, true,true),
			);

		$href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>'btnList_click'));
		$page->SetAction($href_datagrid);

		$query = $this->objinfracao->Listinfracao();
		
		$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
		$datagrid->SetTitle('Relação de infrações');
		$datagrid->SetLinkType('linkbutton');
		$datagrid->SetWidth('100%');
		$href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnConsulta:click'));
		$href_dele = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnExcluir:click'));
		
		$datagrid->AddActionIcon('Salvar', 'edit', $href_edit);
		$datagrid->AddActionIcon('Excluir', 'delete.gif', $href_dele);
		$datagrid->HeaderLink('new', 'Novo Registro',
		
		$MIOLO->GetActionURL($module,$self,'',Array('event'=>'')));

		$theme->InsertContent($datagrid);
	
	}

}

?>
