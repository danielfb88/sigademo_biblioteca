<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?
/*
  
   Uma imagem vale por mil palavras...

   hierarquia de classes:

                                  FORM
                                    |
                                    |
                                 PESQUISA  (frmPesquisa.class)
                                    |
                                    |
   -----------------------------------------------------------------------------
           |                    |                    |                  |
           |                    |                    |                  |
    Pesquisa Simples    Pesquisa Multicampo  Percorrer indices  Pesquisa Numérica



 Para configurar os campos da Pesquisa Simples, acesse etc/pesquisa.xml

*/

MIOLO::IMPORT('modules::biblioteca::forms::frmPesquisa');

class frmPesquisaUnidade extends frmPesquisa 
{
	var $objPesqUnidade;
	var $objUnidade;

    function frmPesquisaUnidade()  // construtor da Classe
    {
		global $MIOLO,$module;

		// Título do Formulário
		$this->Form('Pesquisa por Unidade');

		//Chama o CreateFileds, etc.
		$this->EventHandler();

		//Botão "enviar" não aparece
		$this->defaultButton = false;

		// Botão 'fechar', direcionando para o handler biblioteca/main/
		$this->SetClose($this->manager->GetActionURL($module, 'main'));
	}


    function CreateFields()
    { 
		global $module,$MIOLO, $action;

		$camposPesquisa = $this->GetCamposPesquisa();
		
		$this->objPesqUnidade = $MIOLO->GetBusiness($module,'pesquisaunidade');
		$this->objUnidade = $MIOLO->GetBusiness($module,'unidade');
		
		$opU = $this->objUnidade->ListUnidade();
		foreach($opU->result as $o)
		{
			$optionsU[$o[0]] = $o[1];
		}

		// Campos que aparecem no formulário
		$fields = Array (
			new Selection('selUnidade','','Unidades'),
		);
		$this->SetFields($fields);
  	    $this->SetFieldAttr('selUnidade','options', $optionsU);

		// Botões que aparecem no formulário
		$buttons = Array(
			new FormButton('btnConsultar', 'Consultar'),
			new FormButton('btnVoltar', 'Nova Pesquisa', $MIOLO->GetActionURL($module, $action)),
   		);
		$this->SetButtons($buttons);
		$this->SetButtonAttr('btnVoltar','visible',false);
	}


    // pega os dados que estão no formulário   
    function GetData()
    {
        $data = new FormData();
        $data->Unidade = $this->GetFormValue('selUnidade');
		return $data;
    }


    function SetData($data)
    {
        $this->SetFieldValue('selUnidade',$data->Unidade);
    }


	function btnConsultar_click($sender,$tipo=null)
	{ 
		global $MIOLO, $module, $action;
	
		//esconde botoes e campos
		$this->SetFieldAttr('selUnidade','readonly',true);
		$this->SetButtonAttr('btnConsultar','visible',false);

		// mostra botao voltar
		$this->SetButtonAttr('btnVoltar','visible',true);

		$camposPesquisa = $this->GetCamposPesquisa();

        $tipo = $this->GetFormValue('tipo');
		if($tipo == 'unid') //se for passado o parametro, usuario clicou no botão voltar
		{
	        $unidade = $this->GetFormValue('unidade');

			$data = new FormData();
			$data->Unidade = $unidade;
			$this->SetData($data);
		}
		else
		{
			$data = $this->GetData();
		}

//		$query = $this->objMulticampo->Listar($data, $camposPesquisa,true);
		$query = $this->objPesqUnidade->Listar($data, $camposPesquisa,true);

		if ($query)
		{
			$this->MontaDataGrid($camposPesquisa,$query,'unid',$data,true);
		}
		else
		{
			$MIOLO->Prompt(Prompt::Error('Sua pesquisa não retornou nenhum resultado.<br><br>
					Em caso de dúvida, consulte a pessoa responsável pelo atendimento na sua biblioteca.<br>', $MIOLO->GetActionURL($module, $action)));
		}
	}
}
?>
