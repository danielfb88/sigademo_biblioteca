<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
* Este arquivo é parte do programa SigaEPT
*
* O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
* termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
* na versão 2 da Licença.
*
* Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
* uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
* Pública Geral GNU/GPL em português para maiores detalhes.
*
* Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
* junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
* www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
* St, Fifth Floor, Boston, MA 02110-1301, USA
*/
?>
<?
class frmResUsuario extends Form
{
	var $objReserva;
	var $objSitReserva;
	var $objEstado;
	var $objEmprestimo;
	var $objUsuario;
	var $objPolitica;
	var $objExemplar;

	function __construct()
	{
		global $MIOLO, $action;
		$this->Form('Reservas');
		$this->SetTitle(NULL);
		$this->EventHandler();
		$this->defaultButton = false;

	}

	/*
	 function CreateFields()
	 {
	global $MIOLO, $module, $self, $theme, $action, $page;

	//Busca idusuario
	//$idusuario = $this->manager->GetLogin()->idkey;
	$usuario = $this->manager->getBusiness('common','usuario');
	$usuario->getByLogin($this->manager->GetLogin()->id);
	$idusuario = $usuario->idUsuario;

	//Datagrid de reservas atendidas
	$columns = array(
			new DataGridColumn('idreserva','Nº Reserva','center',true, '10%',true, null, false, false),
			new DataGridColumn('numerodotombo','Exemplar','center',true, '10%',true, null, false, false),
			new DataGridColumn('titulo','Título','left',false, '20%',true, null, false, false),
			new DataGridColumn('autor','Autor','left',false, '15%',true, null, false, false),
			new DataGridColumn('datahoradareserva','Data da Reserva','center',false, '15%',true, null, false, false),
			new DataGridColumn('datahoraentrada','Data da Entrada','center',false, '15%',true, null, false, false),
			new DataGridColumn('datahoralimite','Data Limite','center',false, '15%',true, null, false, false),
	);

	//Instancia o objeto emprestimo
	$this->objReserva = $MIOLO->GetBusiness($module,'reserva');

	$query = $this->objReserva->ListReservasAtendidas($idusuario);

	$datagrid = new DataGrid2($query, $columns, '',0);

	//nome do usuario
	//$this->objUsuario = $MIOLO->GetBusiness($module,'usuario');
	//$usuario = $this->objUsuario->GetById($this->manager->GetLogin()->idkey);

	//$datagrid->SetTitle('Reservas Atendidas - ' . $usuario[0][1]);
	$datagrid->SetTitle('Reservas Atendidas - ' . $usuario->nome);
	$datagrid->SetLinkType('linkbutton');
	$datagrid->SetWidth('99%');
	$datagrid->SetClose($MIOLO->GetActionURL($module,'main'));

	$href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnCancelar:click'));
	$datagrid->AddActionText('Cancelar', 'Cancelar', $href_edit);


	//Datagrid de reservas solicitadas
	$columns2 = array(
			new DataGridColumn('idreserva','Nº Reserva','center',true, '10%',true, null, false, false),
			new DataGridColumn('numerodotombo','Exemplar','center',true, '10%',true, null, false, false),
			new DataGridColumn('titulo','Título','left',false, '30%',true, null, false, false),
			new DataGridColumn('autor','Autor','left',false, '20%',true, null, false, false),
			new DataGridColumn('datahoradareserva','Data da Reserva','center',false, '15%',true, null, false, false),
			new DataGridColumn('descricao','Posição','center',true, '15%',true, null, false, false),
	);

	$query2 = $this->objReserva->ListReservasSolicitadas($idusuario);

	$datagrid2 = new DataGrid2($query2, $columns2, '',0);
	//$datagrid2->SetTitle('Reservas Solicitadas - ' . $usuario[0][1]);
	$datagrid2->SetTitle('Reservas Solicitadas - ' . $usuario->nome);
	$datagrid2->SetLinkType('linkbutton');
	$datagrid2->SetWidth('99%');
	$datagrid2->SetClose($MIOLO->GetActionURL($module,'main'));

	$href_edit2 = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnCancelar:click'));
	$datagrid2->AddActionText('Cancelar', 'Cancelar', $href_edit2);

	//Tabelas com as mensagens exibidas ao usuário
	$table1 = new SimpleTable('st1', "cellspacing=0 cellpadding=5 align=center border=1 width=99%", 1, 2);
	$table1->SetCell(0,0,new Text('','<font size=2><font color=red><b>Atenção:</b></font> A validade das reservas é de 24h, contadas a partir do ato da devolução do item. Vencido este prazo, não havendo a efetivação do empréstimo, as reservas serão canceladas automaticamente.'));
	$table1->SetCell(0,1,new Text('','<font size=2>Clique sobre o link para CANCELAR a reserva.'));

	$table2 = new SimpleTable('st2', "cellspacing=0 cellpadding=5 align=center border=1 width=99%", 1, 1);
	$table2->SetCell(0,0,'<font size=2>Clique sobre o link para CANCELAR a reserva.');

	$fields = array(
			$datagrid,
			$table1,
			$datagrid2,
			$table2,
	);

	$this->SetFields($fields);

	}
	*/

	/**
	 * @author Daniel Bonfim
	* @since 20-03-2013
	*/
	function CreateFields()	{
		global $MIOLO, $module, $self, $theme, $action, $page;

		$bussReserva = $MIOLO->GetBusiness($module, 'reserva');
		$bussEmprestimo = $MIOLO->GetBusiness($module, 'emprestimo');
		$bussExemplar = $MIOLO->GetBusiness($module, 'exemplar');

		$usuario = $this->manager->getBusiness('common', 'usuario');
		$usuario->getByLogin($this->manager->GetLogin()->id);

		$columns = array(
				new GridColumn('Nº Reserva', 'center', true, '10%', true, null, false, false),
				new GridColumn('Exemplar','center',true, '10%',true, null, false, false),
				new GridColumn('Título','left',false, '25%',true, null, false, false),
				new GridColumn('Autor','left',false, '25%',true, null, false, false),
				new GridColumn('Data da Reserva','center',false, '15%',true, null, false, false),
				new GridColumn('Validade da Reserva','center',false, '15%',true, null, false, false),
		);

		$query = $bussReserva->getReservasByIdUsuario($usuario->idUsuario);
		$result = $query->result;

		/*
		 * Inserindo Informação sobre a validade da reserva
		*/
		for($i=0; $i<count($result); $i++) {

			$numeroDoTombo = $result[$i][1];
			$idExemplar = $bussExemplar->GetIdByTombo($numeroDoTombo);

			$condicoesDoExemplar = $bussExemplar->getCondicoesDoExemplarPorUsuario($numeroDoTombo, $usuario->idUsuario);
			$qtdDiasReserva = $condicoesDoExemplar[6];

			// Verificando se o exemplar está emprestado
			if(!$bussEmprestimo->isEmprestadoByIdExemplar($idExemplar)) {

				$dataHoraDaDevolucao = $bussEmprestimo->getUltimaDataHoraDaDevolucaoByIdExemplar($idExemplar);

				list($data_, $hora) = explode(" ", $dataHoraDaDevolucao);

				list($ano, $mes, $dia) = explode("-", $data_);
				list($hora, $minuto, $segundo) = explode(":", $hora);

				// Adiciona sábados e domingos
				$qtdDiasValidadeDaReserva = $this->CalculaDias($qtdDiasReserva);

				// TimeStamp atual
				$timestampAtual = time();

				// TimeStamp da Validade da reserva
				$timestampValidadeReserva = mktime($hora, $minuto, 00, $mes, $dia + $qtdDiasValidadeDaReserva, $ano);
				$dataValidadeReserva = date('d/m/Y', $timestampValidadeReserva);


				// Verificando se a reserva ainda é válida
				if($timestampAtual <= $timestampValidadeReserva) {
					$result[$i][] = $dataValidadeReserva;

				} else {
					$result[$i][] = "<font color='red'>EXPIRADO</br>$dataValidadeReserva</font>";
				}

			} else {
				$result[$i][] = "<font color='red'>Exemplar ainda não devolvido.</font>";
			}
		}

		$datagrid = new Grid($result, $columns, '', 0);

		$datagrid->SetTitle('Reservas Atendidas - ' . $usuario->nome);
		$datagrid->SetLinkType('linkbutton');
		$datagrid->SetWidth('99%');
		$datagrid->SetClose($MIOLO->GetActionURL($module,'main'));

		$href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnCancelar:click'));
		$datagrid->AddActionText('Cancelar', 'Cancelar', $href_edit);


		//Tabelas com as mensagens exibidas ao usuário
		$table1 = new SimpleTable('st1', "cellspacing=0 cellpadding=5 align=center border=1 width=99%", 1, 2);
		$table1->SetCell(0,0,new Text('','<font size=2><font color=red><b>Atenção:</b></font> A validade das reservas será calculada a partir da data da devolução do item. Vencido este prazo, não havendo a efetivação do empréstimo, as reservas serão canceladas automaticamente.'));
		$table1->SetCell(0,1,new Text('','<font size=2>Clique sobre o link para CANCELAR a reserva.'));

		$table2 = new SimpleTable('st2', "cellspacing=0 cellpadding=5 align=center border=1 width=99%", 1, 1);
		$table2->SetCell(0,0,'<font size=2>Clique sobre o link para CANCELAR a reserva.');

		$fields = array(
				$datagrid,
				$table1
		);

		$this->SetFields($fields);
	}

	function CalculaDias($dias)
	{
		global $MIOLO;
		$objFeriado = $MIOLO->GetBusiness('common','feriado');

		$DiaUtil = false;
		$i = 0;

		while (! $DiaUtil)
		{
			$DiaUtil = true;

			$dia = date('d');
			$mes = date('m');
			$ano = date('Y');
			$hora = date('H');
			$min = date('i');
			$seg = date('s');

			$data = mktime($hora,$min,$seg,$mes,$dia+$dias+$i,$ano);
			$DataLimite = date('D Y-m-d 23:30:00',$data);
			$DiaSemana = substr($DataLimite,0,-20);

			$fdia = date('d',$data);
			$fmes = date('m',$data);
			$fano = date('Y',$data);
			$fhora = date('H',$data);
			$fmin = date('i',$data);
			$fseg = date('s',$data);

			//Verifica se a reserva vai cair em um sabado, domingo ou feriado
			if (($DiaSemana == 'Sat') or ($DiaSemana == 'Sáb') or ($DiaSemana == 'Sun') or ($DiaSemana == 'Dom') or ($objFeriado->feriado($fdia.'/'.$fmes.'/'.$fano)))
			{
				$DiaUtil = false;
				$i++;
			}
		}

		//var_dump($i+$dias);

		return $i+$dias;
	}

	/**
	 * Cancelar a Reserva
	 *
	 * @author Daniel Bonfim
	 * @since 23-03-2013
	 */
	function btnCancelar_click() {
		global $MIOLO, $module, $action, $item;

		$bussExemplar = $MIOLO->GetBusiness($module, 'exemplar');
		$bussReserva = $MIOLO->GetBusiness($module, 'reserva');
		$bussEstado = $MIOLO->GetBusiness($module, 'estado');
		$bussEmprestimo = $MIOLO->GetBusiness($module, 'emprestimo');

		$bussReserva->beginTransaction();
		$arrReserva = $bussReserva->getReservaById($item);

		$infoReserva = array(
				'idreserva' => $arrReserva[0],
				'datahoradareserva' => $arrReserva[1],
				'idsituacao' => $arrReserva[2],
				'idusuario' => $arrReserva[3],
				'idexemplar' => $arrReserva[4]
		);

		// Removendo a reserva
		$bussReserva->removerReservaById($infoReserva['idreserva']);

		$bussExemplar->setTransaction($bussReserva->getTransaction());

		// Verificando o estado do exemplar
		if($bussExemplar->getIdEstadoByIdExemplar($infoReserva['idexemplar']) == $bussEstado->GetIdByMnemonico("RESERVADO")) {

			// Verificando na tabela bt_emprestimo se o exemplar está está emprestado (datadedevolucao nula)
			if($bussEmprestimo->isExemplarEmprestado($infoReserva['idexemplar'])) {
				$bussExemplar->alterarEstadoById($infoReserva['idexemplar'], $bussEstado->GetIdByMnemonico("EMPRESTADO"));
			} else {
				$bussExemplar->alterarEstadoById($infoReserva['idexemplar'], $bussEstado->GetIdByMnemonico("DISPONIVEL"));
			}

		}

		$bussExemplar->endTransaction();

		$MIOLO->Prompt(Prompt::Information("Reserva cancelada com sucesso.", $MIOLO->GetActionURL($module, $action)));
	}

}
?>
