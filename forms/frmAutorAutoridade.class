<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/

class frmAutorAutoridade extends MFormAjax
{

    private $objAutor;
    private $objEtiqueta;
    private $objFicha;
    private $idSubficha;
    private $idFicha;
    
    function __construct()  // construtor da Classe
    {
        global $MIOLO,$module;

        // Título do Formulário
        parent::__construct('Autores');

        //Chama o CreateFileds, etc.
        $this->EventHandler();

        // Botão "enviar" não aparece
        $this->defaultButton = false;
        
        // Botão 'fechar', direcionando para o handler biblioteca/main/admin
        $this->SetClose($this->manager->GetActionURL($module, 'main:admin'));

        $this->item = $item;
        $this->page->AddJsCode(file_get_contents(dirname(__FILE__) . '/../ui/js/mask.js'));
        	
    }




     
    function CreateFields()
    {
        // Campos que aparecem no formulário
        global $MIOLO,$module, $item;

        $this->objEtiqueta = $MIOLO->GetBusiness($module,'etiqueta');
        $this->objAutor = $MIOLO->GetBusiness($module,'autor');
        $this->objFicha = $MIOLO->GetBusiness($module,'ficha');

        /*Esse código existe para a viabilização da exclusão do autor, com mensagem de confirmação, sem que seja necessário um form auxiliar.*/
        $conf= $this->GetFormValue('conf');
        if ($conf =='sim')
        {
            $data = $this->GetData();
            $ok = $this->objAutor->Delete($item);
            if ( $ok )
            $MIOLO->Information("Registro deletado da base de dados", $MIOLO->GetActionURL($module,$action,'', Array('event'=>'btnList_click')) );
            else
            $MIOLO->Error("As informações não foram deletadas", $MIOLO->GetActionURL($module,$action) );
        }

        $this->idFicha = 1;
        $this->idSubficha = 5;

        $resultTag = $this->objEtiqueta->ListAutor($this->idFicha, $this->idSubficha);

        $x = 0;
        while ($resultTag[$x][0] <> null)
        {
            $selTags[$x] = $resultTag[$x][0];
            $x++;
        }

        $fields = Array (
        new MSelection('selEtiqueta','','Etiqueta', $selTags),
        new MHiddenField('hidFieldListArray', ''),
        new MHiddenField('hidFieldList',''),
        new MHiddenField('hidFieldTag',''),
        new MHiddenField('idEtiqueta',''),
        );

        // Insere os campos

        $this->SetFields($fields);

        $buttons = array(
        new MButton('btnEdit','Inserir'),
        new MLink('btnLinkAutor','Relação de Autores',$this->manager->getActionURL($module,$self,'',array('event'=>'btnList:click'))),
        );

        $this->SetButtons($buttons);
    }





    function GetData()
    {
        $data = new FormData();
        $data->idEtiqueta = $this->GetFieldValue('selEtiqueta');
        return $data;
    }





    // Usada para inserir valores no formulário
    function SetData($data)
    {

        //$this->SetFieldValue('selEtiqueta',intval($data->idEtiqueta));
        $this->SetFieldValue('selEtiqueta', $data->idEtiqueta);

    }




    function btnEdit_click(){
        global $MIOLO, $module, $self, $theme, $action, $page,$ocorrencia,$item;

        if($item != NULL){
            $ok = $item;
        }
        else{
            $data = $this->GetData();
            $ok = $data->idEtiqueta;
        }
        	
        //if ($selecao)
        if(($item == NULL) && ($ok == $item))
        {
            $MIOLO->Prompt(Prompt::Error("Por favor, selecione uma etiqueta.",$MIOLO->GetActionURL($module,$action)));
            	
            //  REVER
            //$idAutor = $item;
            //$ocorrencia = $this->objAutor->GetNumAutor($item);
            //$idEtiqueta = $this->objAutor->GetEtiquetaById($idAutor);
            //$tag = $this->objEtiqueta->GetTagById($idEtiqueta);
        }
        elseif ($ok != $item)
        {
             
            $pos = (int)$this->getFormValue('selEtiqueta');
            $tag = $this->selEtiqueta->getOption($pos);
            $idEtiqueta = $this->objEtiqueta->GetIdByTag($tag)->result[0][0];
            $etiqueta = $this->objEtiqueta->getById($idEtiqueta);
            $ocorrencia = $this->objAutor->GetLastNumAutor($idEtiqueta);

        }
        elseif($ok == $item)
        {
            $pos = (int)$this->getFormValue('selEtiqueta');           
            $idEtiqueta = $this->objAutor->GetEtiquetaById($item);
            $tag = $this->objEtiqueta->GetTagById($idEtiqueta);
            $etiqueta = $this->objEtiqueta->getById($idEtiqueta);
            $ocorrencia = $this->objAutor->GetNumAutor($item);

        }
        elseif($item == NULL)
        {

            $MIOLO->Prompt(Prompt::Error("Por favor, selecione uma etiqueta.",$MIOLO->GetActionURL($module,$action)));
            	
            //  REVER
            //$idAutor = $item;
            //$ocorrencia = $this->objAutor->GetNumAutor($item);
            //$idEtiqueta = $this->objAutor->GetEtiquetaById($idAutor);
            //$tag = $this->objEtiqueta->GetTagById($idEtiqueta);
        }
         
        $this->addInputFields($idEtiqueta, $ocorrencia, $tag);



    }

    function addInputFields($idEtiqueta, $ocorrencia,$tag){
        global $MIOLO, $self, $module, $item;

        $this->setFieldAttr('btnEdit','visible',false);
        $this->setFieldAttr('btnLinkAutor','visible',false);
        $this->setFieldAttr('selEtiqueta','visible',false);
        $fList = '';

        $obj = new MDummy();
        $fields = new MHContainer();

        $indicadores = $this->objEtiqueta->getIndicadores($idEtiqueta);

        $listaIndicadores = array();
        
        foreach ($indicadores as $i=>$ind)
        {
            if ($ind != 0)
            {
                $obj->indicador = $i;
                $obj->idopcao = $this->objEtiqueta->getOpcaoAutor('IN' . $i, $idEtiqueta);
                $field = $this->objFicha->getInputFieldInd($this->idSubficha, $obj);
                $fList .= ($fList != '' ? ',' : '') . $field->getName();
                $field->formMode = 2;

                if ($item != NULL)
                {
                    $indicador = $this->objAutor->getIndicadorById($item);
                    if (!$indicador->eof)
                    {
                        $field->setValue($indicador->result[--$i][0]);
                    }
                }
                $fields->addControl($field);
                $listaCamposObrigatorios[] = $field->getName();
            }
        }
        $this->addField($fields);


        $campo = $this->objFicha->getCampo($this->idFicha,$this->idSubficha, $idEtiqueta, $ocorrencia);
         
        while (! $campo->eof)
        {
            $obj = $campo->getRowObject();
            //TODO: verificar
            // $field = $this->objFicha->getInputFieldVarAutor($this->idSubficha,$obj,$tag,$item);
            $field = $this->objFicha->GetInputFieldVarAutor($this->idSubficha,$obj,$tag,$item);
            $fList .= ($fList != '' ? ',' : '') . $field->getName();
            $field->formMode = 2;

            if ($obj->temrepeticoes) {
                $fListArray .= ($fListArray != '' ? ',' : '') . $field->getName();
            }

            if ($item != null)
            {
                $material = $this->objAutor->getFieldsForm($item,$obj->subcampo,$idEtiqueta);
                if (!$material->eof)
                {
                    if ($field->className == 'mmultitextfield3')
                    {
                        $array = $material->chunkResultMany(1,array(1,2),'');
                        $field->setCodeValue($array);
                    }
                    else
                    {
                        $field->setValue($material->fields('conteudo'));
                    }
                }
            }
             

            $this->addField($field);

             
            $campo->moveNext();
        }

        //Adiciona campos obrigatorios
        for($i = 0; $i < count($listaCamposObrigatorios); $i++)
        {
            $this->AddValidator(new RequiredValidator($listaCamposObrigatorios[$i]));
        }
         
         
        $this->setFieldValue('hidFieldListArray', $fListArray);
        $this->setFieldValue('hidFieldList', $fList);
        $this->setFieldValue('idEtiqueta', $idEtiqueta);
        $this->setFieldValue('hidFieldTag', $tag);


        if ($item)
        {
            $buttons = array(
            new MButton('btnUpdate', '<b>Atualizar</b>'),

            );
        }
        else
        {
            $buttons = array(
            new MButton('btnPost', '<b>Gravar</b>'),
            );
        }
        $buttons[] = new MButton('btnVoltar','<b>Voltar</b>',$MIOLO->getActionURL($module,$self));
        $this->SetButtons($buttons);
         
    }

    function btnPost_click()
    {
        global $MIOLO, $module;
        $classificacao = $this->getFormValue('classificacao');

        $tag = $this->getFormValue('hidFieldTag');
        $idEtiqueta = $this->objEtiqueta->GetIdByTag($tag)->result[0][0];
        $ocorrencia = $this->objAutor->GetLastNumAutor($idEtiqueta);
        $idAutor = $this->objAutor->LastNumeroAutor();
        $etiqueta_vazia = true;
        $fields = explode(',',$this->getFieldValue('hidFieldList'));
        
        foreach($fields as $field)
        {
            $value[] = array($field, $this->page->request($field));
        }

        $ok = $this->objAutor->insereFields($value,$idAutor,$idEtiqueta,$ocorrencia,$classificacao,$this->idSubficha);

        if ($ok)
        {
            $MIOLO->Information("Autor inserido com sucesso na base de dados",$MIOLO->GetActionURL('biblioteca',"main:admin:autor"));
        }
         
    }

    function btnList_click()
    {
        global $MIOLO, $module, $self, $theme, $action, $page;

        $columns = array(
        new DataGridColumn('idautor','Código','left',true, '10%',true, null, true,true),
        new DataGridColumn('conteudo','Conteúdo','left',true, '70%',true, null, true,true),
        new DataGridColumn('tag', 'Campo', 'left',true,'10%',true,null,true,true),
        new DataGridColumn('classificacao','Classificação','center',true, '10%',true, null, true,true),
        );

        $href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>'btnList_click'));
        $page->SetAction($href_datagrid);
        $query = $this->objAutor->ListAutores();

        $datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
        $datagrid->SetTitle('Relação de autores');
        $datagrid->SetLinkType('linkbutton');
        $datagrid->SetWidth('100%');
        $href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnEdit:click'));
        $href_dele = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnExcluir:click'));

        $datagrid->AddActionIcon('Editar', 'edit', $href_edit);
        $datagrid->AddActionIcon('Excluir', 'delete.gif', $href_dele);
        $datagrid->HeaderLink('new', 'Novo Registro', $MIOLO->GetActionURL($module,$self));

        $theme->InsertContent($datagrid);
    }

    function btnExcluir_click()
    {
        global $MIOLO, $module, $item, $action;
    	
        $obraAutor = $this->objAutor->ListObraByAutor($item);
	
		if($obraAutor)
		{
		  $MIOLO->Error("Este autor não pode ser apagado porque existe(m) obra(s) relacionada(s) com a mesma.", $MIOLO->GetActionURL($module,'main:admin:autor&event=btnList:click'));
		}
		
        $action_sim = $MIOLO->GetActionURL('biblioteca','main:admin:autor&event',$item,array('conf'=>'sim'));
        $action_nao = $MIOLO->GetActionURL('biblioteca','main:admin:autor&event=btnList:click',$item,array('conf'=>'nao'));
        $MIOLO->Question("Tem certeza que deseja excluir o autor?",$action_sim,$action_nao);
    }

    function btnUpdate_click()
    {
        global $MIOLO, $module,$item;
        $classificacao = $this->getFormValue('classificacao');
        $idAutor = $item;
        $tag = $this->getFormValue('hidFieldTag');
        $idEtiqueta = $this->objEtiqueta->GetIdByTag($tag)->result[0][0];
        $ocorrencia = $this->objAutor->GetNumAutor($item);        
        $etiqueta_vazia = true;
        $fields = explode(',',$this->getFieldValue('hidFieldList'));

        foreach($fields as $field)
        {
            $value[] = array($field, $this->page->request($field));
        }

        $ok = $this->objAutor->updateFields($value,$idAutor,$idEtiqueta,$ocorrencia,$classificacao,$this->idSubficha);

        if ($ok)
        {
            $MIOLO->Information("Autor atualizado com sucesso na base de dados",$MIOLO->GetActionURL('biblioteca','main:admin:autor&event=btnList:click'));
        }        
               
    }

}
?>
