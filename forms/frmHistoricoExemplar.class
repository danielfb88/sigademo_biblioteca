<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/

class frmHistoricoExemplar extends Form
{

	var $objhistorico;
	var $objusuario;
	var $data;
    

    function frmHistoricoExemplar()  // construtor da Classe
    {
		global $MIOLO,$module;

		// Título do Formulário
		$this->Form('Histórico de Empréstimos de Exemplar');
	
		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" não aparece
		$this->defaultButton = false;
				 
	}
   
    function CreateFields()
    {
		// Campos que aparecem no formulário
		$fields = Array (
			new TextField('edtNumerodoTombo','','Número do tombo',12),
			new HiddenField('hidID'),
			new HiddenField('hidKey') // controla Incluir/Editar

			);

		// Insere os campos
		$this->SetFields($fields);

		// Botões que aparecem no formulário
		$buttons = Array(
			
			new FormButton('btnConsulta', 'Consulta'),
			
    		);

		//Insere os Botões
		$this->SetButtons($buttons);
				
		//Esconde o campo nome e observações
		$this->SetFieldAttr('edtNome','visible', false);
		

		// Botão excluir nao aparece, pois o formulário está em branco
		$this->SetButtonAttr('btnConsulta','visible',true);
		
		
				   
   }

	// pega os dados que estão no formulário   
    function GetData()
    {
	   $data = new FormData();
       $data->numerodotombo = $this->GetFieldValue('edtNumerodoTombo');
	   
       
		
    	return $data;
    }

	
	// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('edtNumerodoTombo',$data->numerodotombo);
		
		
		
	}

	// Consulta: função chamada após o usuário usar o lookup
	function btnConsulta_click()
	{ 
		global $MIOLO,$module,$item,$self, $theme, $action, $page;
		
		$data = $this->GetData();
		
		// Já considera que o usuário quer excluir,editar uma usuarioobservacoes
		$this->SetButtonAttr('btnEnviar','visible',true);	
 		
 		
		
		//Instancia o objeto emprestimo
		$this->objhistorico = $MIOLO->GetBusiness($module,'historico');
		
		//Instancia o objeto usuario
		$this->objusuario = $MIOLO->GetBusiness($module,'usuario');
		
		$numerodotombo = $data->numerodotombo;
						
        if ($numerodotombo == null)
       {
           $go = $MIOLO->GetActionURL($module,$action);

           $MIOLO->Error('Exemplar não existe', $go);
       }
        else

        {            
        
		$columns = array(
			new DataGridColumn('idusuario','Usuário','left',true, '10%',true, null, true,true),
			new DataGridColumn('titulo','Titulo','center', false, '20%',true, null, true,true),
			new DataGridColumn('datahoradoemprestimo','Emprestimo','center', false, '10%',true, null, true,true),
			new DataGridColumn('datahoraprevisaodevolucao','Previsão Devolução','center', false, '10%',true, null, true,true),			
			new DataGridColumn('datahoradadevolucao','Devolução','center', false, '10%',true, null, true,true),
			new DataGridColumn('idusuarioopemprestimo','Op.de Empréstimo','center', true, '10%',true, null, true,true),
			new DataGridColumn('idusuarioopdevolucao','Op.de Devolução','center', true, '10%',true, null, true,true)
							);

		$href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>'btnList_click'));
		$page->SetAction($href_datagrid);

		//Instancia o objeto unidade
	    
		$query = $this->objhistorico->ListaHistoricoExemplar($data->numerodotombo);
		//var_dump($query);

        if (($data->numerodotombo) == null)
        {
            $go = $MIOLO->GetActionURL($module,$action);

            $MIOLO->Error('Exemplar não existe', $go);
        }


        
		$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
		$datagrid->SetTitle('Histórico de Empréstimos do exemplar: Número do Tombo:'. $numerodotombo .'');
		$datagrid->SetLinkType('linkbutton');
		$datagrid->SetWidth('100%');
		
		
		
		$theme->AppendContent($datagrid);
					
			}
	
    }
} 

?>
