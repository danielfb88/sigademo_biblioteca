<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/



class frmDireito extends Form
{

	var $objDireito;
	var $objGrupo;

    function frmDireito()  // construtor da Classe
    {
		global $MIOLO,$module;

		//Instancia o objeto direito
		$this->objDireito = $MIOLO->GetBusiness($module,'direito');

		// Título do Formulário
		$this->Form('Direito dos Usuários');

		//Chama o CreateFileds, etc.
		$this->EventHandler();

		//$this->btnList_click;

		// Botão "enviar" não aparece
		$this->defaultButton = false;
		
		// Botão 'fechar', direcionando para o handler biblioteca/main/admin
		$this->SetClose($this->manager->GetActionURL($module, 'main:admin'));

	 
	}
   
    function CreateFields()
    { 

		// Campos que aparecem no formulário
		$fields = Array (
			//new Text('','Use o formulário abaixo para cadastrar um novo direito da biblioteca'),
			new LookupTextField('lkpGrupo','','Grupo',40),
			new HiddenField('hidKeyGrupo'), 
			new Selection('selOperacao','','Operação'),
			new HiddenField('hidKeyOperacao'),
			new Selection('selRegraCirculacao','','Regra de Circulação'),
			new HiddenField('hidKeyRegraCirculacao')	// verifica se é incluir ou editar um direito
			);

		// Insere os campos
		$this->SetFields($fields);

		// Botões que aparecem no formulário
		$buttons = Array(
			new FormButton('btnEnviar', 'Incluir'),
			new FormButton('btnExcluir', 'Excluir'),
			//new FormButton('btnList', 'Relação'),
			//
			// Não precisa do link relação pois ele sempre aparece após o loockup
			//
			//new MLink('btnLinkRelacao','Relação de Direitos',$this->manager->getActionURL($module,$self,'',array('event'=>'btnList:click'))),
    		);

		//Insere os Botões
		$this->SetButtons($buttons);

		//As 4 propriedades de um lookup
		// module = módulo usado
		// item = A funcao que chama no arquivo classes/lookup.class
		// event = O evento relacionado quando o usuário clica em "acao"
		// related = Os campos retornados após a ação
		$this->SetFieldAttr('lkpGrupo','module','biblioteca');
		$this->SetFieldAttr('lkpGrupo','item','grupo');
		$this->SetFieldAttr('lkpGrupo','event','btnConsulta:click');

		// Escondendo as caixas de Seleção
		$this->SetFieldAttr('selOperacao','visible',false);
		$this->SetFieldAttr('selRegraCirculacao','visible',false);
		$this->SetButtonAttr('btnList','visible',false);	
		$this->SetButtonAttr('btnEnviar','visible',false);

		// Adicionando dados as caixas de seleção
		$query = $this->objDireito->ListOperacao();
		$this->SetFieldAttr('selOperacao','options', array_merge(array('0'=>'--Selecione--'),$query->result));

		$query = $this->objDireito->ListRegraCirculacao();
		$this->SetFieldAttr('selRegraCirculacao','options', array_merge(array('0'=>'--Selecione--'),$query->result));

		// Botão excluir nao aparece, pois o formulário está em branco
		$this->SetButtonAttr('btnExcluir','visible',false);

		//Comentados para melhor funcionamento
		// validators
		//$this->AddValidator(new RequiredValidator('lkpCodigo'));
		//$this->AddValidator(new RequiredValidator('lkpGrupo'));


//rever		$this->AddValidator(new MCompareValidator('selOperacao','','>=','1','i','required','No campo Operação, por favor escolha uma opção válida'));
//	$this->AddValidator(new MCompareValidator('selRegraCirculacao','','>=','1','i','required','No campo Regra de Circulação, por favor escolha uma opção válida'));		
   
   }


	// pega os dados que estão no formulário   
    function GetData()
    {
        $data = new FormData();
        $data->idgrupo = $this->GetFormValue('hidKeyGrupo');
		$data->descricao = trim($this->GetFormValue('lkpGrupo'));
		$data->idoperacao = $this->GetFormValue('selOperacao');	
        $data->hidoperacao = $this->GetFormValue('hidKeyOperacao');
		$data->idregracirculacao = $this->GetFormValue('selRegraCirculacao');
		$data->hidregracirculacao = $this->GetFormValue('hidKeyRegraCirculacao');
	
		return $data;
    } 
	
	// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('lkpGrupo',$data->descricao);
		$this->SetFieldValue('hidKeyGrupo',$data->idgrupo);
		$this->SetFieldValue('selOperacao',$data->idoperacao);
		$this->SetFieldValue('hidKeyOperacao',$data->idoperacao);
		$this->SetFieldValue('selRegraCirculacao',$data->idregracirculacao);
		$this->SetFieldValue('hidKeyRegraCirculacao',$data->idregracirculacao); // controle só será preenchido 
														  // se usuário usar o grid
	}

	// Consulta: função chamada após o usuário usar o lookup
	function btnConsulta_click($sender,$idgrupo)
	{ 
		 global $MIOLO,$module, $item;

		//A linha abaixo verifica se existe um idgrupo
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
		$item = ($idgrupo != '') ? $idgrupo : $item;
		
		// quando não acha o idgrupo no $item (vem do lookup),
		// tenta buscar direito no formulário.	
		if (!$idgrupo)
		{
			$data = $this->GetData();
			$item = $data->idgrupo;
			$idgrupo = $data->idgrupo;
		}
			
		
		// Já considera que o usuário quer excluir,editar um direito
 		$this->SetButtonAttr('btnEnviar','visible',true);	
		$this->SetFieldAttr('lkpGrupo','readonly',true);
	
	    // ok retorna os dados de iddireito
        $ok = $this->objDireito->GetByCodigo($item);

		// este é o setdata deste arquivo. não é o setdata da classe de negócios
		// veja que é $this->SetData e nao $this->objDireito->SetData
		$this->SetData($ok);
		
		$this->btnList_click($idgrupo); 
					
	}

	function btnEditar_click($idgrupo)
	{global $MIOLO,$module, $item;
	 	$item = ($idgrupo != '') ? $idgrupo : $item;
	 	$item = explode('@',$item);

		// ok retorna os todos os dados de iddireito
		$ok = $this->objDireito->GetAllByCodigo($item);

		$this->SetData($ok);
		
		$this->SetFieldAttr('lkpGrupo','readonly',true);
		$this->SetFieldAttr('selOperacao','visible',true);
		$this->SetFieldAttr('selRegraCirculacao','visible',true);
		$this->SetButtonAttr('btnEnviar','visible',true);	
		$this->SetButtonAttr('btnEnviar','label','Salvar');	

		$this->btnList_click($item[0]); 

	}

	// Enviar pode ser inserir ou editar
	function btnEnviar_click()
	{ 
	
	//	new HiddenField('hidKeyOperacao'),
	//		new HiddenField('hidKeyRegraCirculacao')
		
	if(strlen(trim(Form::GetFormValue('selOperacao'))) == 0)
		{
			$this->AddError('Selecione o campo "Operação".');
	
		}
		
		
		
	/*	else
			
		if(strlen(trim(Form::GetFormValue('hidKeyRegraCirculacao'))) == 0)
		{
			$this->AddError('Selecione o campo "Regra de Circulacao".');
			//var_dump(Form::GetFormValue('selOperacao'));
	
		}
*/


	
	
	else
	
	{	
		
	global $MIOLO,$module,$item,$self, $theme, $action, $page;
	
		$data = $this->GetData();
		
		//var_dump($data);

		//Instancia o objeto direito
		$this->objDireito = $MIOLO->GetBusiness($module,'direito');
		
		if ( $data->hidoperacao )
		{ // Usuário quer editar um item

			$what = " atualizado ";

			$ok = $this->objDireito->Update($data);
			if($ok){$this->objDireito->Log(OP_UPD,'Direito alterado - id = '.$data->idgrupo.'-'.$data->idoperacao.'-'.$data->idregracirculacao);}
		}
		else
		{ // Usuário quer inserir novo item

			$what = " inserido ";

			$ok = $this->objDireito->Insert($data);
			if($ok){$this->objDireito->Log(OP_INS,'Direito inserido - id = '.$ok);}
		}

		$action = $this->manager->GetActionURL($module,$self);
		
		$theme->ClearContent();

		if ( $ok )
			$MIOLO->Information("Registro $what com sucesso.", $action );
		else
			$MIOLO->Error("Registro não foi $what. Provavelmente você configurou uma regra existente.", $action );

		//$this->btnList_click($data->idgrupo);
			
			
	}

}




	function btnExcluir_click()
	{
		global $MIOLO,$module,$item,$self, $theme, $action, $page; 
		

		$item = ($idgrupo != '') ? $idgrupo : $item;
		
		if ( strpos($item,'@') )
		{
			$dados = explode("@",$item);
								
	    	$data = new FormData();
	        $data->idgrupo = $dados[0];
		$data->idoperacao = $dados[1];	
	        $data->idregracirculacao = $dados[2];
			
	    
		}else
		{
			$data = $this->GetData();
		}
		
	    //Instancia o objeto direito
	    $this->objDireito = $MIOLO->GetBusiness($module,'direito');

       //A linha abaixo verifica se existe um data->key
       //Se nao existir, ela tenta pegar $item que é passada
       //pelo botao editar do "relação"

       
       /*$conf é a variável que confirma a exclusão do registro no momento 
	em que é questionado ao usuário se ele deseja relmente excluir o registro*/

	$conf = $this->GetFormValue('conf');
		  	  
		if( $conf == 'sim') //Caso o usuário tenha escolhido a opção sim
		{
			try
			{			
			    $this->objDireito->Delete($data);
			    $this->objDireito->Log(OP_DEL,'Direito deletado - id = '.$data->idgrupo.'-'.$data->idoperacao.'-'.$data->idregracirculacao);
			    $MIOLO->prompt(Prompt::information("Direito deletado da base de dados", $MIOLO->GetActionURL($module,$action)));			    	
			} 
				catch(EMioloException $e)
				  {				
					$MIOLO->Error("As informações não foram deletadas", $MIOLO->GetActionURL($module,$action));
				  }		 
		}
		elseif( $conf == 'nao')
		{
		  $MIOLO->prompt(Prompt::information('Exclusão cancelada.', $MIOLO->GetActionURL($module,$action)));
		}else
		 {
		   /*Caso a variável não possua o valor "sim" nem o valor "não" significa que ainda não lhe foi atribuído um valor,
		   ou seja, deve-se perguntar ao usuário se deseja realmente excluir o registro */
	
			$msg = "Tem certeza que deseja realmente excluir este direito ?";

			$action_sim = $MIOLO->getActionURL($module,'main:admin:direito&event=btnExcluir:click',$item, array('conf'=>'sim'));
			$action_nao = $MIOLO->getActionURL($module,'main:admin:direito&event=btnExcluir:click',$item, array('conf'=>'nao'));
			
			$MIOLO->prompt(Prompt::question($msg, $action_sim, $action_nao));	
		 }

	}


	function btnList_click($idgrupo='')
	{global $MIOLO, $module, $self, $theme, $action, $page;
	
		if (!$idgrupo) //Só poderá mostrar o grid se idgrupo esta definido
		{
			$data = $this->GetData();
			$idgrupo = $data->idgrupo;
		}
		else
		{
			
			//Exibe as caixas de seleção
			$this->SetFieldAttr('selOperacao','visible',true);
			$this->SetFieldAttr('selRegraCirculacao','visible',true);
	
			$columns = array(
				new DataGridColumn(0), // idgrupo@idoperacao@idregracirculacao
				new DataGridColumn('operacao','Operação','left',true, '40%',true, null, true,true),
				new DataGridColumn('regracirculacao','Regra de Circulação','left',true, '60%',true, null, true,true),
			);
	
			$href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>'btnConsulta_click'));
			$page->SetAction($href_datagrid);
	
			//Instancia o objeto direito
		    $this->objDireito = $MIOLO->GetBusiness($module,'direito');
			$query = $this->objDireito->ListDireito($idgrupo);
			
			$this->objGrupo = $MIOLO->GetBusiness($module,'grupo');
			$grupoDesc = $this->objGrupo->GetByCodigo($idgrupo)->descricao;
	
			$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
			$datagrid->SetTitle('Direitos do Grupo ' . $grupoDesc);
			$datagrid->SetLinkType('linkbutton');
			$datagrid->SetWidth('100%');
			$datagrid->SetWidth('100%');
			
			$href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnEditar:click'));
			$href_dele = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnExcluir:click'));
			
			$datagrid->AddActionIcon('Salvar', 'edit', $href_edit);
			$datagrid->AddActionIcon('Excluir', 'delete.gif', $href_dele);
			//$datagrid->HeaderLink('new', 'Novo Registro',$MIOLO->GetActionURL($module,$self,'',Array('event'=>'')));
			//$this->datagrid = &$datagrid;
			
			
			$theme->InsertContent($datagrid);

		}

	}

}

?>
