<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/

class frmDevolucao extends Form
{

	/*
	 *  VALOR DA MULTA PARA EMPRESTIMO NO RECINTO:
	 */
	var $valor_multa_recinto = 5; // use ponto ao inves de virgula. ex: 4.5 é R$ 4,50 	
	
	
	var $objEmprestimo;
	var $objDevolucao;
	var $objExemplar;	
	var $objReserva;
	var $objReservar;
	var $objUsuario;
	var $objUsuarioExterno;
	var $objPermiteMulta;

    function frmDevolucao()  // construtor da Classe
    {
		global $MIOLO,$module;

		// Título do Formulário
		$this->Form('Balcão de Empréstimos - Devolução');
	
		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" não aparece
		$this->defaultButton = false;
		
		// Botão 'fechar', direcionando para o handler biblioteca/main/emprestimos
		$this->SetClose($this->manager->GetActionURL($module, 'main:emprestimos'));
	}
	
	   
    function CreateFields()
    {		
		// Campos que aparecem no formulário
		$fields = Array (
			new HiddenField('hidID'),
			new HiddenField('hidKey'), // controla Incluir/Editar
			new TextField('edtExemplar','','Exemplar', 25, 'Passe o leitor de código de barras no exemplar'), 
			new HiddenField('hidIdEmprestimo'),
			new HiddenField('hidExemplar'),
			new HiddenField('hidIdusuarioopdevolucao'),
			new HiddenField('hidMulta'),
			new HiddenField('hidIdOperacao'),
			new HiddenField('ListaExemplares'),
			);

		// Insere os campos
		$this->SetFields($fields);

		// Botões que aparecem no formulário
		$buttons = Array(
			new FormButton('btnDevolver', 'Confirmar Devolução'),
			new FormButton('btnImprimirRecibo','Imprimir Recibo'),
			//new FormButton('btnVoltar', 'Voltar'),
			new MLink('btnVoltar','Voltar',$this->manager->getActionURL($module,$self,'',array('event'=>'btnVoltar:click'))),
		    		);

		//Insere os Botões
		$this->SetButtons($buttons);
        //retirar isso depois de resolver o problema do Mjasper
        $this->SetButtonAttr('btnImprimirRecibo','visible', false );
		// Atributo dos botões
		$this->SetButtonAttr('btnDevolver','visible',true);
		$this->SetButtonAttr('btnVoltar','visible',false);
		$this->SetButtonAttr('btnImprimirRecibo','visible',false);
		
		//Definindo o foco
		if (!($this->GetFieldValue('edtExemplar')))
			$this->page->onLoad("MIOLO_GetElementById('edtExemplar').focus();");

		//$this->AddValidator(new RequiredValidator('edtExemplar'));
		
		$this->setFieldValue('edtExemplar','');		   
   	}

   	
   	function btnImprimirRecibo_click()
   	{
   		global $MIOLO, $module, $item;
   		$Exemplares =  array();
   		$Exemplares = $this->getListaExemplares();
		
   		$this->objDevolucao = $MIOLO->GetBusiness( $module, 'devolucao' );
   		$this->objUsuario = $MIOLO->GetBusiness( $module, 'usuario' );
   		$id = $this->objDevolucao->GetIdByNumeroTombo( $Exemplares[ 0 ][ 0 ] );
  
   		$tipo = "";
   		if( $this->objUsuario->isUsuarioInterno( $id ) )  //Verifica se o usuário é interno
   			$tipo = "Interno";
		else
		{
   			//Verifica se o usuário está presente na tabela bt_usuarioexterno
        $this->objUsuarioExterno = $MIOLO->GetBusiness( $module, 'usuarioexterno' );
   			if( $this->objUsuarioExterno->isUsuarioExterno( $id ) )
   				$tipo = "Externo";
		}
   		
   		foreach ( $Exemplares as $Exemplar )
   			$i++;
   		
   		$ui = $MIOLO->GetUI();
        /*
   		$report = new MJasperReport('sigabib');

   		if( $tipo == "Interno" )
   		{
   			$this->objEmprestimo = $MIOLO->GetBusiness( $module, 'emprestimo' );
   			$codigoAcesso = $this->objEmprestimo->GetCartaoByID( $id );
			
   			$parameters[ 'str_CODIGOACESSO' ] = $codigoAcesso->result[ 0 ][ 0 ];
   			
   			if ($i <= 2 )
   			$report->Execute( 'biblioteca', 'Ticket1_Devolucao_UI', $parameters );
   			else if ($i <= 4 )
   			$report->Execute( 'biblioteca', 'Ticket2_Devolucao_UI', $parameters );
   			else
   			$report->Execute( 'biblioteca', 'Ticket3_Devolucao_UI', $parameters );
   		}
   		else
   		if( $tipo == "Externo" )
   		{
   			$parameters[ 'int_IDUSUARIO' ] = $id;
   			
   			if ($i <= 2 )
   			$report->Execute( 'biblioteca', 'Ticket1_Devolucao_UE', $parameters );
   			else if ($i <= 4 )
   			$report->Execute( 'biblioteca', 'Ticket2_Devolucao_UE', $parameters );
   			else
   			$report->Execute( 'biblioteca', 'Ticket3_Devolucao_UE', $parameters );
   		}
   		else
   		{
   			$go = $this->manager->GetActionURL( $module, 'main:emprestimos' );
			$this->manager->Information( "Usuário inexistente. O banco de dados está inconsistente!", $go );
   		}
        */
   	}

	// pega os dados que estão no formuláio   
    	function GetData()
    	{
    		$data = new FormData();
       		$data->ID = $this->GetFieldValue('hidID');
			$data->exemplar = $this->GetFieldValue('edtExemplar');
			$data->idemprestimo = $this->GetFieldValue('hidIdEmprestimo');
			$data->hidexemplar = $this->GetFieldValue('hidExemplar');
			$data->hididopdevolucao = $this->GetFieldValue('hidIdusuarioopdevolucao');
			$data->hidmulta = $this->GetFieldValue('hidMulta');
			$data->hididoperacao = $this->GetFieldValue('hidIdOperacao');
			$data->ListaExemplares = $this->GetFieldValue('ListaExemplares');
			return $data;
    	}

	
	// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('hidID',$data->ID);
      	$this->setFieldValue('edtExemplar',$data->exemplar);
		$this->setFieldValue('hidIdEmprestimo',$data->idemprestimo);  
		$this->setFieldValue('hidExemplar',$data->hidexemplar); 
		$this->setFieldValue('hidIdusuarioopdevolucao',$data->hididopdevolucao);
		$this->setFieldValue('hidMulta',$data->hidmulta); 
		$this->setFieldValue('hidIdOperacao',$data->hididoperacao); 		
	}
	
	
	function btnDevolver_click()
	{ 
		if( !( $this->GetFieldValue( 'edtExemplar' ) ) )
		{
			$go = $this->manager->GetActionURL( $module, 'main:emprestimos:devolucao:self' );
			$this->manager->Information( "O campo Exemplar deve ser informado", $go );
		}
		
		global $MIOLO,$module,$item,$self, $theme, $page;

		/*
		*  Verifica se o usuário está LOGADO 
		*/
		//var_dump($this->manager->GetLogin()->idkey);
		//if ($this->manager->GetLogin()->idkey)
        if(true)
        { // estas chaves serão fechadas no final desta função!
		
		//variáveis que controlam a exibição das mensagens para o usuário
		$msgDev = '';
		$msgRes = '';
		$msgMul = '';

		$data = $this->GetData();
		
		// Atributo dos botões
		$this->SetButtonAttr('btnDevolver','visible',true);
		$this->SetButtonAttr('btnImprimirRecibo','visible',false);
        //$this->SetButtonAttr('btnImprimirRecibo','visible',true);
		
		//Esconde os campos 
		$this->SetFieldAttr('edtExemplar','visible', false);

		//Instancia os objetos exemplar,emprestimo e devolução
		$this->objExemplar = $MIOLO->GetBusiness($module,'exemplar');
		$this->objDevolucao = $MIOLO->GetBusiness($module,'devolucao');
		$this->objReserva = $MIOLO->GetBusiness($module,'reserva');
		$this->objReservar = $MIOLO->GetBusiness($module,'reservar');		
		$this->objEmprestimo = $MIOLO->GetBusiness($module,'emprestimo');
		$this->objPermiteMulta = $MIOLO->GetBusiness( $module, 'permitemulta' );
		$this->objUsuario = $MIOLO->GetBusiness( $module, 'usuario' );
		$this->objUsuarioExterno = $MIOLO->GetBusiness( $module, 'usuarioexterno' );
		
		$query = $this->objDevolucao->GetExemplar($data->exemplar);
		$numerodaobra = $query->result[0][1];
		
		if (!$query->result)
		{
			$MIOLO->Prompt(Prompt::Error("<font color=red>Exemplar não encontrado</font>",$MIOLO->GetActionURL($module,$self)));
		}
		else
		{
			$query = $this->objEmprestimo->NumeroTomboToIDExemplar($data->exemplar);
			$idexemplar = $query->result[0][0];

			$query = $this->objExemplar->GetAllByCodigo($idexemplar);
			$idregracirculacao = $query->idregracirculacao;
							
			$query = $this->objDevolucao->GetIdEmprestimo($idexemplar);
			$idemprestimo = $query->result[0][0];

			$this->setFieldValue('hidIdEmprestimo',$idemprestimo);
			$this->setFieldValue('hidID',$idexemplar);
			$this->setFieldValue('hidExemplar',$data->exemplar);
			
			$query = $this->objEmprestimo->NumeroTomboToIDExemplar($data->exemplar);
			$idexemplar = $query->result[0][0];

			$this->SetButtonAttr('btnImprimirRecibo','visible',false);
            //$this->SetButtonAttr('btnImprimirRecibo','visible',true);
			$query = $this->objExemplar->GetAllByCodigo($idexemplar);
			$idregracirculacao = $query->idregracirculacao;
							
			$query = $this->objDevolucao->GetIdEmprestimo($idexemplar);
			$idemprestimo = $query->result[0][0];

			$this->setFieldValue('hidIdEmprestimo',$idemprestimo);
			$this->setFieldValue('hidID',$idexemplar);
			$this->setFieldValue('hidExemplar',$data->exemplar);	
				
			if (!$idemprestimo)
			{
				$MIOLO->Prompt(Prompt::Error("<font color=red>O exemplar não está emprestado</font>",$MIOLO->GetActionURL($module,$self)));
				$this->SetButtonAttr('btnVoltar','visible',true);
				$this->SetButtonAttr('btnDevolver','visible',false);
				RETURN;
			}
			else
			{
				$query = $this->objEmprestimo->SelectIdUsuariobyId($idemprestimo);
				$idusuario = $query[0][0];
			
				$query = $this->objEmprestimo->GetCartaoByID($idusuario);
				$cartaoacesso = $query->result[0][0];
							
				$query = $this->objEmprestimo->GetGrupo($idusuario);
				$idgrupousuario = $query->result[0][0];
				
				$query = $this->objDevolucao->GetValorMulta($idgrupousuario,$idregracirculacao);
				$valordamulta = $query->result[0][0];
				$valordamulta = str_replace(',','.',$valordamulta);
				settype($valordamulta,"float");
										
				$query = $this->objDevolucao->GetPrevDevolucao($idemprestimo);
				$dataPrevDevolucao = $query->result[0][0];
				
				$k = new MKrono();
        		$dataHoje = $k->KDate('%d/%m/%Y %H:%i:00');
        		
				$diasATRASADO = $k->daysDiff($dataPrevDevolucao,$dataHoje);
				$soDataPrevDevolucao = substr($dataPrevDevolucao,0,10);
				
				//Checa a opção de empréstimo determinada pelo administrador
				$permiteMulta = $this->objPermiteMulta->CheckPermiteMulta();
				
				if( $permiteMulta[ 0 ][ 0 ] == 'P' )
				{
					if( $diasATRASADO > 0 )
					{
						//Calculando nova data de permissão de empréstimo - para usuário interno ou externo
						if( $this->objUsuario->isUsuarioInterno( $idusuario ) )
                      //  if( !$this->objUsuario->isUsuarioExterno( $idusuario ) )
                        {
							$dataPermissaoEmprestimo = $this->objDevolucao->getDataPermissaoEmprestimoUI( $cartaoacesso );
							$usuario = 1;
						}
						else
						{
							$dataPermissaoEmprestimo = $this->objUsuarioExterno->getDataPermissaoEmprestimoUE( $idusuario );
							$usuario = 2;
						}
						
						$dataPermissaoEmprestimo = $k->InvertDate( $dataPermissaoEmprestimo );
						$novaDataPermissaoEmprestimo = $k->operation( "+", $dataHoje, "$diasATRASADO%D");
						
						if( $k->CompareDate( $dataPermissaoEmprestimo, '<', $novaDataPermissaoEmprestimo ) )
						{
							//Atualiza a data de permissão de empréstimo na tabela bt_validação ou na tabela bt_usuarioexterno
							$novaDataPermissaoEmprestimo = $k->InvertDate( $novaDataPermissaoEmprestimo );
							if( $usuario == 1 )
								$this->objDevolucao->updateDataPermissaoEmprestimoUI( $cartaoacesso, $novaDataPermissaoEmprestimo );
							else
								$this->objUsuarioExterno->updateDataPermissaoEmprestimoUE( $idusuario, $novaDataPermissaoEmprestimo );
							
							$novaDataPermissaoEmprestimo = $k->InvertDate( $novaDataPermissaoEmprestimo );
						}
						else
						{
							$novaDataPermissaoEmprestimo = $dataPermissaoEmprestimo; 
						}
						
						$atraso = $diasATRASADO;
						$diasATRASADO = 0;
					}
				}	
				else
				if( $permiteMulta[ 0 ][ 0 ] == 'N' )
				{
					$diasATRASADO = 0;
				}
				
				if ($diasATRASADO > 0) 
				{
						$multa = $diasATRASADO * $valordamulta;

						// Descontar os dias das greves
						if ($valordamulta == '0.5')
						{
							if ($k->CompareDate($soDataPrevDevolucao,'<','27/07/2001'))
							{
								$multa = $multa - '193.50';
							}
							elseif (($k->CompareDate($soDataPrevDevolucao,'>','31/10/2001')) and ($k->CompareDate($soDataPrevDevolucao,'<','17/07/2003')))
								{
									$multa = $multa - '144';
								}
								elseif (($k->CompareDate($soDataPrevDevolucao,'>','10/09/2003')) and ($k->CompareDate($soDataPrevDevolucao,'<', '10/07/2004')))
									{
										$multa = $multa - '116';
									}
									elseif (($k->CompareDate($soDataPrevDevolucao,'>','10/09/2004')) and ($k->CompareDate($soDataPrevDevolucao,'<','17/08/2005')))
										{
											$multa = $multa - '84.50';
										}
										elseif (($k->CompareDate($soDataPrevDevolucao,'>','23/01/2006')) and ($k->CompareDate($soDataPrevDevolucao,'<','28/05/2007')))
											{
												$multa = $multa - '56.50';
											}
						}

						if ($valordamulta == '1')
						{
							if ($k->CompareDate($soDataPrevDevolucao,'<','27/07/2001'))
							{
								$multa = $multa - '387';
							}
							elseif (($k->CompareDate($soDataPrevDevolucao,'>','31/10/2001')) and ($k->CompareDate($soDataPrevDevolucao,'<','17/07/2003')))
								{
									$multa = $multa - '288';
								}
								elseif (($k->CompareDate($soDataPrevDevolucao,'>','10/09/2003')) and ($k->CompareDate($soDataPrevDevolucao,'<', '10/07/2004')))
									{
										$multa = $multa - '232';
									}
									elseif (($k->CompareDate($soDataPrevDevolucao,'>','10/09/2004')) and ($k->CompareDate($soDataPrevDevolucao,'<','17/08/2005')))
										{
											$multa = $multa - '169';
										}
										elseif (($k->CompareDate($soDataPrevDevolucao,'>','23/01/2006')) and ($k->CompareDate($soDataPrevDevolucao,'<','28/05/2007')))
											{
												$multa = $multa - '113';
											}
						}

						/*
						 *  Para operações no recinto, a multa deverá ser maior, sem 
						 *  levar em conta o grupo. 
						 * 
						 * Verificar se é um emprestimo no recinto (emphoras=1)
						 * 
						 */
						if ($this->objEmprestimo->esteEmprestimoEhDoRecinto($idemprestimo))
 						{
 							$valor_multa_recinto = str_replace(',','.',$this->valor_multa_recinto);
 							settype($valor_multa_recinto,"float");
 							
 							$multa = $valor_multa_recinto  *  $diasATRASADO;
 						}
						
						if ($cartaoacesso == null)
						{
							//provavelmente é usuario externo
							//vamos pegar o seu RG e dizer que é um cartão de acesso com um @ no final
							//ooooooooooo
								
								$this->objUsuarioExterno = $MIOLO->GetBusiness($module,'usuarioexterno');
								$dados = $this->objUsuarioExterno->GetById($idusuario);
								$cartaoacesso = $dados->numrg . "@";
						}
			
						$this->setFieldValue('hidMulta',$multa);
						$msgMul = "ATENÇÃO, Devolução com MULTA.<br><br><center><font color=red>VALOR R$ ". number_format(str_replace(',','.',$multa),2,',','.')."</font></center>";
        				$gotoYes = $MIOLO->GetActionURL($module,'main:emprestimos:multa',$cartaoacesso,array('event'=>'btnConsulta_click'));
        				$gotoNo = $MIOLO->GetActionURL($module,$self);
        				$eventNo = "btnDevolver_click()";
        				
        				$MensagemMulta = "Devolução efetuada com sucesso. Multa Gerada no valor de R$" . number_format(str_replace(',','.',$multa),2,',','.') . ". (<a href='". $MIOLO->GetActionURL($module,'main:emprestimos:multa',$cartaoacesso,array('event'=>'btnConsulta_click')) ."'> Clique aqui para pagar a multa </a>)";	
				}
				else
				{
					if ($diasATRASADO == 0)
					{
						$horaPrevDevolucao = substr($dataPrevDevolucao,11);
						$horaHoje = substr($dataHoje,11);
										
						$horasATRASADO = $k->timesDiff($horaPrevDevolucao,$horaHoje,"m");

						if ($horasATRASADO > 0)
						{
							$multa = $valordamulta;
								
							/*
							 *  Para operações no recinto, a multa deverá ser maior, sem 
							 *  levar em conta o grupo. 
							 * 
							 * Verificar se é um emprestimo no recinto (emphoras=1)
							 * 
							 */
							if ($this->objEmprestimo->esteEmprestimoEhDoRecinto($idemprestimo))
	 						{
	 							$valor_multa_recinto = str_replace(',','.',$this->valor_multa_recinto);
	 							settype($valor_multa_recinto,"float");
	 							
	 							$multa = $valor_multa_recinto  *  1; /// óóó vezes ummmmm
	 						}
		 							
							$this->setFieldValue('hidMulta',$multa);
							
							if ($cartaoacesso == null)
							{
									//provavelmente é usuario externo
									//vamos pegar o seu RG e dizer que é um cartão de acesso com um @ no final
									//ooooooooooo
										
										$this->objUsuarioExterno = $MIOLO->GetBusiness($module,'usuarioexterno');
										$dados = $this->objUsuarioExterno->GetById($idusuario);
										$cartaoacesso = $dados->numrg . "@";
							}
					
							$msgMul = "ATENÇÃO, Devolução com MULTA.<br><br><center><font color=red>VALOR R$ ". number_format(str_replace(',','.',$multa),2,',','.')."</font></center>";
	        				$gotoYes = $MIOLO->GetActionURL($module,'main:emprestimos:multa',$cartaoacesso,array('event'=>'btnConsulta_click'));
	        				$gotoNo = $MIOLO->GetActionURL($module,$self);
	        				$eventNo = "btnDevolver_click()";
	        				
	        				$MensagemMulta = "Devolução efetuada com sucesso. Multa Gerada no valor de R$ " . number_format(str_replace(',','.',$multa),2,',','.') . ". ( <a href='". $MIOLO->GetActionURL($module,'main:emprestimos:multa',$cartaoacesso,array('event'=>'btnConsulta_click')) ."'> Clique aqui para pagar a multa </a>)";
	        				
	        					/*
								*   Adiciona informações sobre os exemplares que o usuário ainda possui
								*/
										
									//Datagrid de emprestimos regulares
									$columns = array(
									    new DataGridColumn('numerodotombo','Exemplar','center',true, '15%',true, null, false, false),
										new DataGridColumn('titulo','Título','left',false, '45%',true, null, false, false),
										new DataGridColumn('autor','Autor','left',false, '25%',true, null, false, false),
										new DataGridColumn('datahoraprevisaodevolucao','Data para Devolução','center',true, '15%',true, null, false, false),
										);
							
									//Instancia o objeto emprestimo
								    $this->objEmprestimo = $MIOLO->GetBusiness($module,'emprestimo');
							
									$query = $this->objEmprestimo->ListEmprestimosRegularesPorUsuario($idusuario);
									
									$datagrid = new DataGrid2($query, $columns, '',0);
							
									//nome do usuario
									$this->objUsuario = $MIOLO->GetBusiness($module,'usuario');
									$usuario = $this->objUsuario->GetById($idusuario);
							
									$datagrid->SetTitle('Livros em Situação Regular - ' . $usuario[0][1]);
									$datagrid->SetLinkType('linkbutton');
									$datagrid->SetWidth('99%');
							
									//$href_edit = $MIOLO->GetActionURL($module,$self,'%4%',Array('event'=>'btnRenovar:click'));
									//$datagrid->AddActionText('Renovar', 'Renovar', $href_edit);
									
									//Datagrid de emprestimos irregulares
									$columns2 = array(
										new DataGridColumn('numerodotombo','Exemplar','center',false, '15%',true, null, false, false),
										new DataGridColumn('titulo','Título','left',false, '40%',true, null, false, false),
										new DataGridColumn('autor','Autor','left',false, '30%',true, null, false, false),
										new DataGridColumn('datahoraprevisaodevolucao','Data para Devolução','center',false, '15%',true, null, false, false)
										);
							
									$query2 = $this->objEmprestimo->ListEmprestimosIrregularesPorUsuario($idusuario);
									
									$datagrid2 = new DataGrid2($query2, $columns2, '',0);
									$datagrid2->SetTitle('Livros com Atraso na Devolução - ' . $usuario[0][1]);
									$datagrid2->SetWidth('99%');
							
									//Tabelas com as mensagens exibidas ao usuário
									$table1 = new SimpleTable('st', "cellspacing=0 cellpadding=5 align=center border=1 width=99%", 1, 2);
									$texto = array(
													new Text('','<font size=2 ><font color=red><b>Atenção:</b></font>'),
							//						new Text('','renovação ','red'),
													new Text('','<font size=2 >A renovação "on line" deve ser feita com 24 horas de antecedência ao prazo de devolução. A justificativa de atraso na entrega de material por impossibilidade de acesso à renovação "on line" não é aceita. Nesse caso, o usuário deve fazer a renovação pessoalmente, até a data prevista para a devolução. Pode ser feita na biblioteca de origem ou na Biblioteca Universitária, mediante apresentação da(s) obra(s) e respeitando-se o horário de funcionamento das bibliotecas. <b>A multa pelo atraso é irrevogável. O cálculo da multa é semelhante ao cálculo bancário, ou seja, consideram-se os dias de sábado, domingo e feriado.</b></font>')
												);
							
									$table1->SetCell(0,0,$texto);
									$table1->SetCell(0,1,new Text('','<font size=2 >Clique sobre o link para renovar o item desejado.'));
							
									$table2 = new SimpleTable('st', "cellspacing=0 cellpadding=5 align=center border=1 width=99%", 1, 1);
									$table2->SetCell(0,0,'<font size=2 >Livros com atraso NÃO podem ser renovados via internet. Regularize sua situação na Biblioteca.');
							
									$fields = array(
													$datagrid,
													//$table1,
													$datagrid2,
													//$table2,
										);
							
													
									$theme->AppendContent($fields);
	        				
						}
					}
				}
			}
		
			//Operador de devolução		
			$this->SetFieldValue('hidIdusuarioopdevolucao',$this->manager->GetLogin()->idkey);
            var_dump($this->manager->GetLogin()->idkey);
			$op = 'DEVOLUCAO';
			$query =$this->objDevolucao->GetIdOperacao($op);
			$op2 = $query->result[0][0];
		
			$this->setFieldValue('hidIdOperacao',$op2);	
		}
		
		$data = $this->GetData();
		$numerodotombo = $data->exemplar;
		
		if (!$multa)
		{
			$this->objDevolucao->Devolucao($data);
			
			
			//$exemplar recebe o objeto, de acordo com o nº do tombo inserido
			$exemplar = $this->objExemplar->GetByTombo($data->exemplar);			
			//tem-se a 'notadecirculacao' do objeto
			$notaCirculacao = $exemplar->getObject()->notacirculacao;		
			
			//$notaCirculacao = $this->objExemplar->getNotaCirculacao($numerodotombo)->result[0][0];
			$theme->ClearContent();
			
			if ($notaCirculacao == null)
			{
					$msgDev = "Devolução efetuada com sucesso";
			}
			else
			{
				//imprime a msg concatenada com a nota de circulação
				//var_dump ($notaExemplar->getObject()->notacirculacao);
				$msgDev = "Devolução efetuada com sucesso - " . "<font color=red>Nota: $notaCirculacao </font>";
				//$msgDev = (($notaExemplar->getObject()->notacirculacao) == NULL) ? ($msgDev = "Devolução efetuada com sucesso") : ($msgDev = "Devolução efetuada com sucesso - " . $notaExemplar->getObject()->notacirculacao);
			}
			
			if( ( $permiteMulta[ 0 ][ 0 ] == 'P' ) && ( $atraso > 0 ) )
			{
					$msgDev = "Devolução efetuada com sucesso, gerada penalidade de <font color=red>$atraso</font> dia(s).</br>
					Permissão para efetuar outros empréstimos a partir do dia <font color=red>$novaDataPermissaoEmprestimo</font>";
			}
		}
			
		else
		{
			$multa2 = $this->objDevolucao->DevolucaoComMulta($data);

			$theme->ClearContent();
			$multa = str_replace(',','.',$multa);
			settype($multa,"float");			

			$msgDev = "Devolução efetuada com sucesso";
		}
		
		$reserva = $this->objReserva->GetProximaReserva(0,$data->hidexemplar);
			
		if ( $reserva )
		{
			$datalimite = $this->objReserva->CalculaData(1);
			$idsituacao = $this->objEmprestimo->GetSituacao('ATENDIDA')->result;

			$this->objReserva->ConfirmaReserva($reserva[0],$idsituacao[0][0],$datalimite);

			$atendida = $this->objReserva->GetByCodigo($reserva[0]);
			if ($atendida[8] == 'ATENDIDA')
			{
				$nome = $atendida[7];
				$login = $atendida[1];
				$msgRes = "<font color=red>Reserva atendida para o usuário <br>Nome: " . $nome . "<br>Login: " . $login . "</font>";
			}
		}
		
		//mostra a mensagem
		$msg = '';
		if ($msgDev != '')
		{
			$msg = $msgDev;
		}
		if ($msgRes != '')
		{
			$msg = $msg . '<br><br>' . $msgRes;
		}
		
		if ($msgMul != '')
		{
		
			
			$msg = $msg . '<br><br>' . $msgMul;
			//$MIOLO->Question($msg, $gotoYes, $gotoNo, $eventYes,$eventNo);
			
			
			
		}
		
		
			$this->SetButtonAttr('btnDevolver','visible',true);
			$this->SetButtonAttr('btnVoltar','visible',true);
			$this->SetFieldAttr('edtExemplar','visible', true);
			$this->setFieldValue('edtExemplar','');
			
					
		//Definindo o foco
		if (!($this->GetFieldValue('edtExemplar')))
			$this->page->onLoad("MIOLO_GetElementById('edtExemplar').focus();");
			
			
			//$MIOLO->Prompt(Prompt::Information($msg, $MIOLO->GetActionURL($module,$self)));
			
			if ($msgMul != '')
			{
				$this->addInfo($msg, $MIOLO->GetActionURL($module,$self));
			}
			else 
			{
				$this->addInfo($msg, $MIOLO->GetActionURL($module,$self));
			}
			
			if ($MensagemMulta)
				$msg = $MensagemMulta;
			
			$this->addListaExemplares(array($data->exemplar,$msg));
			
			
			/*
			 * 
			 *  Adiciona informações sobre
			 *   os últimos exemplares devolvidos 
			 *		pelo mesmo usuário 
			 * 
			 */
			//Datagrid de empréstimos regulares
				$columns = array(
				    new DataGridColumn('numerodotombo','Exemplar','center',true, '15%',true, null, false, false),
					new DataGridColumn('situacao','Situação','left',false, '45%',true, null, false, false),
					);
			
			$href_datagrid = $MIOLO->GetActionURL($module,$self);
			
			$datagrid3 = new Grid($this->getListaExemplares(), $columns, $href_datagrid,50);		
			$datagrid3->SetTitle('Últimos exemplares devolvidos');
			$datagrid3->SetLinkType('linkbutton');
			$datagrid3->SetWidth('99%');
			
			
			
			
			/*
			*   Adiciona informações sobre os exemplares que o usuário ainda possui
			*/
			
					
				//Datagrid de emprestimos regulares
				$columns = array(
				    new DataGridColumn('numerodotombo','Exemplar','center',true, '15%',true, null, false, false),
					new DataGridColumn('titulo','Título','left',false, '45%',true, null, false, false),
					new DataGridColumn('autor','Autor','left',false, '25%',true, null, false, false),
					new DataGridColumn('datahoraprevisaodevolucao','Data para Devolução','center',true, '15%',true, null, false, false),
					);
		
				//Instancia o objeto emprestimo
			    $this->objEmprestimo = $MIOLO->GetBusiness($module,'emprestimo');
		
				$query = $this->objEmprestimo->ListEmprestimosRegularesPorUsuario($idusuario);
				
				$datagrid = new DataGrid2($query, $columns, '',0);
		
				//nome do usuario
				$this->objUsuario = $MIOLO->GetBusiness($module,'usuario');
				$usuario = $this->objUsuario->GetById($idusuario);
		
				$datagrid->SetTitle('Livros em Situação Regular - ' . $usuario[0][1]);
				$datagrid->SetLinkType('linkbutton');
				$datagrid->SetWidth('99%');
		
				//$href_edit = $MIOLO->GetActionURL($module,$self,'%4%',Array('event'=>'btnRenovar:click'));
				//$datagrid->AddActionText('Renovar', 'Renovar', $href_edit);

				//Datagrid de emprestimos irregulares
				$columns2 = array(
					new DataGridColumn('numerodotombo','Exemplar','center',true, '15%',true, null, false, false),
					new DataGridColumn('titulo','Título','left',false, '40%',true, null, false, false),
					new DataGridColumn('autor','Autor','left',false, '30%',true, null, false, false),
					new DataGridColumn('datahoraprevisaodevolucao','Data para Devolução','center',true, '15%',true, null, false, false)
					);
		
				$query2 = $this->objEmprestimo->ListEmprestimosIrregularesPorUsuario($idusuario);
				
				$datagrid2 = new DataGrid2($query2, $columns2, '',0);
				$datagrid2->SetTitle('Livros com Atraso na Devolução - ' . $usuario[0][1]);
				$datagrid2->SetWidth('99%');
		
				//Tabelas com as mensagens exibidas ao usuário
				$table1 = new SimpleTable('st', "cellspacing=0 cellpadding=5 align=center border=1 width=99%", 1, 2);
				$texto = array(
								new Text('','<font size=2 ><font color=red><b>Atenção:</b></font>'),
		//						new Text('','renovação ','red'),
								new Text('','<font size=2 >A renovação "on line" deve ser feita com 24 horas de antecedência ao prazo de devolução. A justificativa de atraso na entrega de material por impossibilidade de acesso à renovação "on line" não é aceita. Nesse caso, o usuário deve fazer a renovação pessoalmente, até a data prevista para a devolução. Pode ser feita na biblioteca de origem ou na Biblioteca Universitária, mediante apresentação da(s) obra(s) e respeitando-se o horário de funcionamento das bibliotecas. <b>A multa pelo atraso é irrevogável. O cálculo da multa é semelhante ao cálculo bancário, ou seja, consideram-se os dias de sábado, domingo e feriado.</b></font>')
							);
		
				$table1->SetCell(0,0,$texto);
				$table1->SetCell(0,1,new Text('','<font size=2 >Clique sobre o link para renovar o item desejado.'));
		
				$table2 = new SimpleTable('st', "cellspacing=0 cellpadding=5 align=center border=1 width=99%", 1, 1);
				$table2->SetCell(0,0,'<font size=2 >Livros com atraso NÃO podem ser renovados via internet. Regularize sua situação na Biblioteca.');
		
				$fields = array($datagrid3,
								$datagrid,
								//$table1,
								$datagrid2,
								//$table2,
					);
				$theme->AppendContent($fields);
		}
		else 
		{
			$MIOLO->Prompt(Prompt::Error("<font color=red>O Operdador não está mais logado, devido a inatividade da tela.</font><br>Será necessário logar novamente.",$MIOLO->GetActionURL($module,$self)));
//			var_dump($this->manager->GetLogin()->idkey);


		}
	}
	

	function addListaExemplares($Exemplar)
	{
		global $MIOLO,$module,$item,$self, $theme, $action, $page,$datagrid;
	
		$data = $this->GetData();
	
		$lista = $data->ListaExemplares;
		
		//
		// $lista é uma grande string concatenada para exibição dos resultados dos campos
		// onde:
		//           @@@ separa os campos
		//           @@@|-|@@@ separa os registros
		$lista = $lista . '@@@|-|@@@' . $Exemplar[0] . '@@@' . $Exemplar[1] . '@@@' . $Exemplar[2] .'@@@' . $Exemplar[3];
				
		$this->SetFieldValue('ListaExemplares',$lista);
	}


	function getListaExemplares()
	{
		// pega $data->ListaExemplares retorna um array
		
		$lista = $this->GetFieldValue('ListaExemplares');
		$registros = explode('@@@|-|@@@',$lista);
	
		$exemplares = array();
		
		foreach ($registros as $registro)
		{
			if ($registro)
			 array_push($exemplares,explode('@@@',$registro));
		}
		
		return $exemplares;
	}	
} 
?>
