<?php



/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
 * @package SIGA
 * @subpackage Biblioteca
 * @author SETEC/MEC
 */



class frmEditora extends Form
{


	var $objEditora;




	function __construct()

	{
		global $MIOLO,$module;

		// Título do Formulário
		$this->Form('Editoras');



		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" (incluir) não aparece
		$this->defaultButton = false;

		// Botão 'fechar', direcionando para o handler biblioteca/main/admin
		$this->SetClose($this->manager->GetActionURL($module, 'main:admin'));

		//Adicionado para validação dos campos de tamanho constante (cep,CNPJ...)
		$this->page->AddJsCode(file_get_contents(dirname(__FILE__) . '/../ui/js/mask.js'));


	}

	function CreateFields()
	{
		// Campos que aparecem no formulário
		$fields = Array (
		new LookupTextField('lkpDescricao','','Descrição',47,'Obrigatório - Não use acentos'),
		new TextField('edtMnemonico','','Mnemônico',20),
		new TextField('edtcnpj','','CNPJ',20,'Ex.: 99.999.999/0001-99'),
		new MLookupFieldValue('lkpMunicipio','','Município',47,'Use a lupa'),
		new TextField('edtEndereco','','Endereço',50),
		new TextField('edtcep','','CEP',20,'Ex.: 36200-000'),
		new TextField('edtTelefone','','Telefone',20),
		new TextField('edtSite','','Site',50),
		new TextField('edtEmail','','E-mail',50),
		new HiddenField('ideditora') // controla Incluir/Editar
		);

		// Insere os campos
		$this->SetFields($fields);
		$this->SetClose(NULL);

		// Adição de máscaras nos campos CEP, CNPJ
		$this->edtcep->addAttribute('onKeyUp','makeMask(this, \'#####-###\');');
		$this->edtcep->addAttribute('onBlur','makeMask(this, \'#####-###\');');
		$this->edtcep->AddAttribute('maxlength','9');
		$this->edtcnpj->addAttribute('onKeyUp','makeMask(this, \'##.###.###/####-##\');');
		$this->edtcnpj->addAttribute('onBlur','makeMask(this, \'##.###.###/####-##\');');
		$this->edtcnpj->AddAttribute('maxlength','18');
		$this->edtMnemonico->AddAttribute('maxlength','20');
		$this->edtTelefone->AddAttribute('onKeyUp','makeMask(this, \'(##)####-####\');');
		$this->edtTelefone->AddAttribute('onBlur','makeMask(this, \'(##)####-####\');');
		$this->edtTelefone->AddAttribute('maxlength','13');

		
		$validators = array(
		new MRequiredValidator('lkpDescricao'),
		new EMAILValidator('edtEmail','','','E-mail inválido'),
		new CNPJValidator('edtcnpj')
		);

		$this->SetValidators($validators);

		// Botões que aparecem no formulário
		$buttons = Array(
		new FormButton('btnEnviar', 'Incluir'),
		new FormButton('btnExcluir', 'Excluir'),
		new MLink('btnLinkRelacao','Relação de Editoras',$this->manager->getActionURL($module,$self,'',
		array('event'=>'btnList:click'))),
		);

		//Insere os Botões
		$this->SetButtons($buttons);

		/*
		 As 4 propriedades de um lookup:
		 module = módulo usado
		 item = A funcao que chama no arquivo classes/lookup.class
		 event = O evento relacionado quando o usuário clica em 'acao'
		 related = Os campos retornados após a ação
		 */

		$this->SetFieldAttr('lkpDescricao','module','biblioteca');
		$this->SetFieldAttr('lkpDescricao','item','editora');
		$this->SetFieldAttr('lkpDescricao','event','btnConsulta:click');
		$this->SetFieldAttr('lkpDescricao','related', 'ideditora,descricao');

		//Utilizamos o lookup do modulo common para o campo municipio
		$this->SetFieldAttr('lkpMunicipio','module','common');
		$this->SetFieldAttr('lkpMunicipio','item','municipio');
		$this->SetFieldAttr('lkpMunicipio','event','filler');
		$this->SetFieldAttr('lkpMunicipio','related', 'idMunicipio,lkpMunicipio');

		// Botão excluir nao aparece, pois o formulário está em branco
		$this->SetButtonAttr('btnExcluir','visible',false);

	}

	// pega os dados que estão no formulário
	function GetData()
	{
		$data = new FormData();
		$data->descricao = ucfirst(strtolower(trim($this->GetFieldValue('lkpDescricao'))));
		$data->mnemonico = ucfirst(strtolower(trim($this->GetFieldValue('edtMnemonico'))));
		$data->ideditora = $this->GetFieldValue('ideditora');
		$data->municipio = $this->GetFieldValue('lkpMunicipio');
		$data->endereco = $this->GetFieldValue('edtEndereco');
		$data->telefone = $this->GetFieldValue('edtTelefone');
		$data->cep = $this->GetFieldValue('edtcep');
		$data->cnpj = $this->GetFieldValue('edtcnpj');
		$data->email= $this->GetFieldValue('edtEmail');
		$data->site= $this->GetFieldValue('edtSite');
		return $data;
	}


	// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('lkpDescricao',$data->descricao);
		$this->SetFieldValue('edtMnemonico',$data->mnemonico);
		$this->SetFieldValue('ideditora',$data->ideditora);
		$this->SetFieldValue('lkpMunicipio',$data->municipio);
		$this->SetFieldValue('edtEndereco',$data->endereco);
		$this->SetFieldValue('edtcep',$data->cep);
		$this->SetFieldValue('edtcnpj',$data->cnpj);
		$this->SetFieldValue('edtTelefone',$data->telefone);
		$this->SetFieldValue('edtEmail',$data->email);
		$this->SetFieldValue('edtSite',$data->site);
	}

	// Consulta: função chamada após o usuário usar o lookup
	function btnConsulta_click($sender,$ideditora)
	{
		global $MIOLO,$module,$item;

		//A linha abaixo verifica se existe um ideditora
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
		$ideditora = ($ideditora != '') ? $ideditora : $item;

		// Já considera que o usuário quer excluir,editar uma editora
		$this->SetButtonAttr('btnExcluir','visible',true);
		$this->SetButtonAttr('btnEnviar','label','Salvar');

		//Instancia o objeto editora
		$this->objEditora = $MIOLO->GetBusiness($module,'editora');

		// ok retorna os dados de ideditora
		$ok = $this->objEditora->GetByCodigo($ideditora);

		// este é o setdata deste arquivo. não é o setdata da classe de negócios
		// veja que é $this->SetData e nao $this->objEditora->SetData
		$this->SetData($ok);
	}

	// Enviar pode ser inserir ou editar
	function btnEnviar_click()
	{
		global $MIOLO,$module,$action;

		//Instancia o objeto editora
		$this->objEditora = $MIOLO->GetBusiness($module,'editora');

		//Caso o usuário preencha o campo mnemônico apenas com espaço em branco, os espaços são retirados
		//De '     ' para ''
		trim(Form::GetFormValue('edtMnemonico'));
		
		if( strlen(trim(Form::GetFormValue('lkpDescricao'))) == 0 )
		{
			$this->AddError('Informe o campo "Descrição"');
			
		}else
		{
			$data = $this->GetData();

			if ( $data->ideditora )
			{

				// Usuário quer editar um item
				$what = " atualizado ";
				$ok = $this->objEditora->Update($data);
				$this->objEditora->Log(OP_UPD,'Alterada a editora '.$data->descricao.' com o id = '.$data->ideditora);
				$MIOLO->Information($data->descricao . " $what com sucesso.", $action );


			}
			else
			{ // Usuário quer inserir novo item
				$what = " inserida ";

				// verificar se já existe ideditora
				$ok = $this->objEditora->Insert($data);
				$this->objEditora->Log(OP_UPD,'Inserida a editora '.$data->descricao.' com o id '.$ok);
			}

			if ( $ok )
			{
				$MIOLO->Prompt(Prompt::Information($data->descricao . " $what com sucesso.",
				$MIOLO->GetActionURL($module,$action) ));
			}
			else
	  $MIOLO->Error("'" . $data->descricao  . "' não foi $what. ", $MIOLO->GetActionURL($module,$action) );

		}

	}



	function btnExcluir_click()
	{
		global $MIOLO, $module, $item, $action;

		$data = $this->GetData();

		//Instancia o objeto editora
		$this->objEditora = $MIOLO->GetBusiness($module,'editora');

		//A linha abaixo verifica se existe um data->ideditora
		//Se nao existir, ela tenta pegar $item que é passada
		//pelo botao editar do "relação"
		if (!($data->ideditora))
		{
			$this->objEditora->GetByCodigo($item);
			$data = $this->objEditora->GetData();
		}

		/*$conf é a variável que confirma a exclusão do registro no momento
		 em que é questionado ao usuário se ele deseja relmente excluir o registro*/

		$conf = $this->GetFormValue('conf');

		//Verifica a lista de a editora possui alguma obra associada.
		//Caso esta esteja associada a uma obra não é possível a exclusão

		$obraEd = $this->objEditora->ListObraByEditora($data);

		if($obraEd)
		{
			$MIOLO->Error("Esta editora não pode ser apagada porque existe(m) obra(s) relacionada(s) com a mesma.", $MIOLO->GetActionURL($module,$action));
		}

		if( $conf == 'sim') //Caso o usuário tenha escolhido a opção sim
		{
			try
			{
				$this->objEditora->Delete($data);
				$this->objEditora->Log(OP_DEL,'Editora deletado - id = '.$data->ideditora);
				$MIOLO->prompt(Prompt::information($data->descricao . " deletada da base de dados", $MIOLO->GetActionURL($module,$action)));
			}
			catch(EMioloException $e)
			{
				$MIOLO->Error("As informações não foram deletadas", $MIOLO->GetActionURL($module,$action));
			}
		}
		elseif( $conf == 'nao')
		{
			$MIOLO->prompt(Prompt::information('Exclusão cancelada.', $MIOLO->GetActionURL($module,$action)));
		}else
		{
			/*Caso a variável não possua o valor "sim" nem o valor "não" significa que ainda não lhe foi atribuído um valor,
			 ou seja, deve-se perguntar ao usuário se deseja realmente excluir o registro */

			$msg = "Tem certeza que deseja realmente excluir a editora " . $data->descricao . " ?";

			$action_sim = $MIOLO->getActionURL($module,'main:admin:editora&event=btnExcluir:click',$data->ideditora, array('conf'=>'sim'));
			$action_nao = $MIOLO->getActionURL($module,'main:admin:editora&event=btnExcluir:click',$data->ideditora, array('conf'=>'nao'));

			$MIOLO->prompt(Prompt::question($msg, $action_sim, $action_nao));
		}
	}


	function btnList_click()
	{
		global $MIOLO, $module, $self, $theme, $action, $page;

		$columns = array(
		new DataGridColumn(null),
		new DataGridColumn('descricao','Descrição','left',true, '50%',true, null, true,true),
		new DataGridColumn('mnemonico','Mnemonico','center', true, '50%',true, null, true,true)
		);

		$href_datagrid = $MIOLO->GetActionURL($module,$self,'', Array('event'=>'btnList_click'));
		$page->SetAction($href_datagrid);

		//Instancia o objeto editora
		$this->objEditora = $MIOLO->GetBusiness($module,'editora');

		$query = $this->objEditora->ListEditora();

		$datagrid = new DataGrid2($query, $columns, $href_datagrid,20);
		$datagrid->SetTitle('Relação de Editoras');
		$datagrid->SetLinkType('linkbutton');
		$datagrid->SetWidth('100%');
		$href_edit = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnConsulta:click'));
		$href_dele = $MIOLO->GetActionURL($module,$self,'%0%',Array('event'=>'btnExcluir:click'));

		$datagrid->AddActionIcon('Editar', 'edit', $href_edit);
		$datagrid->AddActionIcon('Excluir', 'delete.gif', $href_dele);
		$datagrid->HeaderLink('new', 'Novo Registro',

		$MIOLO->GetActionURL($module,$self,'',Array('event'=>'')));

		$theme->InsertContent($datagrid);
	}
}
?>
