<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/



class frmMultaPagamento extends Form
{
	var $objMulta;
	var $objUsuarioCM;   //('common','usuario')
	var $objUsuario;   //($module,'usuario')

    function frmMultaPagamento()  // construtor da Classe
    {
		global $MIOLO,$module;

		// Título do Formulário
		$this->Form('Balcão de Empréstimos - Multas');
	
		//Chama o CreateFileds, etc.
		$this->EventHandler();

		// Botão "enviar" não aparece
		$this->defaultButton = false;
		
		// Botão 'fechar', direcionando para o handler biblioteca/main/emprestimos
		$this->SetClose($this->manager->GetActionURL($module, 'main:emprestimos'));
	}

    function CreateFields()
    {
		global $MIOLO,$module;

		// Campos que aparecem no formulário
		$fields = Array (
		   new Text('txtAviso','<b>Informe:</b>'),
                            new Text('txtCartao', '<b>> O cartão de acesso ou login para usuário pertencente à Instituição (aluno, professor etc)</b>'),
                                     new Text('txtRG', '<b>> O número do RG para usuário pertencente à comunidade, sem vínculo com a Instituição</b>'),
			new Spacer(1),
			
			array(
				new MTextField('edtCartaoAcesso','','Cartão de Acesso',16),
                new MTextLabel('txtOu','&nbsp;&nbsp;&nbsp;-OU-&nbsp;&nbsp;&nbsp;','&nbsp;'),
               // new MTextField('edtMatricula','','Login do Usuário',16),
                
                new LookupTextField('edtMatricula','','Login do Usuário',16),
                
                
                new MTextLabel('txtOu2','&nbsp;&nbsp;&nbsp;-OU-&nbsp;&nbsp;&nbsp;','&nbsp;'),
				new LookupTextField('edtRG','','Número do RG',16),
			),
			
			array(new TextField('edtNome','','Nome',60)),
			new HiddenField('hidIdusuario'),
			new HiddenField('hidLogin'),
		);

		// Insere os campos
		$this->SetFields($fields);

		// Botões que aparecem no formulário
		$buttons = Array(
			new FormButton('btnConsulta', 'Consulta'), //consulta o num do cartao
			new MButton('btnConfirmar', 'Confirmar Pagamento'),
			new MButton('btnVoltar', 'Voltar',$MIOLO->GetActionURL($module,$self)),
		);

		//Insere os Botões
		$this->SetButtons($buttons);

		//Esconde os campos 
		$this->SetFieldAttr('edtNome','visible', false);
		
		//As 4 propriedades de um lookup
		// module = módulo usado
		// item = A funcao que chama no arquivo classes/lookup.class
		// event = O evento relacionado quando o usuário clica em "acao"
		// related = Os campos retornados após a ação
		$this->SetFieldAttr('edtRG','module','biblioteca');
		$this->SetFieldAttr('edtRG','item','rg');
		$this->SetFieldAttr('edtRG','event','filler');
		$this->SetFieldAttr('edtRG','related', 'edtRG,""');
		

		//As 4 propriedades de um lookup
		// module = módulo usado
		// item = A funcao que chama no arquivo classes/lookup.class
		// event = O evento relacionado quando o usuário clica em "acao"
		// related = Os campos retornados após a ação
		$this->SetFieldAttr('edtMatricula','module',$module);
		$this->SetFieldAttr('edtMatricula','item','Usuario');
		$this->SetFieldAttr('edtMatricula','event','filler');
		$this->SetFieldAttr('edtMatricula','related','edtMatricula');
		
		
		// Atributo dos botões
		$this->SetButtonAttr('btnConsulta','visible',true);
		$this->SetButtonAttr('btnConfirmar','visible',false);
		$this->SetButtonAttr('btnVoltar','visible',false);

		if (!($this->GetFieldValue('edtCartaoAcesso')))
		{
			//Definindo o foco
			//$this->page->onLoad('document.'.$this->name.'.edtCartaoAcesso.focus();');
			$this->page->onLoad("MIOLO_GetElementById('edtCartaoAcesso').focus();");
		}
	}

	// pega os dados que estão no formulario   
    function GetData()
    {
    	$data = new FormData();
       	$data->cartaoacesso = $this->GetFieldValue('edtCartaoAcesso');
       	$data->rg = $this->GetFieldValue('edtRG');
       	
		$data->nome = $this->GetFieldValue('edtNome');
        $data->idusuario = $this->GetFieldValue('hidIdusuario');
		$data->login = $this->GetFieldValue('hidLogin');
		return $data;
    }

	// usada para inserir valores no formulário
	function SetData($data)
	{
		$this->SetFieldValue('edtCartaoAcesso',$data->cartaoacesso);
		$this->SetFieldValue('edtNome',$data->nome);
		$this->SetFieldValue('hidIdusuario',$data->idusuario);
		$this->SetFieldValue('hidLogin',$data->login);
	}

	function btnConsulta_click()
	{ 
		global $MIOLO,$module,$item,$theme;
		
		//var_dump($item);

		// Atributo dos botões
		$this->SetButtonAttr('btnConsulta','visible',false);
		$this->SetButtonAttr('btnConfirmar','visible',false);
		
		if ($item)
		{
			$cartao = $item;
			
			// Verifica se existe um @ no item, dizendo que é usuário externo (RG)
			if (strpos($cartao,"@"))
			{
				$cartao = str_replace("@","",$cartao);
				$this->SetFieldValue('edtRG',$cartao);
					
			}
			else 
			{
				$this->SetFieldValue('edtCartaoAcesso',$cartao);	
			}
			
			
		}
		
		$cartao = $this->GetFieldValue('edtCartaoAcesso');
		$rg = $this->GetFieldValue('edtRG');
		$matricula = $this->GetFieldValue('edtMatricula');
		
		
		if ($cartao != null)
		{
			$tipoUsuario = 'sigaept';
			
			$this->SetFieldAttr('edtRG','visible',false);
			$this->SetFieldAttr('txtAviso','visible',false);
			$this->SetFieldAttr('txtCartao','visible',false);
			$this->SetFieldAttr('txtOu','visible',false);
			$this->SetFieldAttr('txtRG','visible',false);
			$this->SetFieldAttr('edtMatricula','visible',false);
			$this->SetFieldAttr('txtOu2','visible',false);
			
			
//			$this->SetFieldAttr('edtNome','visible',true);
			$this->objUsuario = $MIOLO->GetBusiness($module,'usuario');
			$idusuario = $this->objUsuario->GetByCartao($cartao);
			if ($idusuario != null)
			{
				$query = $this->objUsuario->GetById($idusuario);
				$nome = $query[0][1];
			}
		}
		elseif ($rg != null)
		{
			$tipoUsuario = 'comunidade';
			
			$this->SetFieldAttr('edtCartaoAcesso','visible',false);
			$this->SetFieldAttr('txtAviso','visible',false);
			$this->SetFieldAttr('txtCartao','visible',false);
			$this->SetFieldAttr('txtOu','visible',false);
			$this->SetFieldAttr('txtRG','visible',false);
			$this->SetFieldAttr('edtMatricula','visible',false);
			$this->SetFieldAttr('txtOu2','visible',false);
			
			$this->objUsuario = $MIOLO->GetBusiness($module,'usuarioexterno');
			$idusuario = $this->objUsuario->GetByRG($rg);
			if ($idusuario != null)
			{
				$query = $this->objUsuario->GetById($idusuario);
				$nome = $query->nome;
			}
			
		
		}
		elseif ($matricula != null)
		{
			
			$this->SetFieldAttr('edtCartaoAcesso','visible',false);
			$this->SetFieldAttr('txtAviso','visible',false);
			$this->SetFieldAttr('txtCartao','visible',false);
			$this->SetFieldAttr('txtRG','visible',false);
			$this->SetFieldAttr('txtOu2','visible',false);
			$this->SetFieldAttr('edtRG','visible',false);
			$this->SetFieldAttr('edtMatricula','visible',true);
			$this->SetFieldAttr('txtOu','visible',false);			
			
			$this->objUsuario = $MIOLO->GetBusiness($module,'usuario');
			$idusuario = $this->objUsuario->GetByLogin($matricula);
			
			$idusuario = $idusuario[0][0];
			
			if ($idusuario != null)
			{
				
				$query = $this->objUsuario->GetById($idusuario);
				$nome = $query[0][1];
			}
			
		
		}
		else
		{
			$MIOLO->Prompt(Prompt::Error("Por favor, informe o cartão de acesso ou o número do RG.", $MIOLO->GetActionURL($module,$action)));
		}
		
		if ($idusuario == null)
		{
			$MIOLO->Prompt(Prompt::Error("Usuário não encontrado.", $MIOLO->GetActionURL($module,$action)));			
		}
		
		
	
	
			$this->SetButtonAttr('btnVoltar','visible',true);

			//Propriedades dos campos
			$this->SetFieldAttr('edtCartaoAcesso','readonly',true);
			$this->SetFieldAttr('edtRG','readonly',true);
			$this->SetFieldAttr('edtMatricula','readonly',true);
			$this->SetFieldAttr('edtNome','visible',true);
			$this->SetFieldAttr('edtNome','readonly',true);
			$this->SetFieldValue('edtNome',$nome);
			$this->SetFieldValue('edtCartaoAcesso',$cartao);
			$this->SetFieldValue('edtRG',$rg);
			$this->SetFieldValue('edtMatricula',$matricula);
		
			$this->SetFieldValue('edtNome',$nome);
			$this->SetFieldValue('hidIdusuario',$idusuario);
/*
			//Propriedades dos campos
			$this->SetFieldAttr('txtOu2','visible',false);
			$this->SetFieldAttr('edtCartaoAcesso','readonly',true);
			$this->SetFieldAttr('edtRG','readonly',true);
			$this->SetFieldAttr('edtNome','visible',true);
			$this->SetFieldAttr('edtNome','readonly',true);
	*/		
			$columns = array(
				new DataGridColumn('idmulta','Multa','center',true, '7%',true, null, false, false),
				new DataGridColumn('idemprestimo','Empréstimo','center',true, '10%',true, null, false, false),
				new DataGridColumn('numerodotombo','Exemplar','center',true, '10%',true, null, false, false),
				new DataGridColumn('titulo','Título','left',false, '25%',true, null, false, false),
				new DataGridColumn('datahoraprevisaodevolucao','Prev. Dev.','center',true, '10%',true, null, false, false),
				new DataGridColumn('datahora','Data','center',true, '8%',true, null, false, false),
				new DataGridColumn('valor','Valor','center',true, '8%',true, null, false, false),
				new DataGridColumn('observacao','Observação','left',false, '22%',true, null, false, false),
			);

			//Instancia o objeto multa
		    $this->objMulta = $MIOLO->GetBusiness($module,'multa');
	
			$query = $this->objMulta->ListMultasNaoPagas($idusuario);
			$total = $this->objMulta->GetTotalMultasNaoPagas($idusuario);
	
			$datagrid = new DataGrid2($query, $columns, '',0);
			$datagrid->SetTitle('Multas Não Pagas pelo Usuário ' . $nome . ' - Total: R$ ' . number_format(str_replace(',','.',$total),2,',','.'));
			$datagrid->SetWidth('99%');
			$datagrid->AddActionSelect();
	
			$perms = $this->manager->getPerms();
			if ( $perms->checkAccess('bib_pagamento',A_ACCESS) )
			{
				$datagrid->SetControls(new MButton('btnConfirmar', 'Confirmar Pagamento'));
			}
	
//			$theme->AppendContent($datagrid);
            $this->addField($datagrid);
				
	}

	

	function btnConfirmar_click()
	{  global $MIOLO,$page,$theme, $action,$datagrid, $module;

	    $this->objMulta = $MIOLO->GetBusiness($module,'multa');

		// um array com todos os exemplares selecionados do DataGrid
		$Multas =  $this->GetFormValue('select');

		// o Resultado final do sistema
		$Resultado = " <BR><BR> Resultado: <BR><BR> ";

		if ($Multas){
			foreach ($Multas as $Multa){

				//verifica se a multa ainda não foi paga
				$this->objMulta->GetById($Multa);
				if(!$this->objMulta->foipaga)
				{
					$ok = $this->objMulta->PagarMulta($Multa);

					if ($ok){
						$Resultado .= "Multa $Multa paga com sucesso.<BR>";
						
						$log = $MIOLO->GetBusiness($module,'log');
						$log->SetData($this->getDataLog($Multa));
						$log->save();

					}
					else{
						$Resultado .= "Multa $Multa não foi paga com sucesso.<BR>";
					}
				}
				else // multa já foi paga -> mesma mensagem
				{
					$Resultado .= "Multa $Multa paga com sucesso.<BR>";
				}

			}
		}
		else{
			$goto = $MIOLO->GetActionURL($module,$action);
			$MIOLO->Error('Nenhuma multa selecionada. Por favor, volte e selecione as multas.', $goto);
		}

		$msg = "Situação das Multas:  $Resultado";
        $goto = $MIOLO->GetActionURL($module,$action);
        $MIOLO->Information($msg, $goto);

    }

	function getDataLog($Multa)
	{
		global $MIOLO;
		$data = new FormData();
		$data->data = date("d/m/Y H:i:s");
		$data->identificador = $Multa;
		$data->idusuario = $MIOLO->GetLogin()->idkey;
		$operacao = $MIOLO->GetBusiness('biblioteca','operacao');
		$operacao = $operacao->GetIdoperacaoByMnemonico('RECMULTA');
		$data->idoperacao = $operacao->GetIdoperacao();
		return $data;
	}

}
?>
