<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/

class frmCatalogacaoFichaMarc extends MForm
{
    private $idObra;
    private $objObra;
    private $objGrid;

    function __construct($idObra)
    {
        parent::__construct('MARC');
        $this->EventHandler();
        $this->idObra = $idObra;
        // Botão 'fechar', direcionando para o handler biblioteca/main/catalogacao
        $this->SetClose($this->manager->GetActionURL($module, 'main:catalogacao'));
    }
    
    function CreateFields()
    {  
        session_start("camposMarc");
        global $MIOLO,$item, $module, $action; 
        $ui = $MIOLO->GetUI();
        $this->idObra = $item;
        $this->objObra = $MIOLO->GetBusiness($module,'obra');
        $dataMarc = $MIOLO->_REQUEST("camposMarc",$_SESSION);
        $textoMarc = $this->getMarcObra();

        $columnGrid = array(   
             new MGridColumn(null),
             new MGridColumn("Ordem","left",false,20,true,null,false,false),
             new MGridColumn("Campo","left",false,40,true,null,false,false),
             new MGridColumn("Subcampo","left",false,30,true,null,false,false),
             new MGridColumn("Descrição","left",false,100,true,null,false,false),              
        );
        $grid = new MGrid($dataMarc,$columnGrid, $href,15,0,'gridMarc', true);
        $grid->addActionDelete($MIOLO->GetActionURL($module,$action,$this->idObra,Array('event'=>'btnExcluir:click','idCampo'=>'%0%')));
        //$href = $MIOLO->GetActionURL($module,$self,$this->idObra,Array('event'=>'btnAtualizarCampo:click','idCampo'=>'%0%'));
        //$icon = $ui->GetImage($module,'85_mini.png');
        //$grid->addActionIcon("Alterar",$icon,$href);
        $fields = array(
                        array(
                              new MTextField('txtOrdem1','','Ordem',3),
                              new MTextField('txtCampo1','','Campo',5),
                              new LookupTextField('lkpCampo','','Complemento',15,''),
                              new MTextField('txtInd1','','Ind. 1',3),
                              new MTextField('txtInd2','','Ind. 2',3)
                        ),
                        array(
                              new MTextField('txtOrdem2','','Ordem',3),
                              new MTextField('txtSubCampo','','Subcampo', 5),
                              new MultiLineField('mlinDesc','','Descrição',10,3, 20,null),
                              new MTextField('txtPontuacao','','Pontuação',3),
                              new FormButton('btnIncluirCampo', 'Inserir')
                        ),
                        $grid,
                        array(    
                              new MultiLineField('mlinVisual',$textoMarc,'Visualizar',20,5,45,null),
                              new MButtonWindow('btnMarc', 'MARC', $MIOLO->GetActionURL($module = $module, 'main:marc', $item))
                        ),       
        ); 

        $this->SetFields($fields);
        $this->objGrid = $grid;
        // 4 propiedades do lookup
        $this->SetFieldAttr('lkpCampo','module','biblioteca');
        $this->SetFieldAttr('lkpCampo','item','buscaCampo');
        $this->SetFieldAttr('lkpCampo','event','filler');
        $this->SetFieldAttr('lkpCampo','related', 'txtCampo1,txtSubCampo,lkpCampo');
        //Setando atributos do formulário
        $this->SetFieldAttr('mlinVisual','readonly',true);
        
        $buttons = array(
                         new FormButton('btnAtualizarAcervo', 'Atualizar Acervo'),
                   );
        $this->SetButtons($buttons);
        
        if($item == null){
            $this->SetFieldAttr('btnIncluirCampo','visible',false);
            $this->SetFieldAttr('btnExemplar','visible',false);
            $this->SetFieldAttr('btnMarc','visible',false);
        }else{
            $this->objObra->GetById($item);
            $genero = $MIOLO->GetBusiness($module,'genero');
            $genero->GetByCodigo($this->objObra->idGenero);
          
            if($this->objObra->autor != null && ($genero->descricao == 'LIVRO' )){
                $this->addButton(new MButtonWindow('btnExemplar', 'Exemplar', $MIOLO->GetActionURL($module , 'main:catalogacao:exemplar', $this->objObra->numeroDaObra,Array('event'=>'btnConsultar:click'))));
            }
            
       }
 
    }

    function getMarcObra(){
        global $MIOLO,$module;
        $texto = "";
        if($this->idObra != null ){
            $objGenero  = $MIOLO->GetBusiness($module,'genero');
            
            $camposfixos = $this->objObra->getCamposFixosByIdobra($this->idObra);
            $material = $this->objObra->getMaterialByIdobra($this->idObra);
            $indicadores = $this->objObra->getIndicadoresByIdobra($this->idObra);
            $linhas = array();

            //acrescenta os camposfixos no tableraw
            foreach($camposfixos as $c)
            {
                $linhas[] = array("tag"=> $c[0],"ocorrencia"=> '1',"indicador"=>'&nbsp;&nbsp;' ,"conteudo"=> str_replace(' ', "&nbsp;", $c[1]));
            }
            
            for($i = 0; $i < count($material); $i++)
            {
                $indicador = "";
                $indicador = $this->PreparaIndicadores($material[$i][0], $indicadores, $material[$i][1]);
                $existeTag = $this->BuscaTagInArray($material[$i][0],$material[$i][1],$linhas);
                if(!$existeTag){
                    if($material[$i][0] == '902')//para genero, busca a descricao
                    {
                        $linhas[] = array("tag" => $material[$i][0],"ocorrencia"=>$material[$i][1] ,"indicador"=> $indicador,"conteudo"=> '$' . $material[$i][2] . ' ' .$objGenero->GetByCodigo($material[$i][4])->descricao);
                    }else{
                        $linhas[] = array("tag" => $material[$i][0],"ocorrencia"=>$material[$i][1] ,"indicador"=> $indicador,"conteudo"=> '$' . $material[$i][2] . ' ' .$material[$i][4]);
                    }
                }else{
                    $linhas[$existeTag]["conteudo"] .= ' $'.$material[$i][2] . ' '.$material[$i][4];
                } 
            }
            foreach($linhas as $lin){
                $texto .= $lin["tag"].' '.$lin["indicador"].' '.$lin["conteudo"]."\n"; 
            }
        }
        return $texto;
        
    }
    
    function BuscaTagInArray($tag,$ocorrencia, $array){
        $pos = null;
        for($i = 0; $i < Count($array);$i++){
            $a = $array[$i] ;
            if(($a["tag"] == $tag) && ($a["ocorrencia"] == $ocorrencia)){
                $pos = $i;
                break;
            }
        }
        return $pos;
    }

    function PreparaIndicadores($tag, $indicadores, $ocorrencia)
    {
        $texto_ind = '';
        //indicadores[$i] = e.tag, i.ocorrencia, i.indicador, i.conteudo;
        if($indicadores)
        {
            foreach($indicadores as $i) //procura o indicador 1 da tag específica no array de indicadores da obra
            {           
                if( ($i[0] == $tag) and ($i[1] == $ocorrencia) and ($i[2] == '1') )
                {
                    if($i[3] != ' ') //se indicador for = ' ', transforma para #
                        $texto_ind = $i[3];
                    else
                        $texto_ind = '#';
                    break;
                }
            }
        }
        //preenche com espaço para o caso de não haver indicador 1
        if($texto_ind == '')
        {
            $texto_ind = '&nbsp;&nbsp;';
        }

        if($indicadores)
        {
            foreach($indicadores as $i) //procura o indicador 2 da tag específica no array de indicadores da obra
            {           
                if( ($i[0] == $tag) and ($i[1] == $ocorrencia) and ($i[2] == '2') )
                {
                    if($i[3] != ' ') //se indicador for = ' ', transforma para #
                        $texto_ind .= "&nbsp;" . $i[3];
                    else
                        $texto_ind .= "&nbsp;#";
                    break;
                }
            }
        }

        return $texto_ind;
    }
    
    function GetData()
    {
        $data = new FormData();

        $data->ordem1 = $this->GetFieldValue('txtOrdem1');
        $data->campo = $this->GetFieldValue('txtCampo1');
        $data->indicador1 = $this->GetFieldValue('txtInd1');
        $data->indicador2 = $this->GetFieldValue('txtInd2');

        $data->ordem2 = $this->GetFieldValue('txtOrdem2');
        $data->subCampo = $this->GetFieldValue('txtSubCampo');
        $data->descricao = $this->GetFieldValue('mlinDesc');
        $data->pontuacao = $this->GetFieldValue('txtPontuacao');
          
        return $data;
    } 

    function limparCampos(){
        $this->SetFieldValue('txtOrdem1','1');
        $this->SetFieldValue('txtCampo1','');
        $this->SetFieldValue('txtInd1','');
        $this->SetFieldValue('txtInd2','');
        $this->SetFieldValue('txtOrdem2','1');
        $this->SetFieldValue('txtSubCampo','');
        $this->SetFieldValue('mlinDesc','');
        $this->SetFieldValue('txtPontuacao','');
        $this->SetFieldValue('lkpCampo','');
    }

    function btnExcluir_click(){
        global $MIOLO,$item;
        session_start("camposMarc");
        $idCampo = $this->GetFormValue("idCampo");
        $array = $_SESSION["camposMarc"];
        $_SESSION["camposMarc"] = array();
        $id = 0;
        foreach($array as $a){
            if($a[0] != $idCampo){
                $a[0] = $id;
                $_SESSION["camposMarc"][] = $a;
                $id++;
            }
        }
        $go = $this->manager->getActionURL('biblioteca','main:catalogacao:catalogacaoPergamum',$item,Array('event'=>'ExcluirCampo'));
        $this->page->redirect($go);
    }
    
    function btnIncluirCampo_click(){
        session_start("camposMarc");
        global $MIOLO, $item;
        $dataMarc = $this->GetData();
        if($this->isNullCampos($dataMarc)){
            $MIOLO->Error("Os campos: Ordem, Campo, Subcampo e Descrição devem ser cadastrastrados.", $MIOLO->GetActionURL($module,'main:catalogacao:catalogacaoPergamum',$item,Array('event'=>'ExcluirCampo')));
        }else{
            $id = Count($_SESSION["camposMarc"]);
            $_SESSION["camposMarc"][] = array($id,$dataMarc->ordem2,$dataMarc->campo,$dataMarc->subCampo,$dataMarc->descricao,$dataMarc->ordem1,$dataMarc->indicador1,$dataMarc->indicador2,$dataMarc->pontuacao);
            $this->objGrid->SetData($_SESSION["camposMarc"]);
            if($dataMarc->ordem1 != 1){
                $dataMarc->ordem1--;
                $varordem = "$dataMarc->ordem1";    
                $this->SetFieldValue('txtOrdem1',$varordem);
                $dataMarc->ordem2++;
                $varordem = "$dataMarc->ordem2 ";    
                $this->SetFieldValue('txtOrdem2',$varordem);
                $this->SetFieldValue('mlinDesc','');    
            }else{
                $this->limparCampos();
            }
        }
    }
    
    function isNullCampos($data){
        if(($data->ordem1 == null)||($data->ordem2 == null)||
            ($data->campo == null)||($data->subCampo == null)||
            ($data->descricao == null)){
            return true;
        }
        return false;
    }
    function btnAtualizarAcervo_click(){
        session_start("camposMarc");
        global $MIOLO,$item,$module;
        $arrayCampos = $_SESSION["camposMarc"];
        $this->objObra->GetById($this->idObra);
        foreach($arrayCampos as $campo){
           if($campo[2]<'010'){
              $this->objObra->saveSubFicha($campo[4],$campo[2]);
           }else{
              $objEtiqueta = $MIOLO->GetBusiness($module,'etiqueta');
              $objEtiqueta->GetByTag($campo[2]);
              //Salva Indicadores
              if($campo[6]!= null) {
                 $this->objObra->saveIndicador($objEtiqueta->idEtiqueta,$campo[1],$campo[6],$campo[6],$campo[2]);
              }
              if($campo[7]!= null) {
                 $this->objObra->saveIndicador($objEtiqueta->idEtiqueta,$campo[1],$campo[7],$campo[7],$campo[2]);
              }  
              //Salva Material
              $this->objObra->saveMaterial($objEtiqueta->idEtiqueta,$campo[1],$campo[3],'1',$campo[4],$campo[2]);
           }
        }
        $_SESSION["camposMarc"] = array();
        $go = $this->manager->getActionURL('biblioteca','main:catalogacao:catalogacaoPergamum',$item,Array('event'=>'AtualizarAcervo'));
        $this->page->redirect($go);
    }
    
    function btnAtualizarCampo_click(){
        
    }
    
}

?>