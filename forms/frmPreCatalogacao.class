<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versÃ£o 2 da Licença.
 *
 * Este programa é distribuí­do na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título "LICENCA.txt",
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?
class frmPreCatalogacao extends MFormAjax
{
    var $objObra;
    var $objAutor;
    var $objGenero;
    var $objSimples;
    var $objEditora;
    var $SelCalss;

    function __construct()  // construtor da Classe
    {
        global $MIOLO,$module;

        //Instancia o objeto precatalogacao
        $this->objObra = $MIOLO->GetBusiness($module,'obra');
        $this->objAutor = $MIOLO->GetBusiness($module,'autor');
        $this->objGenero = $MIOLO->GetBusiness($module,'genero');
        $this->objSimples = $MIOLO->GetBusiness($module,'pesquisasimples');
        $this->SetIcon($MIOLO->GetUi()->GetImage('adm','documento_mini.png'));

        // Título do Formulário
        parent::__construct('Pré-Catalogação da Biblioteca');

        //Chama o CreateFileds, etc.
        $this->EventHandler();

        // Botão "enviar" não aparece
        $this->defaultButton = false;

        // Botão 'fechar', direcionando para o handler biblioteca/main/catalogacao
        $this->SetClose($this->manager->GetActionURL($module, 'main:catalogacao'));
        $this->page->addJsCode(file_get_contents(dirname(__FILE__).'/js/frmPreCatalogacao.js'));
        $this->page->AddJsCode(file_get_contents(dirname(__FILE__) . '/../ui/js/mask.js'));
    }
     
    function CreateFields()
    {
        global $MIOLO, $page, $module, $context, $history ;
         
      	$ui = $MIOLO->GetUI();
        $query = $this->objGenero->ListGenero();

        // Verifica se existe algum gênero já cadastrado.
        if ($query->result == NULL)
        {
            $go = $this->manager->GetActionURL('biblioteca','main:catalogacao','','');
            $this->manager->Error("Falta cadastrar Gênero.", $go);
        }
        else
        {
            for($i = 0; $i < count($query->result); $i++)
            {
                // Periodicos possui um módulo a parte pra catalogar              
                if ((strtoupper($query->result[$i][1])  != "PERíODICO")   and  (strtoupper($query->result[$i][1])  != 'PERIODICO')
                and    (strtoupper($query->result[$i][1])  != 'PERIODICOS'))  
                {
                    $generos[$query->result[$i][0]] = $query->result[$i][0] . ' - ' . $query->result[$i][1];
                }
            }

            //$assunto = array('Info','Mat');
            $tipoClass = array('CDD','CDU');
             
            $tipoISBN = array('ISBN dez digitos','ISBN treze digitos');
             
            $url = $this->manager->getActionUrl('biblioteca','ajaxhandler');            

            $fields = Array (
            new TextField('edtISBN','','ISBN',17),
            new MlookupFieldValue('lkpautor','','Autor',45,'Pesquisar ou inserir novo autor'),
            new HiddenField('idautor'),
            new MHiddenField('ocorrencia',''),
            new TextField('edtTitulo','','Título',60),
            new TextField('edtSubtitulo','','Subtítulo',20),
         
            new TextField('edtCutter','','Cutter',6),
            new MButton('bntGeraCutter','Gerar Cutter',"buscaCutter('$url','lkpautor','edtTitulo','');"),          
            new TextField('edtEdicao','2 ed.','Edição',10,'Campo opcional'),
            new MlookupFieldValue('lkpEditora','','Editora',58,''),

            new MLookupFieldValue('lkpMunicipio','','Local de Publicação',50,'Pesquisar'),

            new TextField('numero','','Ano de Publicação',4,'Somente o ano. Ex.: 2012'),
            new TextField('edtDescFisica','','Descrição Física',20),
            new Selection('selGenero','','Genero',$generos),
            new HiddenField('ideditora'),
            new Selection('selClass','','Tipo de classificação',$tipoClass),
            new TextField('edtCddCdu','','Classificação',20),
            );
            $this->SetFields($fields);


  //          $this->edtISBN->addAttribute('onKeyUp','makeMask(this, \'###-##-###-####-#\');');
  //          $this->edtISBN->addAttribute('onBlur','makeMask(this,  \'###-##-###-####-#\');');
            $this->edtISBN->addAttribute('maxlength',17);
            $this->numero->addAttribute('maxlength',4);
            $this->edtTitulo->addAttribute("onChange","buscaCutter('$url','lkpautor','edtTitulo');");
            $this->SetFields($fields);

            //As 4 propriedades de um lookup
            // module = módulo usado
            // item = A funcao que chama no arquivo classes/lookup.class
            // event = O evento relacionado quando o usuário clica em "acao"
            // related = Os campos retornados após a ação
            $this->SetFieldAttr('lkpautor','module','biblioteca');
            $this->SetFieldAttr('lkpautor','item','autor');                // Metodo
            //  		$this->SetFieldAttr('lkpautor','event','btnConsulta:click');
            $this->SetFieldAttr('lkpautor','event','filler');
            $this->SetFieldAttr('lkpautor','related','idautor,lkpautor');
            //    $this->SetFieldAttr('lkpautor','related','idautor,lkpautor');
            //$this->SetFieldAttr("lkpautor",'event',"onChange","buscaCutter('$url','$aguarde','lkpautor','edtTitulo');");

            //Lookup Local de publicacao de obra    //
            $this->SetFieldAttr('lkpMunicipio','module','common');
            $this->SetFieldAttr('lkpMunicipio','item','municipio');
            $this->SetFieldAttr('lkpMunicipio','event','filler');
            $this->SetFieldAttr('lkpMunicipio','related','idMunicipio,lkpMunicipio');

            // 4 propiedades do lookup
            $this->SetFieldAttr('lkpEditora','module','biblioteca');
            $this->SetFieldAttr('lkpEditora','item','editora');
            $this->SetFieldAttr('lkpEditora','event','filler');
            $this->SetFieldAttr('lkpEditora','related', 'ideditora,lkpEditora');


            $this->idautor->addAttribute("onChange","buscaCutter('$url','lkpautor','edtTitulo');");
                          
            $validators = array(
            new MRequiredValidator('edtISBN'),
            new MRequiredValidator('edtTitulo'),
            new MRequiredValidator('lkpEditora'),
            new MRequiredValidator('lkpMunicipio'),
            new MRequiredValidator('numero'),
            new MRequiredValidator('edtDescFisica'),
            new MRequiredValidator('selGenero','Genero',15),
            new RequiredValidator('selClass','Tipo de classificação',15),
            new MRequiredValidator('edtCddCdu'),            
            );
            $this->SetValidators($validators);

            // Botões Do formulário
            $buttons = Array(
            new FormButton('btnIncluir', 'Gravar'),
            new Spacer(1),            
            new MButtonWindow('btnEditora', 'Nova Editora', $MIOLO->GetActionURL($module,'main:admin:editora', 'editora', '')),

            );
             
            $this->AddValidator(new RequiredValidator('lkpEditora'));
            //Insere os Botões
            $this->SetButtons($buttons);

            //Definindo o foco
            if (!($this->GetFieldValue('edtISBN')))
            {
                $this->page->onLoad("MIOLO_GetElementById('edtISBN').focus();");
            }
        }
    }


    // pega os dados que estão no formulário   -DATA: 25/11/2009- Alterado a ordem dos campos, seguindo agora o padrão do MARC
    function GetData()
    {
        $data = new FormData();

        $data->idautor = $this->GetFieldValue('idautor');
        $data->titulo = trim($this->objSimples->RetirarCaracteresEspeciais($this->GetFieldValue('edtTitulo')));
        $data->subtitulo = trim($this->objSimples->RetirarCaracteresEspeciais($this->GetFieldValue('edtSubtitulo')));
        $data->edicao = trim($this->objSimples->RetirarCaracteresEspeciais($this->GetFieldValue('edtEdicao')));
        $data->localdepublicacao = trim($this->objSimples->RetirarCaracteresEspeciais($this->GetFieldValue('lkpMunicipio')));
        $data->editora = trim($this->objSimples->RetirarCaracteresEspeciais($this->GetFieldValue('lkpEditora')));
        $data->ideditora = $this->GetFieldValue('ideditora');
        $data->datadepublicacao = trim($this->objSimples->RetirarCaracteresEspeciais($this->GetFieldValue('numero')));
        $data->descfisica = trim($this->objSimples->RetirarCaracteresEspeciais($this->GetFieldValue('edtDescFisica')));
        $data->idgenero = $this->GetFieldValue('selGenero');
        $data->keygenero = $this->GetFieldValue('selGenero');
        $data->edicao = eregi_replace("[ªº°]","",$data->edicao);

        //  Preenche o Tipo de Classificação CDD ou CDU   01/07/2010
        $data->keytipo = ($this->GetFieldValue('selClass'));
        $data->cdu = $this->GetFieldValue('edtCddCdu');
        $data->cdd = $this->GetFieldValue('edtCddCdu');
        $data->isbn = $this->GetFieldValue('edtISBN');
        $data->cutter = $this->GetFieldValue('edtCutter');
        return $data;
    }


    // usada para inserir valores no formulário
    function SetData($data)
    {
        $this->SetFieldValue('idautor',$data->idautor);     
        $this->SetFieldValue('ideditora',$data->ideditora);
        $this->SetFieldValue('lkpEditora',$data->descricao);
        $this->SetFieldValue('edtISBN',$data->isbn);
    }



    // Consulta: função chamada após o usuário usar o lookup
    function btnConsulta_click($sender,$ideditora)
    {
        global $MIOLO,$module,$item;

        //A linha abaixo verifica se existe um ideditora
        //Se nao existir, ela tenta pegar $item que é passada
        //pelo botao editar do "relação"
        $ideditora = ($ideditora != '') ? $ideditora : $item;

        // Já considera que o usuário quer excluir,editar uma editora
        //	$this->SetButtonAttr('btnExcluir','visible',true);
        //	$this->SetButtonAttr('btnEnviar','label','Salvar');

        //Instancia o objeto editora
        $this->objEditora = $MIOLO->GetBusiness($module,'editora');
        // ok retorna os dados de ideditora
        $ok = $this->objEditora->GetByCodigo($ideditora);

        // este é o setdata deste arquivo. não é o setdata da classe de negócios
        // veja que é $this->SetData e nao $this->objEditora->SetData
        $this->SetData($ok);

    }

    // Inserir dados
    function btnIncluir_click()
    {
        // Validação dos campos
        if( strlen(trim(Form::GetFormValue('edtISBN'))) < 13)
        {
            $this->AddError('Informe o campo ISBN corretamente.');
        }
        elseif (!($this->TestaISBN())     and   ((Form::GetFormValue('edtISBN') == 0 ) ))
        {
            $this->AddError('Preencha o campo ISBN.');

        }
        elseif( strlen(trim(Form::GetFormValue('edtTitulo'))) < 3 )
        {
            $this->AddError('O Titulo precisa ser cadastrado corretamente.');
        }
        elseif( (Form::GetFormValue('lkpEditora') == '') or (Form::GetFormValue('ideditora') == ''))
        {
            $this->AddError('Selecione o editora.');
        }
        elseif( Form::GetFormValue('lkpMunicipio') == '')
        {
            $this->AddError('Selecione o Local de publicação.');
        }
        elseif( Form::GetFormValue('numero') == '')
        {
            $this->AddError('Selecione o Ano de publicação.');
        }
        elseif( (Form::GetFormValue('numero')!='') and preg_match("/\D/", Form::GetFormValue('numero')) )
        {
            $this->AddError('O campo Ano deve ser um numerico.');
        }
        elseif( strlen(trim(Form::GetFormValue('edtDescFisica'))) < 2 )
        {
            $this->AddError('Informe a Descrição Fisica corretamente.');
        }
        elseif(Form::GetFormValue('selGenero') == '')
        {
            $this->AddError('Selecione o Genero.');
        }
        elseif(Form::GetFormValue('selClass') == '')
        {
            $this->AddError('Selecione a Classificação.');
        }

        elseif( Form::GetFormValue('edtCddCdu') == '' )
        {
            $this->AddError('Informe o campo Cdu ou CDD.');
        }

        elseif( strlen(trim(Form::GetFormValue('edtCddCdu'))) < 1 )
        {
            $this->AddError('Informe o campo Cdu ou CDD corretamente.');

        }
        else if (!($this->TestaCDD())   and   ((Form::GetFormValue('selClass') == 0 ) ))
        {
            $this->AddError('Preencha o campo Cdd apenas com numeros ou com numeros e pontos.');
        }
        else
        {
            global $MIOLO,$module,$item;
            $data = $this->GetData();

            if($this->getFormValue('idobra')==null){

                $data->idobra = $this->objObra->GetNextIdObra();
                $data->numerodaobra = $this->objObra->GetNextNumeroObra();
                $ficha008 = date('ymd') . '                 r               d';
                
                try
                {
                    $this->objObra->saveObra($data);                    
                    $this->objObra->saveSubFicha($ficha008, '008');
                    

                    //saveAutorObraCutter - tratamento do Autor  - rever 06/06/2012
       	            //$idetiqueta =52;   //Referente ao cutter
                    //	teste    $conteudo='B2323';
                    //  $ocorrencia = 0;
                    //  $this->objAutor->saveAutorObraCutter($data->idautor,$data->idobra ,$conteudo,$ocorrencia+1,$idetiqueta);
                }
                catch (Exception $e)
                {
                    $this->addError($e->getMessage());
                }
                $msg = "Obra " . $data->numerodaobra . " inserida com sucessoooo. Deseja ir para Catalogação?";
                $MIOLO->Prompt(Prompt::Question($msg,$MIOLO->GetActionURL($module,  'main:catalogacao:catalogacao:catalogacaoobra:catalogacaofichaobra', $data->idobra, ''),
                //$MIOLO->GetActionURL($module,"main:catalogacao:catalogacaodireta&item=$data->idobra")));
                $MIOLO->GetActionURL($module,"main:catalogacao:precatalogacao")));
            }else{
                try
                {
                    $this->objObra->updateObra($data);
                }
                catch (Exception $e)
                {
                    $this->addError($e->getMessage());
                }
                $msg = "Obra " . $data->numerodaobra . " alterada com sucesso. Deseja ir para Catalogação?";
                $MIOLO->Prompt(Prompt::Question($msg,$MIOLO->GetActionURL($module,'main:catalogacao:catalogacao:catalogacaoobra:catalogacaofichaobra', $data->idobra, ''),
                $MIOLO->GetActionURL($module,"main:catalogacao:precatalogacao&item=$data->idobra")));
            }
            /*
             //retirar

             $data = $this->GetData();
             $this->objAutor = $MIOLO->GetBusiness($module,'autor');
             $data->idobra = $this->objObra->GetNextIdObra();
             $data->numerodaobra = $this->objObra->GetNextNumeroObra();
             //já grava o 008 na pré-catalogação
             $ficha008 = date('ymd') . '                 r               d';

             try
             {
             $this->objObra->saveObra($data);
             $this->objObra->saveSubFicha($ficha008, '008');
             if($data->idautor != NULL)
             {
             $ocorrencia = $this->GetFieldValue('ocorrencia');
             $idetiqueta = $this->objAutor->GetEtiquetaById($data->idautor);
            	$this->objAutor->saveAutorObra($data->idautor,$data->idobra,$ocorrencia+1,$idetiqueta);

            	//saveAutorObraCutter - tratamento do Autor  - rever 06/06/2012

            	$this->objAutor->saveAutorObraCutter($data->idautor,$data->idobra,$ocorrencia+1,$idetiqueta);



            	}
            	$msg = "Obra " . $data->numerodaobra . " inserida com sucesso. Deseja ir para Catalogação?";


            	$MIOLO->Prompt(Prompt::Question($msg,$MIOLO->GetActionURL($module,'main:catalogacao:catalogacao:catalogacaoobra:catalogacaofichaobra', $data->idobra, ''),$MIOLO->GetActionURL($module,'main:catalogacao:precatalogacao')));

            	//var_dump($this->listURL);

            	//$MIOLO->GetActionURL($module,'main:admin:autor', 'autor', '')
            	////$lookup->AddFilterField( new MButtonWindow('btnMarc', 'MARC', $MIOLO->GetActionURL($module = $module, 'marc', $this->idAutor)));


            	}
            	catch (Exception $e)
            	{
            	$this->addError($e->getMessage());
            	}



            	//retirar
            	*/
        }

    }


    function TestaISBN()
    {

        $ok = false;
        if( strlen(trim(Form::GetFormValue('edtISBN'))) == 17)
        {
            $this->edtISBN->addAttribute('onKeyUp','makeMask(this, \'###-##-###-####-#\');');
            $this->edtISBN->addAttribute('onBlur','makeMask(this,  \'###-##-###-####-#\');');
            $this->edtISBN->addAttribute('maxlength',17);
            $this->numero->addAttribute('maxlength',4);
            $ok = true;
             
        }
        else
        {
            $this->edtISBN->addAttribute('onKeyUp','makeMask(this, \'##-###-####-#\');');
            $this->edtISBN->addAttribute('onBlur','makeMask(this,  \'##-###-####-#\');');
            $this->edtISBN->addAttribute('maxlength',14);
            $this->numero->addAttribute('maxlength',4);
            $ok = true;

        }
        return $ok;

    }





    function TestaCDD()
    {


        if    (preg_match("/[a-z]/",Form::GetFormValue('edtCddCdu')))
        {

            //Existem letras
            $ok = false;



        }else


        {

            if(

            (Form::GetFormValue('selClass') == 0 )  and  (substr_count(Form::GetFormValue('edtCddCdu'),".") != 0)
            )

            {
                 
                $ok = true;

            }else
            {

                // var_dump(' só tem numeros');

                $ok = true;

            }

        }

        return $ok;

    }







    // Inserir dados
    function btnIncluir2_click()
    {

        // Validação dos campos
        /*
         if( strlen(trim(Form::GetFormValue('edtISBN'))) < 14)
         {
         $this->AddError('Informe o campo ISBN.');
         }
         elseif(( Form::GetFormValue('lkpautor') == '') or (Form::GetFormValue('idautor') == ''))
         {
         $this->AddError('Informe o Autor . ');
         }
         elseif( strlen(trim(Form::GetFormValue('edtTitulo'))) < 3 )
         {
         $this->AddError('O Titulo precisa ser cadastrado corretamente.');
         }
         elseif( (Form::GetFormValue('lkpEditora') == '') or (Form::GetFormValue('ideditora') == ''))
         {
         $this->AddError('Selecione o editora.');
         }
         elseif( Form::GetFormValue('lkpMunicipio') == '')
         {
         $this->AddError('Selecione o Local de publicação.');
         }
         elseif( Form::GetFormValue('numero') == '')
         {
         $this->AddError('Selecione o Ano de publicação.');
         }
         elseif( (Form::GetFormValue('numero')!='') and preg_match("/\D/", Form::GetFormValue('numero')) )
         {
         $this->AddError('O campo Ano deve ser um numerico.');
         }
         elseif( strlen(trim(Form::GetFormValue('edtDescFisica'))) < 2 )
         {
         $this->AddError('Informe a Descrição Fisica corretamente.');
         }
         elseif(Form::GetFormValue('selGenero') == '')
         {
         $this->AddError('Selecione o Genero.');
         }
         elseif(Form::GetFormValue('selClass') == '')
         {
         $this->AddError('Selecione a Classificação.');
         }

         elseif( Form::GetFormValue('edtCddCdu') == '' )
         {
         $this->AddError('Informe o campo Cdu ou CDD.');
         }

         elseif( strlen(trim(Form::GetFormValue('edtCddCdu'))) < 2 )
         {
         $this->AddError('Informe o campo Cdu ou CDD corretamente.');

         */
         
         
         
         
        //		}


        //else
        //  {


        global $MIOLO,$module;

        $data = $this->GetData();
        $data->idobra = $this->objObra->GetNextIdObra();
        $data->numerodaobra = $this->objObra->GetNextNumeroObra();

        //já grava o 008 na pré-catalogação
        $ficha008 = date('ymd') . '                 r               d';

        try
        {
            $this->objObra->saveObra($data);
            $this->objObra->saveSubFicha($ficha008, '008');
            if($data->idautor != NULL)
            {
                $ocorrencia = $this->GetFieldValue('ocorrencia');
                $idetiqueta = $this->objAutor->GetEtiquetaById($data->idautor);
                $this->objAutor->saveAutorObra($data->idautor,$data->idobra,$ocorrencia+1,$idetiqueta);

                //saveAutorObraCutter - tratamento do Autor  - rever 06/06/2012
                $this->objAutor->saveAutorObraCutter($data->idautor,$data->idobra,$ocorrencia+1,$idetiqueta);
                 
            }
            $msg = "Obra " . $data->numerodaobra . " inserida com sucesso. Deseja ir para Catalogação?";


            $MIOLO->Prompt(Prompt::Question($msg,$MIOLO->GetActionURL($module,'main:catalogacao:catalogacao:catalogacaoobra:catalogacaofichaobra', $data->idobra, ''),$MIOLO->GetActionURL($module,'main:catalogacao:precatalogacao')));

            //var_dump($this->listURL);

            //$MIOLO->GetActionURL($module,'main:admin:autor', 'autor', '')
            ////$lookup->AddFilterField( new MButtonWindow('btnMarc', 'MARC', $MIOLO->GetActionURL($module = $module, 'marc', $this->idAutor)));
             

        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }

    }

    //  }




    function btnList_click()
    {
        global $MIOLO, $module, $self, $theme, $action, $page;



        $MIOLO->Prompt(Prompt::Question($msg,$MIOLO->GetActionURL($module,'main:catalogacao:catalogacao:catalogacaoobra:catalogacaofichaobra', $data->idobra, ''),$MIOLO->GetActionURL($module,'main:catalogacao:precatalogacao')));

        ?>

<a href="/index.php?module=biblioteca&action=main:admin:editora">
Inserir Editora</a>
<br>

        <?


    }




    // Consulta: função chamada após o usuário usar o lookup
    //	function btnConsulta_click($lkpautor,$hidKey)
    //	{
    //		global $MIOLO,$module, $item ,$prenome;


    //$prenome = $lkpautor->getFilterValue('prenome');

    //A linha abaixo verifica se existe um idautor
    //Se nao existir, ela tenta pegar $item que é passada
    //pelo botao editar do "relação"
    //$idautor = ($hidKey != '') ? $hidKey : $item;


    // ok retorna os dados de idautor
    //	$ok = $this->objAutor->GetByCodigo($hidKey);

    //    var_dump($ok);
    // este é o setdata deste arquivo. não é o setdata da classe de negócios
    // veja que é $this->SetData e nao $this->objAutor->SetData
    //	$this->SetData($ok);

    //   $this->SetFieldAttr('lkpautor','readonly',true);
     
    //	}

}






function TestaISBN2()
{


    if    (preg_match("/[a-z]/",Form::GetFormValue('edtCddCdu')))
    {

        //Existem letras
        $ok = false;



    }else


    {

        if(

        (Form::GetFormValue('selClass') == 0 )  and  (substr_count(Form::GetFormValue('edtCddCdu'),".") != 0)
        )

        {


            $ok = true;

             

        }else
        {

            // var_dump(' só tem numeros');

            $ok = true;

             


        }





    }

    return $ok;

}

?>
