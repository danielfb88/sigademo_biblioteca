<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php

require_once 'codigobarra.class';


if (!function_exists('str_split')) {
    require_once 'PHP/Compat.php';
    PHP_Compat::loadFunction('str_split');
}

class Image_Barcode_Code39 extends BusinessBibliotecaCodigoBarra
{
    
    var $_type = 'Code39';
    var $_barcodeheight = 50;    
    var $_barthinwidth = 1;  
    var $_barthickwidth = 3;
    var $_coding_map = array(
        '0' => '000110100',
        '1' => '100100001',
        '2' => '001100001',
        '3' => '101100000',
        '4' => '000110001',
        '5' => '100110000',
        '6' => '001110000',
        '7' => '000100101',
        '8' => '100100100',
        '9' => '001100100',
        'A' => '100001001',
        'B' => '001001001',
        'C' => '101001000',
        'D' => '000011001',
        'E' => '100011000',
        'F' => '001011000',
        'G' => '000001101',
        'H' => '100001100',
        'I' => '001001100',
        'J' => '000011100',
        'K' => '100000011',
        'L' => '001000011',
        'M' => '101000010',
        'N' => '000010011',
        'O' => '100010010',
        'P' => '001010010',
        'Q' => '000000111',
        'R' => '100000110',
        'S' => '001000110',
        'T' => '000010110',
        'U' => '110000001',
        'V' => '011000001',
        'W' => '111000000',
        'X' => '010010001',
        'Y' => '110010000',
        'Z' => '011010000',
        '-' => '010000101',
        '*' => '010010100',
        '+' => '010001010',
        '$' => '010101000',
        '%' => '000101010',
        '/' => '010100010',
        '.' => '110000100',
        ' ' => '011000100'
    );

   
    function Image_Barcode_Code39( $text = '', $wThin = 0, $wThick = 0 )
    {
        if ( $this->checkInvalid( $text ) ) {
            return false;
        }

        $this->text = $text;
        if ( $wThin > 0 ) $this->_barthinwidth = $wThin;
        if ( $wThick > 0 ) $this->_barthickwidth = $wThick;

        return true;
    }

   
    function plot($noText = false, $bHeight = 0)
    {
       $final_text = '*' . $this->text . '*';

        if ( $bHeight > 0 ) {
            $this->_barcodeheight = $bHeight;
        }

       $barcode = '';
       foreach ( str_split( $final_text ) as $character ) {
           $barcode .= $this->_dumpCode( $this->_coding_map[$character] . '0' );
       }

       $barcode_len = strlen( $barcode );

       $img = imagecreate( $barcode_len, $this->_barcodeheight );

       $black = imagecolorallocate( $img, 0, 0, 0 );
       $white = imagecolorallocate( $img, 255, 255, 255 );
       $font_height = ( $noText ? 0 : imagefontheight( "gdFontSmall" ) );
       $font_width = imagefontwidth( "gdFontSmall" );


       imagefill( $img, 0, 0, $white );

       $xpos = 0;

        if ( $noText ) {
            foreach (str_split($barcode) as $character_code ) {
                if ($character_code == 0 ) {
                        imageline($img, $xpos, 0, $xpos, $this->_barcodeheight, $white);
                } else {
                        imageline($img, $xpos, 0, $xpos, $this->_barcodeheight, $black);
                }

                $xpos++;
            }
        } else {
            foreach (str_split($barcode) as $character_code ) {
                if ($character_code == 0) {
                    imageline($img, $xpos, 0, $xpos, $this->_barcodeheight - $font_height - 1, $white);
                } else {
                    imageline($img, $xpos, 0, $xpos, $this->_barcodeheight - $font_height - 1, $black);
                }

                $xpos++;
            }

            imagestring(
                $img,
                'gdFontSmall',
                ( $barcode_len - $font_width * strlen( $this->text ) )/2,
                $this->_barcodeheight - $font_height,
                $this->text,
                $black
            );
        }

        return $img;
    }


    function &draw($text, $imgtype = 'png', $noText = false, $bHeight = 0)
    {
        if ($this->checkInvalid($text)) {
            return PEAR::raiseError('Invalid text');
        }

        $this->text = $text;
        $img = &$this->plot($noText, $bHeight);

        return $img;
    }

    function _dumpCode($code)
    {
        $result = '';
        $color = 1; 

        foreach ( str_split( $code ) as $bit ) {
            $result .= ( ( $bit == 1 ) ? str_repeat( "$color", $this->_barthickwidth ) : str_repeat( "$color", $this->_barthinwidth ) );
            $color = ( ( $color == 0 ) ? 1 : 0 );
        }

        return $result;
    }

    function checkInvalid($text)
    {
        return preg_match( "/[^0-9A-Z\-*+\$%\/. ]/", $text );
    }
}
?>
