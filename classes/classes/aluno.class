<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>
<?php
/**
* @package SIGA
* @subpackage Biblioteca
* @author SETEC/MEC
*/

class BusinessBibliotecaAluno extends Business
{
	var $aluno;
	var $anoconcl2gr;
	var $escola2g;
	var $cidade2g;
	var $pais2g;
	var $anoingresso;
	var $semingresso;
	var $idtipoingresso;
	var $idmotivosaida;
	var $idsituacao;
	var $idinstituicao;
	var $idinstituicaodest;
	var $idpessoa;
	var $obs;
	var $obsperiodo;

    function BusinessBibliotecaAluno($data=null)
    {
       $this->Business('sigaept', $data);
       
       if ($data)
       {
          $this->SetData($data);
       }
    }

	function SetData($data)
	{
		$this->matricula 	= $data->matricula;
		$this->anoconcl2gr 	= $data->anoconcl2gr;
		$this->escola2g		= $data->escola2g;
		$this->cidade2g		= $data->cidade2g;
		$this->pais2g   	= $data->pais2g;
		$this->anoingresso      = $data->anoingresso;      
		$this->semingresso      = $data->semingresso;      
		$this->idtipoingresso	= $data->idtipoingresso;    
		$this->idmotivosaida	= $data->idmotivosaida;     
		$this->idsituacao	= $data->idsituacao; 
		$this->idinstituicao	= $data->idinstituicao;
		$this->idinstituicaodest	= $data->idinstituicaodest;
		$this->idpessoa		= $data->idpessoa;      
		$this->obs = $data->obs;
		$this->obsperiodo = $data->obsperiodo;
	}

	function &sqlAllFields()
	{
		return new sql('matricula,anoconcl2gr,escola2g,cidade2g,pais2g,anoingresso,semingresso,idtipoingresso,idmotivosaida,idsituacao,idinstituicao,idinstituicaodest,idpessoa,obs,obsperiodo','ga_aluno');	
	}

    function GetById($matricula)
    {
		$sql = new sql('t.matricula, t.anoconcl2gr,t.escola2g, t.cidade2g, t.pais2g, t.anoingresso, t.semingresso, t.idtipoingresso, t.idmotivosaida, t.idmotivosaida, t.idsituacao, t.idinstituicao,idinstituicaodest, t.idpessoa, t.obs, t.obsperiodo','ga_aluno t','t.matricula = ?');
            
        $query = $this->objQuery($sql->Select($matricula));
        
        if ( $query )
        {
            $this->matricula        = $query->fields('matricula');
            $this->anoconcl2gr      = $query->fields('anoconcl2gr');
            $this->escola2g			= $query->fields('escola2g');
            $this->cidade2g         = $query->fields('cidade2g');
            $this->pais2g           = $query->fields('pais2g');
            $this->anoingresso      = $query->fields('anoingresso');
            $this->semingresso      = $query->fields('semingresso');
            $this->idtipoingresso   = $query->fields('idtipoingresso');
            $this->idmotivosaida    = $query->fields('idmotivosaida');
            $this->idsituacao       = $query->fields('idsituacao');
            $this->idinstituicao    = $query->fields('idinstituicao');
            $this->idinstituicaodest= $query->fields('idinstituicaodest');
            $this->idpessoa         = $query->fields('idpessoa');
            $this->obs         		= $query->fields('obs');
            $this->obsperiodo       = $query->fields('obsperiodo');
        }
        return $this;
    }

    function GetByGroup($group=null)
    {
        if ( $group )
        {
	        $sql = 'select distinct t.matricula, t.anoconcl2gr, t.escola2g, t.cidade2g, t.pais2g, t.anoingresso, t.semingresso, t.idtipoingresso, t.idmotivosaida, t.idmotivosaida, t.idsituacao, t.idinstituicao, t.idpessoa' .
	               '   from ga_aluno t'.
        	       '   where t.matricula = ? ';
                   
           $args[] = $group;
        }
        else
        {
	        $sql = 'select distinct t.matricula, t.anoconcl2gr, t.escola2g, t.cidade2g, t.pais2g, t.anoingresso, t.semingresso, t.idtipoingresso, t.idmotivosaida, t.idmotivosaida, t.idsituacao, t.idinstituicao, t.idpessoa' .
       		       '   from ga_aluno t'.
        	       '   where t.matricula = ? ';
        }
        
        $query = $this->objQuery($sql, $args);
        
        return $query;
    }
    
    function Insert()
    {
	       
        
		$sql = $this->sqlAllFields();
		$args = array($this->matricula,
                      $this->anoconcl2gr,
		     		  $this->escola2g,
           		      $this->cidade2g,
		              $this->pais2g,
                      $this->anoingresso,
                      $this->semingresso,
                      $this->idtipoingresso,
                      $this->idmotivosaida,
                      $this->idsituacao,
                      $this->idinstituicao,
                      $this->idinstituicaodest,
                      $this->idpessoa,
					  $this->obs,
					  $this->obsperiodo);
	$ok = $this->Execute($sql->Insert($args));
	
	return $ok;
	
    }

    function Update()
    {
        $sql = new sql('anoconcl2gr, escola2g, cidade2g, pais2g, anoingresso, semingresso, idtipoingresso, idmotivosaida, idsituacao, idinstituicao,idinstituicaodest,obs,obsperiodo','ga_aluno','matricula = ?');
	       
        $args = array($this->anoconcl2gr,
		      $this->escola2g,
		      $this->cidade2g,
		      $this->pais2g,
                      $this->anoingresso,
                      $this->semingresso,
                      $this->idtipoingresso,
                      $this->idmotivosaida,
                      $this->idsituacao,
                      $this->idinstituicao,
                      $this->idinstituicaodest,
					  $this->obs,
					  $this->obsperiodo,
		      $this->matricula);
//       var_dump($sql->Update($args)); 
        $ok = $this->Execute($sql->Update($args));
		return $ok;
    }
    
	function isAtivo($login=null)
	{
		if( substr($login,0,3) == 'CTU' )
		{
			return true;
		}
		else
		{
			$sql = new sql('t.tipocurso','ga_tipocurso t, ga_curso c, ga_programa p','p.matricula = ? and p.curso = c.curso and c.idtipocurso = t.idtipocurso');
			$query0 = $this->Query($sql,$this->matricula);

			if($query0->result[0][0] == 'GRADUAÇÃO')
			{
				$sql = new sql('m.matricula','ga_matricula m, ga_turma t','m.idturma = t.idturma and t.ano = ? and t.semestre = ? and m.matricula = ?');
				$args = array($this->getAnoMatricula(),$this->getSemestreMatricula(),$this->matricula);
				$query = $this->Query($sql,$args);
				return ! $query->eof();
			}
			else
			{
				$sql = new sql('m.matricula','ga_matricula m, ga_turma t','m.idturma = t.idturma and m.matricula = ?');
				$args = array($this->matricula);
				$query = $this->Query($sql,$args);
				return ! $query->eof();
			}
		}

/*		
			$sql = new sql('s.situacao','ga_aluno a, ga_situacao s','s.idsituacao = a.idsituacao and a.matricula = ?');
			$query = $this->Query($sql,$this->matricula);
			if($query->result[0][0] == 'Ativo')
			{
				return true;
			}
			else
			{
				return false;
			}
*/
	}

	function isSituacaoAtivo($login=null)
	{
/* Alunos do CTU estão no SIGA. Será verificada a sua situação (ativo).
		if( substr($login,0,3) == 'CTU' )
		{
			return true;
		}
		else
		{
*/
			$sql = new sql('s.situacao','ga_aluno a, ga_situacao s','s.idsituacao = a.idsituacao and a.matricula = ?');
			$query = $this->Query($sql,$login);

			if($query->result[0][0] == 'Ativo')
			{
				return true;
			}
			else
			{
				return false;
			}
//		}
	}

	function GetSituacaoAluno($login=null)
	{
/* Alunos do CTU estão no SIGA. Será verificada a sua situação (ativo).
		if( substr($login,0,3) == 'CTU' )
		{
			return 'Ativo';
		}
		else
		{
*/
			$sql = new sql('s.situacao','ga_aluno a, ga_situacao s','a.idsituacao = s.idsituacao and a.matricula = ?');
			$query = $this->Query($sql,$login);
			return $query->result[0][0];
//		}
	}

	function AlteraSituacao()
    {
        $sql = new sql('idsituacao','ga_aluno','matricula = ?');
        $args = array($this->idsituacao,
		      $this->matricula);
        $ok = $this->Execute($sql->Update($args));
        return $ok;
    }

	function GetSituacao()
	{
		$sql = new sql('s.idsituacao, s.situacao','ga_aluno a, ga_situacao s','a.idsituacao = s.idsituacao and a.matricula = ?');
		$query = $this->ObjQuery($sql->Select($this->matricula));
		$situacao->id = $query->result[0][0];
		$situacao->nome = $query->result[0][1];
		return $situacao;
	}
   
    function Delete()
    {
        $sql[] = $this->Prepare(' delete from ga_aluno where matricula=?', $this->matricula);
        $ok = $this->Execute( $sql );
        return $ok;
    }

    function ListRange(&$range)
    {

        $sql = "select distinct t.matricula, p.nome " .
	       "   from ga_aluno t, cm_pessoa p ".
           " where p.idpessoa = t.idpessoa " .
               "   order by t.matricula ";
        $query = $this->objQueryRange($sql,$range);
        return $query;
    }

	function ListAll()
    {
		$range = FALSE;
		return $this->ListRange($range);
    }

    function CountWhere($where='')
    {
        $sql = ' select * from ga_aluno ';
        if ( is_array($where) )
        {
		 	$sql .= " where ";
            foreach($where as $w)
            {  
		 	$sql .= key($w) . " = ? ";
			$sql = $this->Prepare($sql, $w);
            }
		}
        return $this->db->Count($sql);
    }

	function GetByAluno($matricula)
	{
		$this->GetByAluno($matricula);
	}
       

//Métodos que procuram encapsular os "casos de uso" da classe
   function GetPessoa()
   {
   /*
     Método que retorna uma objeto pessoa cujo idpessoa é igual ao atributo idpessoa do aluno atual
   */
        global $MIOLO, $module;

        $pessoa = $MIOLO->GetBusiness('common', 'pessoa');
        $pessoa->GetById($this->idpessoa);
        
        return $pessoa;
   }
   function GetAnoMatricula()
   {
        return $this->GetAnoPreMatricula();
   }
   function GetSemestreMatricula()
   {
        return $this->GetSemestrePreMatricula();
   }
   function GetAnoPreMatricula()
   {
        return '2005';
   }
   function GetSemestrePreMatricula()
   {
        return '3';
   }
   function GetPeriodoAtual()
   {
	  global $MIOLO;
       $anoAtual = date("Y",time());
       $periodoAtual = (($anoAtual - $this->anoingresso)+1)*2-($this->semingresso -0);
		//var_dump($periodoAtual,$anoAtual,$this->anoingresso,$this->semingresso);
	/*	  
	  $curso = & $this->GetCurso();
	  $curriculo = $this->GetCurriculo();

	  $objCurriculo = $MIOLO->GetBusiness('sga','Curriculo');
	  $key = $curso->curso.'_'.$curriculo;
	  $objCurriculo->GetById($key);
	*/

      return $periodoAtual;
   }
   

   /* Deprecated	
   function ListHistorico()
   {
        global $MIOLO, $module;
		$historico = $MIOLO->GetBusiness($module,'historico'); 
        
   		$ok = $historico->ListHistorico($matricula);
   		return $ok->result;
   }
   */

	function ListHistorico()
	{
		$sql = new sql("h.disciplina,d.nome,h.situacao,h.nota,h.ano,h.semestre,d.credito,t.turma","ga_historico h, ga_disciplina d, ga_turma t","h.disciplina = d.disciplina AND d.temnota = 'S' and h.matricula = ? and h.idturma = t.idturma(+)","h.ano,h.semestre");
		$query = $this->ObjQuery($sql->Select($this->matricula));
		return $query;
	}

	function GetTotalCreditosPeriodo($ano,$semestre)
	{
	
        global $MIOLO, $module;
        
        $matricula = $MIOLO->GetBusiness($module,'matricula');
		$creditos = $matricula->GetTotalCreditosPeriodo($this->matricula,$ano,$semestre);
		return $creditos;
	}
	
   function ListMatriculas($ano='')
   {
   /*
        Retorna um RecordSet com as matrículas do aluno
   */
        global $MIOLO, $module;
        
        $matricula = $MIOLO->GetBusiness('sga','matricula');
    
	    // ListRange retorna o recordset de matriculas, no intervalo de dados
		// QueryRange é mantido automaticamente pelo MIOLO

	    $rs = $matricula->ListRangeByMatricula($this->matricula,$ano);
        $this->CountMatriculas = count($rs->result);
        
        return $rs->result;
   }

	
	function SQLListMatriculas()
	{
		$sql = new sql("
				t.disciplina,
				t.turma,
				d.nome,
				m.situacao,
				m.nota,
				t.ano,
				t.semestre,
				d.credito
			","
				ga_matricula m,
				ga_disciplina d,
				ga_turma t
			","
				matricula = ?
				AND m.idturma = t.idturma
				AND t.disciplina = d.disciplina
			","
				t.disciplina,
				t.turma
		");
		$sql->parameters = array(
			$this->matricula
		);

		return $sql;
	}

	function qryListMatriculas($ano='',$semestre='')
	{
		$sql = $this->SQLListMatriculas();
		if ( $ano && $semestre )
		{
			$sql->where .= " and t.ano = '$ano' and t.semestre = '$semestre'";
		}
		return $this->ObjQuery($sql->Select());
	}

	function ListIdTurmaDiscMatric()
	{
		$sql = new sql("t.idturma,t.disciplina||' - '||t.turma||' - '||d.nome",'ga_matricula m, ga_turma t, ga_disciplina d','m.idturma = t.idturma and t.disciplina = d.disciplina and m.matricula = ?');
		$query = $this->ObjQuery($sql->Select($this->matricula));
		return $query;
	}
	
	function ListIdTurmaDiscHistorico()
	{
		$sql = new sql("t.idturma,t.disciplina||' - '||t.turma||' - '||d.nome",'ga_historico h, ga_turma t, ga_disciplina d',"h.idturma = t.idturma and t.disciplina = d.disciplina and h.matricula = ? and upper(h.situacao) = 'APROVADO'");
		$query = $this->ObjQuery($sql->Select($this->matricula));
		return $query;
	}
	
   function ListPreMatriculas()
   {
   /*
        Retorna um RecordSet com as matrículas do aluno
   */
        global $MIOLO, $module;
        
        $prematricula = $MIOLO->GetBusiness($module,'prematricula');
    
	    // ListRange retorna o recordset de prematriculas, no intervalo de dados
		// QueryRange é mantido automaticamente pelo MIOLO

	    $rs = $prematricula->ListRangeByMatricula($this->matricula);
        $this->CountPreMatriculas = count($rs);
        
        return $rs;
   }

   function SQLListPreMatriculas()
   {
	$sql = new sql('t.disciplina,d.nome,t.turma','ga_prematricula p,ga_turma t,ga_disciplina d','p.matricula = ? and t.idturma = p.idturma and t.ano = ? and t.semestre = ? and t.disciplina = d.disciplina');
	
	$sql->parameters = array
		(
		$this->matricula,
		$this->GetAnoPreMatricula(),
		$this->GetSemestrePreMatricula()
	);
   	
	return $sql;

   }

	function qryListPreMatriculas()
	{
		$sql = $this->SQLListPreMatriculas();
		return $this->ObjQuery($sql->Select());
		
	}
   function CountMatriculas()
   {
        $count = 0;
        if ($this->matricula)
        {
		   $sql = new sql('count(matricula) as cnt','ga_matricula','matricula = ?');
		   /*$sql = "
		         SELECT 
		             COUNT(matricula) as cnt
		           FROM
		            ga_matricula 
		         WHERE 
		             matricula = ?
		        ";*/
		   $query = $this->objQuery($sql->Select($this->matricula));
           $count = $query->fields('cnt');
        }
		return $count;
   }
   
   function CountMatriculasAnoSemestre()
   {
        $count = 0;
        if ($this->matricula)
        {
		   $sql = new sql('count(m.matricula) as cnt','ga_matricula m, ga_turma t','m.idturma = t.idturma and m.matricula = ? AND t.ano = ? AND t.semestre = ?');
		   $args=array(
		   				$this->matricula,
						$this->GetAnoPreMatricula(),
						$this->GetSemestrePreMatricula()
		   );
           
			$query = $this->objQuery($sql->Select($args));
			$count = $query->fields('cnt');
		}
		return $count;
   }

   function CountTrancamentoAnoSemestre()
   {
        $count = 0;
        if ($this->matricula)
        {
		   $sql = new sql('count(matricula) as cnt','ga_trancamento','matricula = ? AND ano = ? AND semestre = ?');
		   $args=array(
		   				$this->matricula,
						$this->GetAnoPreMatricula(),
						$this->GetSemestrePreMatricula()
		   );
           
			$query = $this->objQuery($sql->Select($args));
			$count = $query->fields('cnt');
		}
		return $count;
   }
	function CountPreMatriculas()
   {
      // $db = $this->GetDatabase();
           
       $sql = new sql('COUNT(matricula)','ga_prematricula','matricula = ?');
           
       $query = $this->objQuery($sql->Select($this->matricula));   
	   return $query->fields('count(matricula)');
//       return $rs[0][0];
   }
   
   function ClearMatriculas()
   {
	   $sql = new sql('t.idturma','ga_matricula m, ga_turma t','t.idturma = m.idturma and m.matricula = ? and t.ano= ? and t.semestre = ?');	          
	   $args = array($this->matricula,$this->GetAnoMatricula(),$this->GetSemestreMatricula());
	   $query = $this->objQuery($sql->Select($args));
       if ($query->nrows)
       {
           $ok = true; 
           foreach($query->result as $r)
           {
              $ok = $ok and $this->DeleteMatricula($r[0]);
           }
       }
       return $ok;
   }
   
   function ClearMatriculasJ23()
   {
	   $sql = new sql('t.idturma','ga_matricula m, ga_turma t','t.idturma = m.idturma and m.matricula = ?');	          
	   $query = $this->objQuery($sql->Select($this->matricula));
       if ($query->nrows)
       {
           $ok = true; 
           foreach($query->result as $r)
           {
              $ok = $ok and $this->DeleteMatricula($r[0]);
           }
       }
       return $ok;
   }
   function ClearPreMatriculas()
   {
	   $sql = new sql('','ga_prematricula','matricula = ?');	           
	   /*
       $sql = "
                DELETE FROM 
                   ga_prematricula 
                WHERE 
                    matricula = ?
               ";
		*/

		$ok = $this->Execute($sql->Delete($this->matricula));
           
       return $ok;
   
   }
  
  	function NewAddMatricula(&$turma,$curso='') //Novo metdodo de matricula. Provavelmente vai substituir o AddMatricula
	{
		//curso foi adicionado devido as reservas feitas para o curso CDARA. Para garantir as vagas dos calouros
		global $MIOLO, $module;
		if ( ($this->idsituacao!='02') || (empty($turma->turma)) )
		{
			return false;
		}
		$matricula = $MIOLO->GetBusiness($module,'matricula');

		$data->matricula = $this->matricula;
		$data->situacao = 'Matriculado';
		$data->idturma = $turma->idturma;

		$matricula->SetDataTurma($data);
		return $matricula->Insert($curso);
	}
	function AddMatricula($disciplina,$ano,$semestre,$turma)
	{
		global $MIOLO, $module;
		$objTurma = $MIOLO->GetBusiness($module,'turma');
		$objTurma->GetById($disciplina,$ano,$semestre,$turma);
		return $this->NewAddMatricula($objTurma,$this);
		/*
		if ( ($this->idsituacao!='02') || (empty($objTurma->turma)) )
		{
			return false;
		}
		$matricula = $MIOLO->GetBusiness($module,'matricula');
		
		$matricula->GetByDisciplina($this->matricula, $disciplina,$ano,$semestre);
		if ($matricula->matricula != '')
		{
			$ok = $matricula->DeleteDisciplina();
		}
		$matricula->matricula = $this->matricula;
		$matricula->disciplina = $disciplina;
		$matricula->ano = $ano;
		$matricula->semestre = $semestre;
		$matricula->turma = $turma;
		$matricula->conceito = null;
		$matricula->nota = null;
		$matricula->freq = null;
		$matricula->idconceito = null;
		$matricula->situacao = 'Matriculado';
		$matricula->idconceito = null;
		$matricula->turmalysceum = null;
		$matricula->idturma = $objTurma->idturma;
		//FIXME não entedi pq nao funcionou $matricula->SetData($data);
		$ok = $matricula->Insert();

      return $ok;*/

   }

   
  	function AddPreMatricula(&$turma)
	{
		//Novo metodo de pre-Matricula.
		//Para prematricular por disciplina/turma veja
		// AddPreMatriculaByDisciplinaTurma abaixo
		global $MIOLO, $module;
		if ( (!$this->isAtivo()) || (empty($turma->turma)) )
		{
			return false;
		}
		$prematricula = $MIOLO->GetBusiness($module,'prematricula');

		$data->matricula = $this->matricula;
		$data->idturma = $turma->idturma;
		$prematricula->SetData($data);
		return $prematricula->Insert();
	
	}
   function AddPreMatriculaByDisciplinaTurma($idDisciplina,$codTurma)
   {
   /*
        Adiciona as prematrículas que correspondem a $disciplina/turma na prematricula do aluno
   */
		global $MIOLO, $module;
		$turma = $MIOLO->GetBusiness($module,'turma');
		return $this->AddPreMatricula($turma);
        
   }
   function DeleteMatricula($idturma)
   {
        global $MIOLO, $module;
        $matricula = $MIOLO->GetBusiness($module,'matricula');
        $matricula->GetByMatriculaTurma($this->matricula,$idturma);
        $nota = $MIOLO->GetBusiness($module,'nota');
        $nota->Delete();
		if(!empty($matricula->matricula))
		{
			$ok =  $matricula->Delete();
		}
		  
		return $ok;
   }
   function NewDeleteMatricula(&$turma,$curso='')
   {
        global $MIOLO, $module;
        $matricula = $MIOLO->GetBusiness($module,'matricula');
        $matricula->GetByMatriculaTurma($this->matricula,$turma->idturma);

			if(!empty($matricula->matricula))
			{
				$ok =  $matricula->Delete($curso);
			}
		  
		return $ok;
   }
   function DeletePreMatricula($idTurma)
   {
        global $MIOLO, $module;
        $prematricula = $MIOLO->GetBusiness($module,'prematricula');
        $prematricula->GetById($this->matricula,$idTurma);
        $ok =  $prematricula->Delete();
		return $ok;
   }
   /*
   function ListDisciplinasACursar()
   {
        Retorna um RecordSet com as disciplinas a cursar do currículo do aluno
   
        global $MIOLO, $module;
        $turma = $MIOLO->GetBusiness($module,'Turma');
        
        $rs = $turma->ListWhere(array('ano','semestre'),array($this->GetAnoPreMatricula(),$this->GetSemestrePreMatricula()));
        $rsn= autoAgrupator($rs,1,4);
        return $rs;
        $rsn= array();
        foreach ($rs as $rsl)
        {
            $turma = $rsl[4];
            $campo = $rsn[$rsl[1]];
            $rsn[$rsl[1]]=array_merge(array_slice($rsl,0,4),array($campo[4]." $turma"));
        }
        return $rsn;
   }
   */
   function ListTurmasPreMatricula()
   {
         global $MIOLO, $module;
   		$curso = $this->GetCurso();
		if ( $curso->curso == '21A' )
		{
			$periodo = $this->GetPeriodoAtual();
		}
        $turma = $MIOLO->GetBusiness($module,'turma');
        
        $query = $turma->ListTurmasPreMatriculaByMatricula($this->matricula,$this->GetAnoPreMatricula(), $this->GetSemestrePreMatricula(),$periodo);
		return $query;
   }

   function ListTurmasMatricula()
   {
         global $MIOLO, $module;
        $turma = $MIOLO->GetBusiness($module,'turma');
        
        $query = $turma->ListTurmasMatriculaByMatricula($this->matricula,$this->GetAnoMatricula(), $this->GetSemestreMatricula());
      return $query; 
   }
   function AutoMatriculas(&$periodo )
   {
        global $MIOLO, $module;
        $turma = $MIOLO->GetBusiness($module,'turma');
	if(empty($periodo))
        {
            $periodo = $this->GetPeriodoAtual()+1;
        }
	$ok = $turma->AutoMatriculaByMatriculaPeriodoAnoSemestre(
            $this->matricula,
            $periodo,
            $this->GetAnoMatricula(),
            $this->GetSemestreMatricula()
           );
        return $ok;//autoAgrupator($rs,2,5);
       
   }
   function AutoPreMatriculas(&$periodo )
   {
        global $MIOLO, $module;
        $turma = $MIOLO->GetBusiness($module,'turma');
	if(empty($periodo))
        {
            $periodo = $this->GetPeriodoAtual()+1;
        }
	$ok = $turma->AutoPreMatriculaByMatriculaPeriodoAnoSemestre(
            $this->matricula,
            $periodo,
            $this->GetAnoPreMatricula(),
            $this->GetSemestrePreMatricula()
           );
        return $ok;//autoAgrupator($rs,2,5);
       
   }
   function ListHorarioTurmaMatricula()
   {
        global $MIOLO, $module;
        $turma = $MIOLO->GetBusiness($module,'turma');

        $turmasMatriculas = $this->ListMatriculas();

        $horarios=array();
        foreach($turmasMatriculas as $turmaMatricula)
        {
            //$horarios[]=$turma->GetTurmaHorarios($turmaMatricula[1],$turmaMatricula[2],$turmaMatricula[3],trim($turmaMatricula[4]));
           $horarios[] = $turma->GetTurmaHorarios($turmaMatricula[10]);  // idturma
        }
        return $horarios;
   }
   function ListHorarioTurmaPreMatricula()
   {
        global $MIOLO, $module;
        $turma = $MIOLO->GetBusiness($module,'turma');

        $turmasPreMatricula = $this->ListPreMatriculas();

        $horarios=array();
        foreach($turmasPreMatricula as $turmaPreMatricula)
        {
            $horarios[]=$turma->GetTurmaHorarios($turmaPreMatricula[2],$turmaPreMatricula[3],$turmaPreMatricula[4],trim($turmaPreMatricula[5]));
        }
        return $horarios;
   }

	function GetCurriculo()
	{
		$sql = new sql('curriculo','ga_programa','matricula = ?');
		$query = $this->objQuery($sql->Select($this->matricula));
		return $query->fields('curriculo');
	}
	function GetObjCurriculo()
	{
		global $MIOLO, $module;
		$sql = new sql('curriculo','ga_programa','matricula = ?');
		$query = $this->objQuery($sql->Select($this->matricula));
		$objCurso = $this->GetCurso();

		$curriculoID = $query->fields('curriculo');
		$cursoID = $objCurso->curso;

		if(!empty($curriculoID))
		{
			$curriculo = $MIOLO->GetBusiness($module,'curriculo'); 
			$curriculo->GetByID($cursoID."_".$curriculoID);
		}
		return $curriculo;
	}
	
	function &GetCurso()
	{
		global $MIOLO, $module;
		$curso = $MIOLO->GetBusiness($module,'curso');
		$sql = new sql
		('
			p.curso as idcurso
			','
			ga_aluno a,
			ga_programa p
			','
			a.matricula = p.matricula
			AND a.matricula = ?
		');
		$query = $this->objQuery($sql->Select($this->matricula));

		$curso->GetById($query->fields('idcurso'));
		
		return $curso;
	}	
	function GetApoioAluno()
	{
	    $sql = new sql('a.matricula,SUBSTR(a.mesanoiniapoio,1,2) as mes,SUBSTR(a.mesanoiniapoio,3,4) as ano,g.idgrupoapoio','ga_aluno a,ga_grupoapoio g','a.idgrupoapoio = g.idgrupoapoio AND a.matricula = ?');
		$query = $this->ObjQuery($sql->Select($this->matricula));
		return $query->result;
	}

	function ListGrupoApoio()
	{
		$sql = new sql('idgrupoapoio,grupoapoio','ga_grupoapoio');
		$query = $this->ObjQuery($sql->Select());
		return $query->result;
	}

	function ListApoios()
	{
	    $sql = new sql('a.matricula,SUBSTR(a.mesanoiniapoio,1,2) as mes,SUBSTR(a.mesanoiniapoio,3,4) as ano,g.idgrupoapoio,g.grupoapoio','ga_aluno a,ga_grupoapoio g','a.idgrupoapoio = g.idgrupoapoio');
		$query = $this->ObjQuery($sql->Select());
		return $query;
	}

	function UpdateApoio($data)
	{
		$sql = new sql('idgrupoapoio,mesanoiniapoio','ga_aluno','matricula = ?');
		$args = array(
			$data->idgrupoapoio,
			$data->mesanoiniapoio,
			trim($this->matricula)
			);
		$ok = $this->Execute($sql->Update($args));
		return $ok;
	}

	function DeleteApoio()
	{
		$sql = new sql('idgrupoapoio,mesanoiniapoio','ga_aluno','matricula = ?');
		$args = array(
			'',
			'',
			trim($this->matricula)
			);
		$ok = $this->Execute($sql->Update($args));
		return $ok;
	}

    function CheckCoincidenciaJ23($novaTurma,$ano = '')
    {   global $MIOLO;

        $horarios = array();  // todos os trimestres
        $turma = $MIOLO->GetBusiness('sga','turma');
        $matriculas = $this->ListMatriculas($ano);
        if ($matriculas)
        {
          foreach($matriculas as $matricula)
          {
             $turma->GetByIdTurma($matricula[10]);
             $trimestre = substr($turma->turma,0,1);
             if (($trimestre == 'A') || ($trimestre == 'B') || ($trimestre == 'C'))
                $trimestre = 0;
             else
                $trimestre = (int) $trimestre;
             foreach($turma->horarios as $horario)
             {
                $ini = (($horario[0] - 1) * 24) + $horario[1];
                $fim = (($horario[0] - 1) * 24) + $horario[2];
                for($i=$ini; $i<$fim; $i++) 
                {
                   if ($trimestre == 0)
                   {
                      $horarios[$i][] = trim($turma->disciplina).'-'.trim($turma->turma);
                      $horarios[168 + $i][] = trim($turma->disciplina).'-'.trim($turma->turma);
                      $horarios[336 + $i][] = trim($turma->disciplina).'-'.trim($turma->turma);
                   }
                   else
                      $horarios[(($trimestre - 1) * 168) + $i][] = trim($turma->disciplina).'-'.trim($turma->turma);
                }
             }
          }
        }
        $trimestre = substr($novaTurma->turma,0,1);
        if (($trimestre == 'A') || ($trimestre == 'B') || ($trimestre == 'C') )
           $trimestre = 0;
        else
           $trimestre = (int) $trimestre;
        foreach($novaTurma->horarios as $horario)
        {
           $ini = (($horario[0] - 1) * 24) + $horario[1];
           $fim = (($horario[0] - 1) * 24) + $horario[2];
           for($i=$ini; $i<$fim; $i++) 
           {
               if ($trimestre == 0)
               {
                  $horarios[$i][] = trim($novaTurma->disciplina).'-'.trim($novaTurma->turma);
                  $horarios[168 + $i][] = trim($novaTurma->disciplina).'-'.trim($novaTurma->turma);
                  $horarios[336 + $i][] = trim($novaTurma->disciplina).'-'.trim($novaTurma->turma);
               }
               else
                  $horarios[(($trimestre - 1) * 168) + $i][] = trim($novaTurma->disciplina).'-'.trim($novaTurma->turma);
           }
        }
        $coinc = array();
        foreach($horarios as $horario)
        {
           if (count($horario) > 1)
           {
              $coincNovaTurma = false;
              foreach($horario as $h)
              {
                 $coincNovaTurma = $coincNovaTurma || ($h == trim($novaTurma->disciplina).'-'.trim($novaTurma->turma));
              } 
              if ($coincNovaTurma)
              {
                 $temp = ' ['.implode(' com ',$horario).'] ';
                 $coinc[$temp] = $temp;
              } 
           }
        }
        $result = (count($coinc) > 0) ? implode(' ',$coinc) : false;
        return $result;
    }

	function SetFormando($situacao = false)
	{
		global $MIOLO,$module;
		$programa = $MIOLO->GetBusiness($module,'programa');
		$programa->GetById($this->matricula);
		$programa->SetFormando($situacao);

	}

	function QueryTurmasAPreMatricular()
	{
		
		 /*
       $sql = new sql('
               gra.periodo as periodo,
               dis.nome,
               gra.disciplina,
               tur.ano,
               tur.semestre,
               tur.turma,
					tur.idturma
				',
				'
                ga_grade gra,
                ga_programa pro,
                ga_disciplina dis,
                ga_turma tur,
                ga_reservaturma res
				',
				'
                pro.curso = gra.curso
              AND
                pro.curriculo = gra.curriculo
              AND
                pro.matricula = ?
              AND
                dis.disciplina = gra.disciplina
              AND
                tur.disciplina = gra.disciplina
              AND
                tur.ano = ?
              AND
                tur.semestre = ?
              AND
			  	tur.idturma = res.idturma 
              AND
                res.curso = gra.curso
              AND
                gra.disciplina 
              NOT IN
                 (
                  SELECT
                    disciplina
                  FROM
                    ga_historico
                  WHERE
                    matricula = ?
                  AND
                    UPPER(situacao) = \'APROVADO\'
                 )
				 ',
				 '
                gra.periodo,
                dis.nome,
                tur.turma
				');
       
       $args = array($matricula,$ano,$semestre,$matricula);
       $query = $this->objQuery($sql->Select($args));

	   return $query;*/

       $sql = new sql('
		 			gra.periodo,
               gra.disciplina,
					dis.nome
				',
				'
                ga_grade gra,
                ga_programa pro,
                ga_disciplina dis
				',
				'
					    pro.matricula = ?
					AND gra.curso = pro.curso
					AND gra.curriculo = pro.curriculo
					AND dis.disciplina = gra.disciplina
					AND gra.disciplina NOT IN
					    (
							(
					    	SELECT
								disciplina
							FROM
								ga_historico
                  	WHERE
                    		matricula = ?
                  	AND UPPER(situacao) = \'APROVADO\'
							)
							UNION
							(
					    	SELECT
								equ.discrequi
							FROM
								ga_equivalencia equ,
								ga_historico his2,
								ga_programa pro2
                  	WHERE
                    		his2.matricula = ?
							AND pro2.matricula = his2.matricula
							AND equ.curso = pro2.curso
							AND equ.curriculo = pro2.curriculo
                  	AND UPPER(his2.situacao) = \'APROVADO\'
							AND equ.discequiv = his2.disciplina
							)
						 )
				',
				'
                gra.periodo,
					 gra.disciplina,
                dis.nome
				');
       
		$args = array(
			$this->matricula,
			$this->matricula,
			$this->matricula
		);
       $query = $this->objQuery($sql->Select($args));

	   return $query;
	}
	
	/**
	*Curriculo Mínimo	
	*Retorna query com o curriculo minimo de um curso
	*/
	function CurriculoMinimo()
	
	{
		$sql = new sql(''); 	
	}

	function NotasJ23()
	{
		$sql = new sql('d.nome,t.turma,n.nota1,n.freq1,n.nota2,n.freq2,n.nota3,n.freq3','ga_disciplina d, ga_turma t, ga_matricula m, ga_notasfreq n','t.idturma = m.idturma and m.matricula = n.matricula(+) and m.idturma = n.idturma(+) and t.disciplina = d.disciplina and m.matricula = ?');

		$query = $this->ObjQuery($sql->Select($this->matricula));
		return $query;
	}

	function ListFaixa($matriculaInicial, $matriculaFinal)
	{
		$matriculaInicial = (int) $matriculaInicial;
		$matriculaFinal   = (int) $matriculaFinal;

		if( $matriculaInicial > $matriculaFinal)
		{
			return false;
		}
		$sql = new sql("
					alu.matricula,
					pes.nome
				","
					ga_aluno alu,
					cm_pessoa pes
				","
					    pes.idpessoa = alu.idpessoa
					AND alu.idsituacao='02'
					AND alu.matricula BETWEEN (?) AND (?)
				");
		$sql->parameters = Array($matriculaInicial,$matriculaFinal);
		$query = $this->objQuery($sql->Select());
		return $query->result;
	}

	function GetPrograma()
	{
		global $MIOLO, $module;
		$programa = $MIOLO->GetBusiness('sga','programa');
		return $programa->GetById($this->matricula);
	}

	function ListByCursoTipoAnoSemIngresso($curso,$anoingresso,$semestreingresso,$tipoingresso)
	{
		$sql = new sql('rownum as seq,a.matricula,pes.nome,p.ira/100 as ira,p.totalpontos,p.classificacao,a.anoconcl2gr,a.escola2g,m.municipio,s.situacao','ga_aluno a, ga_programa p, cm_pessoa pes, cm_municipio m, ga_situacao s','a.idpessoa = pes.idpessoa and a.matricula = p.matricula and a.cidade2g = m.idmunicipio and a.idsituacao = s.idsituacao and p.curso = ? and a.anoingresso = ? and a.semingresso = ? and a.idtipoingresso = ?');
		$args = array(
			$curso,
			$anoingresso,
			$semestreingresso,
			$tipoingresso
		);
		$query = $this->ObjQuery($sql->Select($args));
		return $query;
	}

	function ListCidade2gAnoSemIngresso($curso,$anoingresso,$semestreingresso,$tipoingresso)
	{
		
		//$sql = new sql('m.iduf,m.municipio,a.cidade2g','ga_aluno a, cm_municipio m, ga_programa p, ga_situacao s','a.matricula = p.matricula and a.cidade2g = m.idmunicipio and a.idsituacao = s.idsituacao and p.curso = ? and a.anoingresso = ? and a.semingresso = ? and a.idtipoingresso = ?','m.iduf,m.municipio','a.cidade2g,m.iduf,m.municipio');
		
		$sql = new sql('m.iduf,m.municipio,a.cidade2g','ga_aluno a, cm_municipio m, ga_programa p, ga_situacao s','a.matricula = p.matricula and a.cidade2g = m.idmunicipio and a.idsituacao = s.idsituacao and a.anoingresso = ? and a.semingresso = ? and a.idtipoingresso = ?','m.iduf,m.municipio','a.cidade2g,m.iduf,m.municipio');
		$args = array(
			$anoingresso,
			$semestreingresso,
			$tipoingresso
		);
		if($curso <> '0')
		{
			$sql->where =$sql->where."and p.curso = ?";
			$args = array_merge($args,$curso);
		}	
		
		$query = $this->ObjQuery($sql->Select($args));
		return $query->result;
	}
	
	function ListByCursoTipoAnoSemIngressoCidade2g($curso,$anoingresso,$semestreingresso,$tipoingresso,$idmunicipio)
	{
		$sql = new sql('a.escola2g,count(a.escola2g) as total','ga_aluno a, ga_programa p, cm_municipio m, ga_situacao s','a.matricula = p.matricula and a.cidade2g = m.idmunicipio and a.idsituacao = s.idsituacao and a.anoingresso = ? and a.semingresso = ? and a.idtipoingresso = ? and m.idmunicipio = ?','a.escola2g','a.escola2g');
		$args = array(
			$anoingresso,
			$semestreingresso,
			$tipoingresso,
			$idmunicipio
		);

		if($curso <> '0')
		{
			$sql->where =$sql->where."and p.curso = ?";
			$args = array_merge($args,$curso);
		}	
		$query = $this->ObjQuery($sql->Select($args));
		return $query->result;
	}

	function ListFormandos($ano,$semestre)
	{
		$sql = new sql('a.matricula,p.nome','ga_aluno a, ga_progcurtit r, cm_pessoa p','a.idpessoa = p.idpessoa and a.matricula = r.matricula and r.ano = ? and r.semestre = ?','r.curso,a.matricula','r.curso,a.matricula,p.nome');
		$args = array(
			$ano,
			$semestre
		);
		$query = $this->ObjQuery($sql->Select($args));
		return $query;
	}

	function ListExames()
	{
		$sql = new sql("provao,TO_CHAR(dataprovao,'DD/MM/YYYY') as dataprovao","ga_provao","matricula = ?" );
		$query = $this->ObjQuery($sql->Select($this->matricula));
		return $query;
	}

	function isMatriculado($turma)
	{
		$turmas = $this->ListMatriculas();	
		foreach ( $turmas as $t )
		{
			if ( $turma->idturma == $t[10] )
			{
				return TRUE;
			}
		}
		return FALSE;
	}

	function ListTvcSemNota($ano, $semestre)
	{
		$sql = new sql('t.disciplina, t.turma','ga_turma t, ga_tvc v, ga_nota n','n.matricula = ? and n.idtvc = v.idtvc and v.idturma = t.idturma and t.ano = ? and t.semestre = ? and n.nota IS NULL','','t.disciplina,t.turma');
		$args = array($this->matricula,$ano,$semestre);
		$query = $this->objQuery($sql->Select($args));
		return $query;
	}
    function ListAlunosCurso($curso)
    {
        $sql = new sql('prog.matricula as matricula, p.nome as nome, s.situacao as situacao','ga_programa prog,ga_aluno a,cm_pessoa p,ga_situacao s','p.idpessoa = a.idpessoa and a.idsituacao = s.idsituacao and prog.matricula = a.matricula and prog.curso = ?','a.matricula');
		$args = array($curso);
		$query = $this->objQuery($sql->Select($args));
		return $query;
    
    }
}

?>
