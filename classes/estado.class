<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
* Este arquivo é parte do programa SigaEPT
*
* O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
* termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
* na versão 2 da Licença.
*
* Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
* uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
* Pública Geral GNU/GPL em português para maiores detalhes.
*
* Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
* junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
* www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
* St, Fifth Floor, Boston, MA 02110-1301, USA
*/
?>
<?

class BusinessBibliotecaEstado extends Business
{

	var $idestado;
	var $descricao;
	var $mnemonico;

	function BusinessBibliotecaEstado($data = null)
	{
		$this->Business('sigaept', $data);
	}

	function GetData()
	{
		$data = new FormData();
		$data->idestado = $this->idestado;
		$data->descricao = $this->descricao;
		$data->mnemonico = $this->mnemonico;
		return $data;
	}


	function SetData($data)
	{
		$this->idestado = $data->idestado;
		$this->descricao = $data->descricao;
		$this->mnemonico = $data->mnemonico;
	}

	function GetByCodigo($idestado)
	{

		$sql = new sql('idestado,descricao,mnemonico','bt_estado','idestado = ?');

		$query = $this->Query($sql,$idestado);

		if ( !$query->eof() )
		{
			$this->SetData($query->GetRowObject());
			$this->SetEstados(); //Usado no MultiText2
		}

		return $this;
	}

	function SetEstados()
	{
		$sql = new sql('a.idoperacao, a.idestadofuturo', 'bt_transicao a', 'idestadopresente = ?');
		$query = $this->Query($sql,$this->idestado);
		$this->estados = $query->result;
	}


	function Update($data)
	{
		$sql = new sql('idestado,descricao,mnemonico','bt_estado','idestado = ?');

		// values é um array com cada campo do primeiro parametro do sql mais os
		// parâmetros do where
		$values = array($data->idestado,$data->descricao,$data->mnemonico,$data->idestado);

		$result = $this->Execute($sql->Update($values));
		//    var_dump($result);
		if ($result)
		{
			// Agora precisamos atualizar (deletar + inserir) os dados da transação de estados
			$sql->sql('','bt_transicao','idestadopresente=?');
			$cmd[] = $sql->Delete($data->idestado);
			$sql->sql('idestadopresente, idoperacao, idestadofuturo','bt_transicao');
			if ($data->estados)
			{
				foreach($data->estados as $estado)
				{
					$cmd[] = $sql->Insert(array($data->idestado, $estado[0], $estado[1]));
				}
			}
			//			$ok = $this->Execute($cmd);
			//		var_dump($ok);

			foreach($cmd as $comando)
			{
				$ok = $this->Execute($comando);
				//         var_dump($comando);
			}

			//if ($ok) {$this->Log(OP_UPD,"idtrans = $this->idtrans; transacao = $this->transacao");}
		}
		else
		{
			return false;
		}
		return $ok;
	}

	/**
	 * Retorna o id e a descrição do estado do exemplar, pelo número do tombo.
	 *
	 * @author Daniel Bonfim
	 * @since 27-02-2013
	 * @param array
	 */
	function getEstadoByNumeroTombo($numeroTombo) {
		$sql = new sql("
				es.idestado,
				es.descricao

				FROM
				bt_exemplar e,
				bt_regracirculacao r,
				bt_estado es,
				bt_unidade u,
				bt_obra o

				WHERE
				e.numerodotombo = '$numeroTombo' AND
				e.idregracirculacao = r.idregracirculacao AND
				e.idestado = es.idestado AND
				e.idunidade = u.idunidade AND
				e.idobra = o.idobra
				");

		$query = $this->Query($sql);
		return $query->result[0];
	}

	function LastNumeroEstado()
	{
		//$sql = new sql('seq_bt_estado.nextval','dual');
		$sql = new sql("nextval('seq_bt_estado')");
		$query = $this->Query($sql);
		return $query->result[0][0];
	}

	function Insert($data)
	{

		$sql = new sql('idestado,descricao,mnemonico','bt_estado');

		$data->idestado = $this->LastNumeroEstado();

		$values = array($data->idestado,$data->descricao,$data->mnemonico);

		$result = $this->Execute($sql->Insert($values));

		if ($result)
		{
			// Agora precisamos atualizar (deletar + inserir) os dados da transação de estados
			$sql->sql('','bt_transicao','idestadopresente=?');
			$cmd[] = $sql->Delete($data->idestado);
			$sql->sql('idestadopresente, idoperacao, idestadofuturo','bt_transicao');
			if ($data->estados)
			{
				foreach($data->estados as $estado)
				{
					$cmd[] = $sql->Insert(array($data->idestado, $estado[0], $estado[1]));
				}
			}
			foreach($cmd as $comando)
			{
				$ok = $this->Execute($comando);
				//       var_dump($comando);
			}
			//if ($ok) {$this->Log(OP_UPD,"idtrans = $this->idtrans; transacao = $this->transacao");}
		}
		else
		{
			return false;
		}
		if($ok){
			$ok = $data->idestado;
		}
		return $ok;


		return $ok;

	}


	function Delete($data)
	{
		// primeiro deleta as informações
		// da bt_transicao.
		$sql = new sql('','bt_transicao','idestadopresente=?');
		$ok = $this->Execute($sql->Delete($data->idestado));

		// agora deleta as informações
		// da bt_estado.
		if ($ok)
		{
			$sql = new sql('','bt_estado','idestado = ?');
			$ok = $this->Execute($sql->Delete($data->idestado));
		}

		return $ok;

	}

	function ListEstado()
	{
		$sql = new sql('idestado,mnemonico,descricao','bt_estado','','idestado');
		$query = $this->Query($sql);
		return $query;
	}



	function GetIdByMnemonico($mnemonico){
		$sql = new sql('idestado','bt_estado','(mnemonico = ?)');
		$query = $this->Query($sql,$mnemonico);
		return $query->result[0][0];
	}

	function GetMnemonicoById($idestado){
		$sql = new sql('mnemonico','bt_estado','(idestado = ?)');
		$query = $this->Query($sql,$idestado);
		return $query->result[0][0];
	}



}
?>
